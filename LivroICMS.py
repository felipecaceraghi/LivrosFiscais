# -*- coding: utf-8 -*-
"""
Sistema RAICMS - Livro de Apuração do ICMS (Monolithic Version)
===============================================================

Este é um arquivo único do projeto RAICMS, combinando todos os módulos
para facilitar a distribuição e execução.

Versão: 2.3 (Monolithic API com Saldo Anterior Dinâmico e Consultas Externalizadas)
Data: 2025-01-19
"""

# --- IMPORTS ---
import sys
import os
import json
import traceback
from collections import namedtuple, defaultdict
from datetime import datetime, date, timedelta
from decimal import Decimal, getcontext, InvalidOperation
from itertools import groupby

import openpyxl
import pyodbc
from openpyxl.styles import Font, Border, Side, Alignment
from reportlab.lib import colors
from reportlab.lib.enums import TA_CENTER, TA_RIGHT, TA_LEFT
from reportlab.lib.pagesizes import A4, landscape
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import mm, cm
from reportlab.platypus import SimpleDocTemplate, Table, TableStyle, Paragraph, Spacer, PageBreak

# --- CONSULTAS SQL ---
# <<<<<<< ATENÇÃO: COLE O CONTEÚDO DE SUAS CONSULTAS SQL ABAIXO >>>>>>>>>

SQL_GET_LIVRO_POR_TIPO = """
SELECT NUME_LIV
FROM BETHADBA.EFLIVROS
WHERE CODI_EMP = ? AND CODI_LIV = ? AND DATA_LIV = ?;
"""

SQL_GET_PAGINA_ANTERIOR = """
SELECT COALESCE(LIVRO.PFIN_LIV, 0) AS PAGINA_FINAL_ANTERIOR
FROM BETHADBA.EFLIVROS AS LIVRO,
     LATERAL (SELECT MAX(LIVRO_AUX.DATA_LIV) AS DATA_LIVRO
              FROM BETHADBA.EFLIVROS AS LIVRO_AUX
              WHERE LIVRO_AUX.CODI_EMP = ?
                AND LIVRO_AUX.CODI_LIV = ?
                AND LIVRO_AUX.DATA_LIV < ?) AS TDULTIMA_DATA
WHERE LIVRO.CODI_EMP = ?
  AND LIVRO.CODI_LIV = ?
  AND LIVRO.DATA_LIV = TDULTIMA_DATA.DATA_LIVRO
"""

SQL_QUERY_PRINCIPAL_TEMPLATE = """
SELECT TDDADOS.QUADRO AS QUADRO, TDDADOS.ORDE AS ORDE, TDDADOS.CODINAT AS CODINAT, TDDADOS.CODINAT1 AS CODINAT1, TDDADOS.VCON AS VCON, TDDADOS.BCAL AS BCAL, TDDADOS.VICM AS VICM, TDDADOS.IICM AS IICM, TDDADOS.OICM AS OICM, TDDADOS.CEMP AS CEMP, TDDADOS.LIVRO AS LIVRO, TDDADOS.PAGINA AS PAGINA, CASE WHEN NOT (TD_GEEMPRE_AUX.USA_CENTRALIZADORA = 'S' AND TD_PARAM_AUX.USA_CENTRALIZADORA_RELATORIO = 'S') THEN TDDADOS.TINSEMP ELSE TD_EMP_CENTRAL.TINSEMP END AS TINSEMP, CASE WHEN NOT (TD_GEEMPRE_AUX.USA_CENTRALIZADORA = 'S' AND TD_PARAM_AUX.USA_CENTRALIZADORA_RELATORIO = 'S') THEN TDDADOS.IESTEMP ELSE TD_EMP_CENTRAL.IESTEMP END AS IESTEMP, CASE WHEN NOT (TD_GEEMPRE_AUX.USA_CENTRALIZADORA = 'S' AND TD_PARAM_AUX.USA_CENTRALIZADORA_RELATORIO = 'S') THEN TDDADOS.CGCEEMP ELSE TD_EMP_CENTRAL.CGCEEMP END AS CGCEEMP, CASE WHEN NOT (TD_GEEMPRE_AUX.USA_CENTRALIZADORA = 'S' AND TD_PARAM_AUX.USA_CENTRALIZADORA_RELATORIO = 'S') THEN TDDADOS.NOMEEMP ELSE TD_EMP_CENTRAL.NOMEEMP END AS NOMEEMP, CASE WHEN NOT (TD_GEEMPRE_AUX.USA_CENTRALIZADORA = 'S' AND TD_PARAM_AUX.USA_CENTRALIZADORA_RELATORIO = 'S') THEN TDDADOS.ESTAEMP ELSE TD_EMP_CENTRAL.ESTAEMP END AS ESTAEMP FROM ( SELECT TDDADOS_QUADRO1.QUADRO AS QUADRO, TDDADOS_QUADRO1.ORDE AS ORDE, TDDADOS_QUADRO1.CODINAT AS CODINAT, TDDADOS_QUADRO1.CODINAT1 AS CODINAT1, COALESCE(SUM(TDDADOS_QUADRO1.VCON), 0) AS VCON, COALESCE(SUM(TDDADOS_QUADRO1.BCAL), 0) AS BCAL, COALESCE(SUM(TDDADOS_QUADRO1.VICM), 0) AS VICM, COALESCE(SUM(TDDADOS_QUADRO1.IICM), 0) AS IICM, COALESCE(SUM(TDDADOS_QUADRO1.OICM), 0) AS OICM, TDDADOS_QUADRO1.CEMP AS CEMP, TDDADOS_QUADRO1.LIVRO AS LIVRO, TDDADOS_QUADRO1.PAGINA AS PAGINA, TDDADOS_QUADRO1.TINSEMP AS TINSEMP, TDDADOS_QUADRO1.IESTEMP AS IESTEMP, TDDADOS_QUADRO1.CGCEEMP AS CGCEEMP, TDDADOS_QUADRO1.NOMEEMP AS NOMEEMP, TDDADOS_QUADRO1.ESTAEMP AS ESTAEMP FROM( SELECT 1 AS QUADRO, 1 AS ORDE, N.CODI_NAT AS CODINAT, 0 AS CODINAT1, SUM(CASE WHEN (N.CODI_NAT IN (1111, 1113, 2111, 2113) AND PV.DESCONTAR_VALOR_ICMS_IPI_CFOP_MERCANTIL = 'S') THEN 0 ELSE COALESCE(TD_VCON.VCON, 0) END) AS VCON, SUM(CASE WHEN (N.CODI_NAT IN (1111, 1113, 2111, 2113) AND PV.DESCONTAR_VALOR_ICMS_IPI_CFOP_MERCANTIL = 'S') OR (G.ESTA_EMP = 'RS' AND A.RS_GERAR_CREDITO_ICMS_EMP_SN = 'S') OR TDAUX2.EMITE_LINHA_ZERADA = 'S' THEN 0 ELSE TDVALORES.BASE_CALCULO END) AS BCAL, SUM(CASE WHEN (N.CODI_NAT IN (1111, 1113, 2111, 2113) AND PV.DESCONTAR_VALOR_ICMS_IPI_CFOP_MERCANTIL = 'S') OR (G.ESTA_EMP = 'PR' AND TDAUX.TEMICMS = 1 AND (N.CODI_NAT IN (1556, 2556, 3556, 1557, 2557))) OR (G.ESTA_EMP = 'RS' AND A.RS_GERAR_CREDITO_ICMS_EMP_SN = 'S') OR TDAUX2.EMITE_LINHA_ZERADA = 'S' THEN 0 ELSE TDVALORES.VALOR_IMPOSTO END) AS VICM, SUM(CASE WHEN (N.CODI_NAT IN (1111, 1113, 2111, 2113) AND PV.DESCONTAR_VALOR_ICMS_IPI_CFOP_MERCANTIL = 'S') OR (G.ESTA_EMP = 'RS' AND A.RS_GERAR_CREDITO_ICMS_EMP_SN = 'S') OR TDAUX2.EMITE_LINHA_ZERADA = 'S' THEN 0 ELSE COALESCE(TDIMP1.VISE_IEN, 0) + COALESCE((TDIMP3.VISE_IEN + TDIMP3.BCAL_IEN), 0) + COALESCE((TDIMP18.VISE_IEN + TDIMP18.BCAL_IEN), 0) END) AS IICM, SUM(CASE WHEN (N.CODI_NAT IN (1111, 1113, 2111, 2113) AND PV.DESCONTAR_VALOR_ICMS_IPI_CFOP_MERCANTIL = 'S') OR TDAUX2.EMITE_LINHA_ZERADA = 'S' THEN 0 WHEN (G.ESTA_EMP = 'RS' AND A.RS_GERAR_CREDITO_ICMS_EMP_SN = 'S') THEN COALESCE(TD_VCON.VCON, 0) ELSE COALESCE(TDIMP1.VOUT_IEN, 0) + COALESCE(TDIMP3.VOUT_IEN, 0) + COALESCE(TDIMP18.VOUT_IEN, 0) + COALESCE(TDIMP1_RJ_BARES_RESTAURANTES.VOUT_IEN, 0) END + TDPRODUTO_SUJEITO_CREDITO_AQUISICAO_USO_CONSUMO_ART_29.BASE_CALCULO_ICMS) AS OICM, N.CODI_EMP AS CEMP, {livro_num} AS LIVRO, {pagina_num} AS PAGINA, G.TINS_EMP AS TINSEMP, TD_DADOS_EMPRESA.IESTEMP AS IESTEMP, TD_DADOS_EMPRESA.CGCEEMP AS CGCEEMP, TD_DADOS_EMPRESA.NOMEEMP AS NOMEEMP, TD_DADOS_EMPRESA.ESTAEMP AS ESTAEMP, N.CODI_EMP AS CODI_EMP FROM BETHADBA.EFENTRADAS AS N INNER JOIN BETHADBA.GEEMPRE AS G ON G.CODI_EMP = N.CODI_EMP INNER JOIN BETHADBA.EFACUMULADOR_VIGENCIA AS A ON A.CODI_EMP = N.CODI_EMP AND A.CODI_ACU = N.CODI_ACU AND A.VIGENCIA_ACU = DSDBA.D_BUSCA_VIGENCIA_ACUMULADOR(N.CODI_EMP, N.CODI_ACU, N.DENT_ENT) INNER JOIN BETHADBA.EFPARAMETRO_VIGENCIA AS PV ON PV.CODI_EMP = N.CODI_EMP AND PV.VIGENCIA_PAR = DSDBA.D_BUSCA_VIGENCIA_PARAMETRO(N.CODI_EMP, N.DENT_ENT) INNER JOIN BETHADBA.EFESPECIES AS P ON P.CODI_ESP = N.CODI_ESP, LATERAL(SELECT CASE WHEN G.ESTA_EMP = 'CE' AND N.CODI_NAT IN (1601, 1602) AND N.SITUACAO_ENT = 9 AND N.VCON_ENT > 0 THEN 'S' WHEN G.ESTA_EMP = 'PA' AND N.CODI_NAT IN (1601, 1602) AND N.SITUACAO_ENT = 9 THEN 'S' ELSE 'N' END AS EMITE_LINHA_ZERADA FROM DSDBA.DUMMY) AS TDAUX2, LATERAL(SELECT CASE WHEN (G.ESTA_EMP = 'RS' AND N.CODI_NAT IN (1116, 1117, 2116, 2117)) OR (TDAUX2.EMITE_LINHA_ZERADA = 'S') THEN 0 ELSE N.VCON_ENT END AS VCON FROM DSDBA.DUMMY) AS TD_VCON, /*-AUXILIAR-*/ LATERAL(SELECT COALESCE(MAX(CASE WHEN I.CODI_IMP = 1 THEN 1 END), 0) AS TEMICMS, COALESCE(MAX(CASE WHEN I.CODI_IMP = 3 THEN 1 END), 0) AS TEMISS, COALESCE(MAX(CASE WHEN I.CODI_IMP = 18 THEN 1 END), 0) AS TEMISSR, COALESCE(MAX(CASE WHEN I.CODI_IMP = 45 THEN 1 END), 0) AS TEMICMSI FROM BETHADBA.EFIMPENT AS I WHERE N.CODI_EMP = I.CODI_EMP AND N.CODI_ENT = I.CODI_ENT) AS TDAUX, LATERAL(SELECT CASE WHEN NOT (EMISSORA.TINS_EMP IN (3, 6)) THEN EMISSORA.CGCE_EMP ELSE COALESCE(DSDBA.S_BUSCA_ALTERACAO_EMPRESA(EMISSORA.CODI_EMP, '{data_inicio}', 21), EMISSORA.CPF_LEG_EMP, '') END AS CGCEEMP, COALESCE(DSDBA.S_BUSCA_ALTERACAO_EMPRESA(EMISSORA.CODI_EMP, '{data_inicio}', 12), EMISSORA.IEST_EMP) AS IESTEMP, COALESCE(DSDBA.S_BUSCA_ALTERACAO_EMPRESA(EMISSORA.CODI_EMP, '{data_inicio}', 2), EMISSORA.RAZAO_EMP) AS NOMEEMP, COALESCE(DSDBA.S_BUSCA_ALTERACAO_EMPRESA(EMISSORA.CODI_EMP, '{data_inicio}', 9), EMISSORA.ESTA_EMP) AS ESTAEMP FROM BETHADBA.GEEMPRE AS EMISSORA WHERE EMISSORA.CODI_EMP = {cod_emp}) AS TD_DADOS_EMPRESA, /*-SUBTRI-*/ LATERAL(SELECT COUNT(1) AS QTD FROM BETHADBA.EFIMPENT AS IMPOSTO WHERE IMPOSTO.CODI_EMP = N.CODI_EMP AND IMPOSTO.CODI_ENT = N.CODI_ENT AND IMPOSTO.CODI_IMP = 9) AS TD_TEM_SUBTRI, LATERAL(SELECT COALESCE(SUM(I.VLOR_IEN) * (CASE WHEN N.DENT_ENT < DATE('2020-01-01') THEN 80 ELSE A.SC_CREDITO_ENERGIA_ELETRICA_LAUDO_TECNICO_PERCENTUAL END)/100, 0) AS VLOR_IEN FROM BETHADBA.EFIMPENT AS I WHERE I.CODI_EMP = N.CODI_EMP AND I.CODI_ENT = N.CODI_ENT AND I.CODI_IMP = 9 AND G.ESTA_EMP = 'SC' AND A.SC_CREDITO_ENERGIA_ELETRICA_LAUDO_TECNICO = 'S' AND NOT(A.SC_CREDITO_ENERGIA_ELETRICA_LAUDO_TECNICO_PERCENTUAL_TIPO = 0 AND N.DENT_ENT < DATE('2020-01-01')) AND P.CODIGO_MODELO IN ('06', '66') AND PV.REST_PAR = 1) AS TD_IMP9, /*-ICMS-*/ LATERAL(SELECT CASE WHEN ((A.SIMPLESN_CREDITO_PRESUMIDO_TIPO_ACU = 'A' AND A.SIMPLESN_CREDITO_PRESUMIDO_ACU = 'S' AND G.ESTA_EMP = 'SC' AND N.DENT_ENT >= '2009-01-01') OR (A.SIMPLESN_CREDITO_PRESUMIDO_ACU = 'S' AND G.ESTA_EMP = 'PR') OR (G.ESTA_EMP IN ('PA') AND N.SITUACAO_ENT IN (1, 10) AND N.DATA_ESCRITURACAO IS NOT NULL)) OR (G.ESTA_EMP = 'SC' AND A.SC_CREDITO_ENERGIA_ELETRICA_LAUDO_TECNICO = 'S' AND A.SC_CREDITO_ENERGIA_ELETRICA_LAUDO_TECNICO_PERCENTUAL_TIPO = 0 AND P.CODIGO_MODELO IN ('06', '66') AND PV.REST_PAR = 1 AND N.DENT_ENT < DATE('2020-01-01')) OR (G.ESTA_EMP = 'RJ' AND N.DENT_ENT >= DATE('2020-04-01') AND A.SIMPLESN_CREDITO_PRESUMIDO_ACU = 'S') THEN 0.00 ELSE SUM(I.BCAL_IEN) END AS BCAL_IEN, CASE WHEN ((A.SIMPLESN_CREDITO_PRESUMIDO_TIPO_ACU = 'A' AND A.SIMPLESN_CREDITO_PRESUMIDO_ACU = 'S' AND G.ESTA_EMP = 'SC' AND N.DENT_ENT >= '2009-01-01') OR (A.SIMPLESN_CREDITO_PRESUMIDO_ACU = 'S' AND G.ESTA_EMP = 'PR')) OR (G.ESTA_EMP = 'SC' AND A.SC_CREDITO_ENERGIA_ELETRICA_LAUDO_TECNICO = 'S' AND A.SC_CREDITO_ENERGIA_ELETRICA_LAUDO_TECNICO_PERCENTUAL_TIPO = 0 AND P.CODIGO_MODELO IN ('06', '66') AND PV.REST_PAR = 1 AND N.DENT_ENT < DATE('2020-01-01')) OR (G.ESTA_EMP = 'RJ' AND N.DENT_ENT >= DATE('2020-04-01') AND A.SIMPLESN_CREDITO_PRESUMIDO_ACU = 'S') THEN 0.00 WHEN (A.LANCTO_DEB_CRE_REF_ANT_ACU = 'S' AND G.ESTA_EMP = 'RS') OR (G.ESTA_EMP = 'SC' AND A.SC_CREDITO_ENERGIA_ELETRICA_LAUDO_TECNICO = 'S' AND A.SC_CREDITO_ENERGIA_ELETRICA_LAUDO_TECNICO_PERCENTUAL_TIPO = 0 AND P.CODIGO_MODELO IN ('06', '66') AND PV.REST_PAR = 1 AND N.DENT_ENT < DATE('2020-01-01')) THEN 0.00 WHEN (G.ESTA_EMP IN ('PA') AND N.SITUACAO_ENT IN (1, 10) AND N.DATA_ESCRITURACAO IS NOT NULL) THEN 0.00 WHEN G.ESTA_EMP = 'SC' AND A.SC_CREDITO_ENERGIA_ELETRICA_LAUDO_TECNICO = 'S' AND A.SC_CREDITO_ENERGIA_ELETRICA_LAUDO_TECNICO_PERCENTUAL_TIPO = 1 AND P.CODIGO_MODELO IN ('06', '66') AND PV.REST_PAR = 1 AND N.DENT_ENT < DATE('2020-01-01') THEN ((SUM(I.VLOR_IEN) + (CASE WHEN TD_TEM_SUBTRI.QTD = 0 THEN SUM(I.VLORSUBTRI_IEN) ELSE 0 END)) * 80/100) WHEN G.ESTA_EMP = 'SC' AND A.SC_CREDITO_ENERGIA_ELETRICA_LAUDO_TECNICO = 'S' AND P.CODIGO_MODELO IN ('06', '66') AND PV.REST_PAR = 1 AND N.DENT_ENT >= DATE('2020-01-01') THEN ((SUM(I.VLOR_IEN) + (CASE WHEN TD_TEM_SUBTRI.QTD = 0 THEN SUM(I.VLORSUBTRI_IEN) ELSE 0 END)) * A.SC_CREDITO_ENERGIA_ELETRICA_LAUDO_TECNICO_PERCENTUAL/100) WHEN G.ESTA_EMP = 'RS' THEN SUM(I.VLOR_IEN) + SUM(I.VALOR_FUNDO_AMPARA_IEN) ELSE SUM(I.VLOR_IEN) END AS VLOR_IEN, CASE WHEN ((A.SIMPLESN_CREDITO_PRESUMIDO_TIPO_ACU = 'A' AND A.SIMPLESN_CREDITO_PRESUMIDO_ACU = 'S' AND G.ESTA_EMP = 'SC' AND N.DENT_ENT >= '2009-01-01') OR (A.SIMPLESN_CREDITO_PRESUMIDO_ACU = 'S' AND G.ESTA_EMP = 'PR')) OR (G.ESTA_EMP = 'SC' AND A.SC_CREDITO_ENERGIA_ELETRICA_LAUDO_TECNICO = 'S' AND A.SC_CREDITO_ENERGIA_ELETRICA_LAUDO_TECNICO_PERCENTUAL_TIPO = 0 AND P.CODIGO_MODELO IN ('06', '66') AND PV.REST_PAR = 1 AND N.DENT_ENT < DATE('2020-01-01')) OR (G.ESTA_EMP = 'RJ' AND N.DENT_ENT >= DATE('2020-04-01') AND A.SIMPLESN_CREDITO_PRESUMIDO_ACU = 'S') THEN 0.00 ELSE CASE WHEN G.ESTA_EMP ='GO' THEN COALESCE(SUM(I.VISE_IEN),0) + COALESCE(SUM(I.NTRI_IEN),0) + COALESCE(SUM(I.REDU_IEN),0) ELSE SUM(I.VISE_IEN) END END AS VISE_IEN, CASE WHEN (G.ESTA_EMP = 'RJ' AND N.DENT_ENT >= DATE('2020-04-01') AND A.SIMPLESN_CREDITO_PRESUMIDO_ACU = 'S') THEN 0 WHEN ((A.SIMPLESN_CREDITO_PRESUMIDO_TIPO_ACU = 'A' AND A.SIMPLESN_CREDITO_PRESUMIDO_ACU = 'S' AND G.ESTA_EMP = 'SC' AND N.DENT_ENT >= '2009-01-01') OR (A.SIMPLESN_CREDITO_PRESUMIDO_ACU = 'S' AND G.ESTA_EMP = 'PR')) OR (G.ESTA_EMP = 'SC' AND A.SC_CREDITO_ENERGIA_ELETRICA_LAUDO_TECNICO = 'S' AND A.SC_CREDITO_ENERGIA_ELETRICA_LAUDO_TECNICO_PERCENTUAL_TIPO = 0 AND P.CODIGO_MODELO IN ('06', '66') AND PV.REST_PAR = 1 AND N.DENT_ENT < DATE('2020-01-01')) THEN SUM(I.VCON_IEN) WHEN (G.ESTA_EMP IN ('PA') AND N.SITUACAO_ENT IN (1, 10) AND N.DATA_ESCRITURACAO IS NOT NULL) THEN SUM(I.VOUT_IEN + I.BCAL_IEN) ELSE SUM(I.VOUT_IEN) END AS VOUT_IEN FROM BETHADBA.EFIMPENT AS I WHERE N.CODI_EMP = I.CODI_EMP AND N.CODI_ENT = I.CODI_ENT AND I.CODI_IMP = 1 AND NOT(G.ESTA_EMP = 'RJ' AND PV.RJ_BARES_RESTAURANTES_PAR = 'S')) AS TDIMP1, LATERAL(SELECT COALESCE(SUM(I.VCON_IEN), 0) AS VOUT_IEN FROM BETHADBA.EFIMPENT AS I WHERE N.CODI_EMP = I.CODI_EMP AND N.CODI_ENT = I.CODI_ENT AND I.CODI_IMP = 1 AND G.ESTA_EMP = 'RJ' AND PV.RJ_BARES_RESTAURANTES_PAR = 'S') AS TDIMP1_RJ_BARES_RESTAURANTES, /*-ISS-*/ LATERAL(SELECT SUM(I.BCAL_IEN) AS BCAL_IEN, SUM(I.VLOR_IEN) AS VLOR_IEN, SUM(I.VISE_IEN) AS VISE_IEN, SUM(I.VOUT_IEN) AS VOUT_IEN FROM BETHADBA.EFIMPENT AS I WHERE N.CODI_EMP = I.CODI_EMP AND N.CODI_ENT = I.CODI_ENT AND N.CODI_NAT IN (1933, 2933) AND I.CODI_IMP = 3 AND TDAUX.TEMICMS = 0) AS TDIMP3, /*-ISSR-*/ LATERAL(SELECT SUM(I.BCAL_IEN) AS BCAL_IEN, SUM(I.VLOR_IEN) AS VLOR_IEN, SUM(I.VISE_IEN) AS VISE_IEN, SUM(I.VOUT_IEN) AS VOUT_IEN FROM BETHADBA.EFIMPENT AS I WHERE N.CODI_EMP = I.CODI_EMP AND N.CODI_ENT = I.CODI_ENT AND N.CODI_NAT IN (1933, 2933) AND I.CODI_IMP = 18 AND TDAUX.TEMICMS = 0 AND TDAUX.TEMISS = 0) AS TDIMP18, LATERAL(SELECT COALESCE(SUM(ESTOQUE.BICMS_MEP), 0) AS BASE_CALCULO_ICMS, COALESCE(SUM(ESTOQUE.VALOR_ICMS_MEP), 0) AS VALOR_ICMS FROM BETHADBA.EFMVEPRO AS ESTOQUE INNER JOIN BETHADBA.EFPRODUTOS_VIGENCIA AS PRODUTO_VIGENCIA ON PRODUTO_VIGENCIA.CODI_EMP = ESTOQUE.CODI_EMP AND PRODUTO_VIGENCIA.CODI_PDI = ESTOQUE.CODI_PDI AND PRODUTO_VIGENCIA.VIGENCIA_PDI = DSDBA.D_BUSCA_VIGENCIA_PRODUTO(ESTOQUE.CODI_EMP, ESTOQUE.CODI_PDI, N.DENT_ENT) WHERE ESTOQUE.CODI_EMP = N.CODI_EMP AND ESTOQUE.CODI_ENT = N.CODI_ENT AND PRODUTO_VIGENCIA.SC_PRODUTO_SUJEITO_CREDITO_AQUISICAO_USO_CONSUMO_ART_29 = 'S' AND A.SC_CREDITO_TRANSPORTADOR_AQUISICAO_MERCADORIA_USO_CONSUMO_ART_29 = 'S' AND A.IDEV_ACU = 'N' AND P.CODIGO_MODELO IN ('01', '1B', '04', '55', '65') AND G.ESTA_EMP = 'SC') AS TDPRODUTO_SUJEITO_CREDITO_AQUISICAO_USO_CONSUMO_ART_29, LATERAL(SELECT CASE WHEN COALESCE(TDIMP1.BCAL_IEN, 0) - TDPRODUTO_SUJEITO_CREDITO_AQUISICAO_USO_CONSUMO_ART_29.BASE_CALCULO_ICMS >= 0 THEN COALESCE(TDIMP1.BCAL_IEN, 0) - TDPRODUTO_SUJEITO_CREDITO_AQUISICAO_USO_CONSUMO_ART_29.BASE_CALCULO_ICMS ELSE 0 END AS BASE_CALCULO, CASE WHEN (COALESCE(TDIMP1.VLOR_IEN, 0) + COALESCE(TD_IMP9.VLOR_IEN, 0)) - TDPRODUTO_SUJEITO_CREDITO_AQUISICAO_USO_CONSUMO_ART_29.VALOR_ICMS >= 0 THEN (COALESCE(TDIMP1.VLOR_IEN, 0) + COALESCE(TD_IMP9.VLOR_IEN, 0)) - TDPRODUTO_SUJEITO_CREDITO_AQUISICAO_USO_CONSUMO_ART_29.VALOR_ICMS ELSE 0 END AS VALOR_IMPOSTO FROM DSDBA.DUMMY) AS TDVALORES, LATERAL(SELECT CASE WHEN 0 = 0 THEN 'S' WHEN 0 = 1 AND PV.CENTRAL_PAR IN(2, 3) THEN 'S' WHEN 0 = 1 AND PV.APURACAO_CENTRALIZADA IN(2, 3) THEN 'S' ELSE 'N' END AS GERA_REGISTRO FROM DSDBA.DUMMY) AS TDCENTRALIZA WHERE N.CODI_EMP IN ({cod_emp}) AND TDCENTRALIZA.GERA_REGISTRO = 'S' AND N.DENT_ENT >= '{data_inicio}' AND N.DENT_ENT <= '{data_fim}' AND P.DOCUMENTO_NAO_FISCAL = 'N' AND (P.CODIGO_MODELO NOT IN ('03', '3A', '3B') OR TDAUX.TEMICMS = 1 OR ( G.ESTA_EMP = 'MT' AND EXISTS(SELECT 1 FROM BETHADBA.EFIMPENT AS I WHERE I.CODI_EMP = N.CODI_EMP AND I.CODI_ENT = N.CODI_ENT AND I.CODI_IMP = 1 ) ) ) AND (TDAUX.TEMICMS = 1 OR ((TDAUX.TEMISS = 1 OR TDAUX.TEMISSR = 1) AND N.CODI_NAT IN (1933, 2933))) AND ((('N' = 'N' AND NOT ('N' = 'N' AND G.ESTA_EMP IN ('RN', 'PB') AND NOT TDAUX.TEMICMS = 1)) OR TDAUX.TEMICMS = 1)) AND NOT(G.ESTA_EMP IN ('ES', 'PR') AND N.SITUACAO_ENT = 9 AND N.CODI_NAT IN(1605, 1602)) AND (G.ESTA_EMP <> 'PR' OR N.CODI_NAT <> 1601) AND NOT(G.ESTA_EMP = 'RR' AND A.TRANSFERENCIA_ACU = 'S' AND N.CODI_NAT = 1601) AND NOT(G.ESTA_EMP = 'RS' AND A.TRANSFERENCIA_ACU = 'S' AND N.CODI_NAT = 1601 AND COALESCE(TDIMP1.VLOR_IEN, 0) = 0) AND NOT(G.ESTA_EMP = 'RS' AND A.RS_NOTA_APROPRIACAO_CREDITO_PRESUMIDO_ICMS = 'S') AND NOT(G.ESTA_EMP = 'RS' AND A.RS_NOTA_APROP_CREDITO_ICMS_EMP_SN = 'S' AND A.RS_NOTA_APROP_CREDITO_ICMS_EMP_SN_TIPO IN (2, 3, 5)) AND NOT(G.ESTA_EMP = 'RN' AND N.CODI_NAT IN (1602, 1605)) AND NOT(G.ESTA_EMP = 'GO') GROUP BY N.CODI_NAT, N.CODI_EMP, G.TINS_EMP, TD_DADOS_EMPRESA.IESTEMP, TD_DADOS_EMPRESA.CGCEEMP, TD_DADOS_EMPRESA.NOMEEMP, TD_DADOS_EMPRESA.ESTAEMP UNION ALL SELECT 1 AS QUADRO, 1 AS ORDE, N.CODI_NAT AS CODINAT, 0 AS CODINAT1, SUM(COALESCE(TD_VCON.VCON, 0)) AS VCON, 0 AS BCAL, 0 AS VICM, 0 AS IICM, SUM(N.VCON_ENT) AS OICM, N.CODI_EMP AS CEMP, {livro_num} AS LIVRO, {pagina_num} AS PAGINA, G.TINS_EMP AS TINSEMP, TD_DADOS_EMPRESA.IESTEMP AS IESTEMP, TD_DADOS_EMPRESA.CGCEEMP AS CGCEEMP, TD_DADOS_EMPRESA.NOMEEMP AS NOMEEMP, TD_DADOS_EMPRESA.ESTAEMP AS ESTAEMP, N.CODI_EMP AS CODI_EMP FROM BETHADBA.EFENTRADAS AS N INNER JOIN BETHADBA.GEEMPRE AS G ON N.CODI_EMP = G.CODI_EMP INNER JOIN BETHADBA.EFESPECIES AS P ON P.CODI_ESP = N.CODI_ESP INNER JOIN BETHADBA.EFPARAMETRO_VIGENCIA AS PARAMETRO_VIGENCIA ON PARAMETRO_VIGENCIA.CODI_EMP = N.CODI_EMP AND PARAMETRO_VIGENCIA.VIGENCIA_PAR = DSDBA.D_BUSCA_VIGENCIA_PARAMETRO(N.CODI_EMP, N.DENT_ENT), LATERAL(SELECT CASE WHEN (G.ESTA_EMP = 'RS' AND N.CODI_NAT IN (1116, 1117, 2116, 2117)) OR (G.ESTA_EMP = 'CE' AND N.CODI_NAT IN (1601, 1602) AND N.SITUACAO_ENT = 9 AND N.VCON_ENT > 0)OR (G.ESTA_EMP = 'PA' AND N.CODI_NAT IN (1601, 1602) AND N.SITUACAO_ENT = 9 ) THEN 0 ELSE N.VCON_ENT END AS VCON FROM DSDBA.DUMMY) AS TD_VCON, /*-AUXILIAR-*/ LATERAL(SELECT COALESCE(MAX(CASE WHEN I.CODI_IMP = 1 THEN 1 END), 0) AS TEMICMS, SUM(COALESCE(I.BCAL_IEN, 0)) AS BCAL_IEN, SUM(COALESCE(I.VLOR_IEN, 0)) AS VLOR_IEN, SUM(COALESCE(I.VISE_IEN, 0)) AS VISE_IEN, SUM(COALESCE(I.VOUT_IEN, 0)) AS VOUT_IEN FROM BETHADBA.EFIMPENT AS I WHERE N.CODI_EMP = I.CODI_EMP AND N.CODI_ENT = I.CODI_ENT) AS TDAUX, LATERAL(SELECT CASE WHEN NOT (EMISSORA.TINS_EMP IN (3, 6)) THEN EMISSORA.CGCE_EMP ELSE COALESCE(DSDBA.S_BUSCA_ALTERACAO_EMPRESA(EMISSORA.CODI_EMP, '{data_inicio}', 21), EMISSORA.CPF_LEG_EMP, '') END AS CGCEEMP, COALESCE(DSDBA.S_BUSCA_ALTERACAO_EMPRESA(EMISSORA.CODI_EMP, '{data_inicio}', 12), EMISSORA.IEST_EMP) AS IESTEMP, COALESCE(DSDBA.S_BUSCA_ALTERACAO_EMPRESA(EMISSORA.CODI_EMP, '{data_inicio}', 2), EMISSORA.RAZAO_EMP) AS NOMEEMP, COALESCE(DSDBA.S_BUSCA_ALTERACAO_EMPRESA(EMISSORA.CODI_EMP, '{data_inicio}', 9), EMISSORA.ESTA_EMP) AS ESTAEMP FROM BETHADBA.GEEMPRE AS EMISSORA WHERE EMISSORA.CODI_EMP = {cod_emp}) AS TD_DADOS_EMPRESA, LATERAL(SELECT CASE WHEN 0 = 0 THEN 'S' WHEN 0 = 1 AND PARAMETRO_VIGENCIA.CENTRAL_PAR IN(2, 3) THEN 'S' WHEN 0 = 1 AND PARAMETRO_VIGENCIA.APURACAO_CENTRALIZADA IN(2, 3) THEN 'S' ELSE 'N' END AS GERA_REGISTRO FROM DSDBA.DUMMY) AS TDCENTRALIZA WHERE N.CODI_EMP IN ({cod_emp}) AND N.DENT_ENT >= '{data_inicio}' AND N.DENT_ENT <= '{data_fim}' AND TDCENTRALIZA.GERA_REGISTRO = 'S' AND P.DOCUMENTO_NAO_FISCAL = 'N' AND (P.CODIGO_MODELO NOT IN ('03', '3A', '3B') OR ( G.ESTA_EMP = 'MT' AND EXISTS(SELECT 1 FROM BETHADBA.EFIMPENT AS I WHERE I.CODI_EMP = N.CODI_EMP AND I.CODI_ENT = N.CODI_ENT AND I.CODI_IMP = 1 ) ) ) AND ('N' = 'S' OR ('N' = 'N' AND G.ESTA_EMP = 'PB') OR (PARAMETRO_VIGENCIA.SIMPLESN_OPTANTE_PAR = 'S' AND G.ESTA_EMP = 'RN')) AND NOT TDAUX.TEMICMS = 1 AND NOT (G.ESTA_EMP = 'GO') GROUP BY N.CODI_NAT, N.CODI_EMP, G.TINS_EMP, TD_DADOS_EMPRESA.IESTEMP, TD_DADOS_EMPRESA.CGCEEMP, TD_DADOS_EMPRESA.NOMEEMP, TD_DADOS_EMPRESA.ESTAEMP UNION ALL SELECT 1 AS QUADRO, 1 AS ORDE, N.CODI_NAT AS CODINAT, 0 AS CODINAT1, SUM(CASE WHEN (N.CODI_NAT IN (1111, 1113, 2111, 2113) AND R.DESCONTAR_VALOR_ICMS_IPI_CFOP_MERCANTIL = 'S') THEN 0 ELSE N.VCON_ENT END) AS VCON, CASE WHEN ACU_VIG.SIMPLESN_CREDITO_PRESUMIDO_ACU = 'S' OR (N.CODI_NAT IN (1111, 1113, 2111, 2113) AND R.DESCONTAR_VALOR_ICMS_IPI_CFOP_MERCANTIL = 'S') THEN 0 ELSE SUM(COALESCE(TDIMP1.BCAL_IEN, 0)) END AS BCAL, CASE WHEN ACU_VIG.SIMPLESN_CREDITO_PRESUMIDO_ACU = 'S' OR (N.CODI_NAT IN (1111, 1113, 2111, 2113) AND R.DESCONTAR_VALOR_ICMS_IPI_CFOP_MERCANTIL = 'S') THEN 0 WHEN MAX(G.ESTA_EMP) = 'RS' THEN SUM(COALESCE(TDIMP1.VLOR_IEN, 0)) + SUM(COALESCE(TDIMP1.VALOR_FUNDO_AMPARA_IEN, 0)) ELSE SUM(COALESCE(TDIMP1.VLOR_IEN, 0)) END AS VICM, CASE WHEN ACU_VIG.SIMPLESN_CREDITO_PRESUMIDO_ACU = 'S' OR (N.CODI_NAT IN (1111, 1113, 2111, 2113) AND R.DESCONTAR_VALOR_ICMS_IPI_CFOP_MERCANTIL = 'S') THEN 0 ELSE SUM(COALESCE((TDIMP1.VISE_IEN + TDIMP1.NTRI_IEN + TDIMP1.REDU_IEN), 0) + COALESCE((TDIMP3.VISE_IEN + TDIMP3.BCAL_IEN), 0) + COALESCE((TDIMP18.VISE_IEN + TDIMP18.BCAL_IEN), 0)) END AS IICM, CASE WHEN (N.CODI_NAT IN (1111, 1113, 2111, 2113) AND R.DESCONTAR_VALOR_ICMS_IPI_CFOP_MERCANTIL = 'S') THEN 0 WHEN ACU_VIG.SIMPLESN_CREDITO_PRESUMIDO_ACU = 'S' THEN SUM(N.VCON_ENT) ELSE SUM(COALESCE(TDIMP1.VOUT_IEN, 0) + COALESCE(TDIMP3.VOUT_IEN, 0) + COALESCE(TDIMP18.VOUT_IEN, 0)) END AS OICM, N.CODI_EMP AS CEMP, {livro_num} AS LIVRO, {pagina_num} AS PAGINA, TDEMP.TINSEMP AS TINSEMP, TDEMP.IESTEMP AS IESTEMP, TDEMP.CGCEEMP AS CGCEEMP, TDEMP.NOMEEMP AS NOMEEMP, TDEMP.ESTAEMP AS ESTAEMP, N.CODI_EMP AS CODI_EMP FROM BETHADBA.EFENTRADAS AS N INNER JOIN BETHADBA.GEEMPRE AS G ON N.CODI_EMP = G.CODI_EMP INNER JOIN BETHADBA.EFACUMULADOR_VIGENCIA AS ACU_VIG ON ACU_VIG.CODI_EMP = N.CODI_EMP AND ACU_VIG.CODI_ACU = N.CODI_ACU AND ACU_VIG.VIGENCIA_ACU = DSDBA.D_BUSCA_VIGENCIA_ACUMULADOR(N.CODI_EMP, N.CODI_ACU, N.DENT_ENT) INNER JOIN BETHADBA.EFPARAMETRO_VIGENCIA AS R ON R.CODI_EMP = N.CODI_EMP AND R.VIGENCIA_PAR = DSDBA.D_BUSCA_VIGENCIA_PARAMETRO(N.CODI_EMP, N.DENT_ENT) INNER JOIN BETHADBA.EFESPECIES AS P ON P.CODI_ESP = N.CODI_ESP, /*-AUXILIAR-*/ LATERAL(SELECT COALESCE(MAX(CASE WHEN I.CODI_IMP = 1 THEN 1 END), 0) AS TEMICMS, COALESCE(MAX(CASE WHEN I.CODI_IMP = 3 THEN 1 END), 0) AS TEMISS, COALESCE(MAX(CASE WHEN I.CODI_IMP = 18 THEN 1 END), 0) AS TEMISSR FROM BETHADBA.EFIMPENT AS I WHERE I.CODI_EMP = N.CODI_EMP AND I.CODI_ENT = N.CODI_ENT) AS TDAUX, /*-ICMS-*/ LATERAL(SELECT SUM(I.BCAL_IEN) AS BCAL_IEN, SUM(I.VLOR_IEN) AS VLOR_IEN, SUM(I.VISE_IEN) AS VISE_IEN, SUM(I.VOUT_IEN) AS VOUT_IEN, SUM(I.NTRI_IEN) AS NTRI_IEN, SUM(I.REDU_IEN) AS REDU_IEN, SUM(I.VALOR_FUNDO_AMPARA_IEN) AS VALOR_FUNDO_AMPARA_IEN FROM BETHADBA.EFIMPENT AS I WHERE I.CODI_EMP = N.CODI_EMP AND I.CODI_ENT = N.CODI_ENT AND I.CODI_IMP = 1 AND (N.CODI_NAT NOT IN (1933, 2933) OR (N.CODI_NAT IN (1933, 2933) AND TDAUX.TEMISS = 0 AND TDAUX.TEMISSR = 0))) AS TDIMP1, /*-ISS-*/ LATERAL(SELECT SUM(I.BCAL_IEN) AS BCAL_IEN, SUM(I.VLOR_IEN) AS VLOR_IEN, SUM(I.VISE_IEN) AS VISE_IEN, SUM(I.VOUT_IEN) AS VOUT_IEN FROM BETHADBA.EFIMPENT AS I WHERE I.CODI_EMP = N.CODI_EMP AND I.CODI_ENT = N.CODI_ENT AND I.CODI_IMP = 3 AND N.CODI_NAT IN (1933, 2933)) AS TDIMP3, /*-ISSR-*/ LATERAL(SELECT SUM(I.BCAL_IEN) AS BCAL_IEN, SUM(I.VLOR_IEN) AS VLOR_IEN, SUM(I.VISE_IEN) AS VISE_IEN, SUM(I.VOUT_IEN) AS VOUT_IEN FROM BETHADBA.EFIMPENT AS I WHERE I.CODI_EMP = N.CODI_EMP AND I.CODI_ENT = N.CODI_ENT AND I.CODI_IMP = 18 AND N.CODI_NAT IN (1933, 2933) AND TDAUX.TEMISS = 0) AS TDIMP18, /*-EMPRESA-*/ LATERAL(SELECT G.TINS_EMP AS TINSEMP, COALESCE(DSDBA.S_BUSCA_ALTERACAO_EMPRESA(G.CODI_EMP, '{data_inicio}', 12), G.IEST_EMP) AS IESTEMP, COALESCE(DSDBA.S_BUSCA_ALTERACAO_EMPRESA(G.CODI_EMP, '{data_inicio}', 2), G.RAZAO_EMP) AS NOMEEMP, CASE WHEN NOT (G.TINS_EMP IN (3, 6)) THEN G.CGCE_EMP ELSE COALESCE(DSDBA.S_BUSCA_ALTERACAO_EMPRESA(G.CODI_EMP, '{data_inicio}', 21), G.CPF_LEG_EMP,'') END AS CGCEEMP, COALESCE(DSDBA.S_BUSCA_ALTERACAO_EMPRESA(G.CODI_EMP, '{data_inicio}', 9), G.ESTA_EMP) AS ESTAEMP FROM BETHADBA.GEEMPRE AS G WHERE G.CODI_EMP = {cod_emp}) AS TDEMP, /*-CHEQUE MORADIA -*/ LATERAL(SELECT COALESCE(MAX('S'), 'N') AS GO_TEM_TRANSFERENCIA_CHEQUE_MORADIA FROM BETHADBA.EFENTRADAS_ESTADUAL_GO AS ENTRADAS_ESTADUAL_GO WHERE ENTRADAS_ESTADUAL_GO.CODI_EMP = N.CODI_EMP AND ENTRADAS_ESTADUAL_GO.CODI_ENT = N.CODI_ENT AND ENTRADAS_ESTADUAL_GO.GO_VALOR_TRANSFERENCIA > 0) AS TD_GO_CHEQUE_MORADIA, LATERAL(SELECT CASE WHEN 0 = 0 THEN 'S' WHEN 0 = 1 AND R.CENTRAL_PAR IN(2, 3) THEN 'S' WHEN 0 = 1 AND R.APURACAO_CENTRALIZADA IN(2, 3) THEN 'S' ELSE 'N' END AS GERA_REGISTRO FROM DSDBA.DUMMY) AS TDCENTRALIZA WHERE N.CODI_EMP IN ({cod_emp}) AND N.DENT_ENT >= '{data_inicio}' AND N.DENT_ENT <= '{data_fim}' AND TDCENTRALIZA.GERA_REGISTRO = 'S' AND (NOT (R.FOMENTAR_PAR <> 'S' AND N.SITUACAO_ENT = 9 AND N.CODI_NAT = 1602)) AND (P.CODIGO_MODELO NOT IN ('03', '3A', '3B') OR TDAUX.TEMICMS = 1) AND ((TDAUX.TEMICMS = 1 AND N.CODI_NAT NOT IN (1933, 2933)) OR (TDAUX.TEMICMS = 1 AND N.CODI_NAT IN (1933, 2933) AND TDAUX.TEMISS = 0 AND TDAUX.TEMISSR = 0) OR ((TDAUX.TEMISS = 1 OR TDAUX.TEMISSR = 1) AND N.CODI_NAT IN (1933, 2933))) AND ('N' = 'N' OR TDAUX.TEMICMS = 1) AND TD_GO_CHEQUE_MORADIA.GO_TEM_TRANSFERENCIA_CHEQUE_MORADIA = 'N' AND G.ESTA_EMP = 'GO' GROUP BY N.CODI_NAT, N.CODI_EMP, TDEMP.TINSEMP, TDEMP.IESTEMP, TDEMP.CGCEEMP, TDEMP.NOMEEMP, TDEMP.ESTAEMP, ACU_VIG.SIMPLESN_CREDITO_PRESUMIDO_ACU, R.DESCONTAR_VALOR_ICMS_IPI_CFOP_MERCANTIL UNION ALL SELECT 1 AS QUADRO, 1 AS ORDE, N.CODI_NAT AS CODINAT, 0 AS CODINAT1, SUM(N.VCON_ENT) AS VCON, 0 AS BCAL, 0 AS VICM, 0 AS IICM, SUM(N.VCON_ENT) AS OICM, N.CODI_EMP AS CEMP, {livro_num} AS LIVRO, {pagina_num} AS PAGINA, TDEMP.TINSEMP AS TINSEMP, TDEMP.IESTEMP AS IESTEMP, TDEMP.CGCEEMP AS CGCEEMP, TDEMP.NOMEEMP AS NOMEEMP, TDEMP.ESTAEMP AS ESTAEMP, N.CODI_EMP AS CODI_EMP FROM BETHADBA.EFENTRADAS AS N INNER JOIN BETHADBA.GEEMPRE AS G ON G.CODI_EMP = N.CODI_EMP INNER JOIN BETHADBA.EFESPECIES AS P ON P.CODI_ESP = N.CODI_ESP INNER JOIN BETHADBA.EFPARAMETRO_VIGENCIA AS R ON R.CODI_EMP = N.CODI_EMP AND R.VIGENCIA_PAR = DSDBA.D_BUSCA_VIGENCIA_PARAMETRO(N.CODI_EMP, N.DENT_ENT), /*-AUXILIAR-*/ LATERAL(SELECT COALESCE(MAX(CASE WHEN I.CODI_IMP = 1 THEN 1 END), 0) AS TEMICMS FROM BETHADBA.EFIMPENT AS I WHERE I.CODI_EMP = N.CODI_EMP AND I.CODI_ENT = N.CODI_ENT) AS TDAUX, /*-EMPRESA-*/ LATERAL(SELECT G.TINS_EMP AS TINSEMP, COALESCE(DSDBA.S_BUSCA_ALTERACAO_EMPRESA(G.CODI_EMP, '{data_inicio}', 12), G.IEST_EMP) AS IESTEMP , COALESCE(DSDBA.S_BUSCA_ALTERACAO_EMPRESA(G.CODI_EMP, '{data_inicio}', 2), G.RAZAO_EMP) AS NOMEEMP, CASE WHEN NOT (G.TINS_EMP IN (3, 6)) THEN G.CGCE_EMP ELSE COALESCE(DSDBA.S_BUSCA_ALTERACAO_EMPRESA(G.CODI_EMP, '{data_inicio}', 21), G.CPF_LEG_EMP,'') END AS CGCEEMP, COALESCE(DSDBA.S_BUSCA_ALTERACAO_EMPRESA(G.CODI_EMP, '{data_inicio}', 9), G.ESTA_EMP) AS ESTAEMP FROM BETHADBA.GEEMPRE AS G WHERE G.CODI_EMP = {cod_emp}) AS TDEMP, LATERAL(SELECT COALESCE(MAX('S'), 'N') AS GO_TEM_TRANSFERENCIA_CHEQUE_MORADIA FROM BETHADBA.EFENTRADAS_ESTADUAL_GO AS ENTRADAS_ESTADUAL_GO WHERE ENTRADAS_ESTADUAL_GO.CODI_EMP = N.CODI_EMP AND ENTRADAS_ESTADUAL_GO.CODI_ENT = N.CODI_ENT AND ENTRADAS_ESTADUAL_GO.GO_VALOR_TRANSFERENCIA > 0) AS TD_GO_CHEQUE_MORADIA, LATERAL(SELECT CASE WHEN 0 = 0 THEN 'S' WHEN 0 = 1 AND R.CENTRAL_PAR IN(2, 3) THEN 'S' WHEN 0 = 1 AND R.APURACAO_CENTRALIZADA IN(2, 3) THEN 'S' ELSE 'N' END AS GERA_REGISTRO FROM DSDBA.DUMMY) AS TDCENTRALIZA WHERE N.CODI_EMP IN ({cod_emp}) AND N.DENT_ENT >= '{data_inicio}' AND N.DENT_ENT <= '{data_fim}' AND TDCENTRALIZA.GERA_REGISTRO = 'S' AND P.CODIGO_MODELO NOT IN ('03', '3A', '3B') AND 'N' = 'S' AND NOT TDAUX.TEMICMS = 1 AND P.DOCUMENTO_NAO_FISCAL = 'N' AND TD_GO_CHEQUE_MORADIA.GO_TEM_TRANSFERENCIA_CHEQUE_MORADIA = 'N' AND G.ESTA_EMP = 'GO' GROUP BY N.CODI_NAT, N.CODI_EMP, TDEMP.TINSEMP, TDEMP.IESTEMP, TDEMP.CGCEEMP, TDEMP.NOMEEMP, TDEMP.ESTAEMP) AS TDDADOS_QUADRO1 GROUP BY TDDADOS_QUADRO1.QUADRO, TDDADOS_QUADRO1.ORDE, TDDADOS_QUADRO1.CODINAT, TDDADOS_QUADRO1.CODINAT1, TDDADOS_QUADRO1.CEMP, TDDADOS_QUADRO1.LIVRO, TDDADOS_QUADRO1.PAGINA, TDDADOS_QUADRO1.TINSEMP, TDDADOS_QUADRO1.IESTEMP, TDDADOS_QUADRO1.CGCEEMP, TDDADOS_QUADRO1.NOMEEMP, TDDADOS_QUADRO1.ESTAEMP UNION ALL SELECT TDDADOS_QUADRO3.QUADRO AS QUADRO, TDDADOS_QUADRO3.ORDE AS ORDE, TDDADOS_QUADRO3.CODINAT AS CODINAT, TDDADOS_QUADRO3.CODINAT1 AS CODINAT1, COALESCE(SUM(TDDADOS_QUADRO3.VCON), 0) AS VCON, COALESCE(SUM(TDDADOS_QUADRO3.BCAL), 0) AS BCAL, COALESCE(SUM(TDDADOS_QUADRO3.VICM), 0) AS VICM, COALESCE(SUM(TDDADOS_QUADRO3.IICM), 0) AS IICM, COALESCE(SUM(TDDADOS_QUADRO3.OICM), 0) AS OICM, TDDADOS_QUADRO3.CEMP AS CEMP, TDDADOS_QUADRO3.LIVRO AS LIVRO, TDDADOS_QUADRO3.PAGINA AS PAGINA, TDDADOS_QUADRO3.TINSEMP AS TINSEMP, TDDADOS_QUADRO3.IESTEMP AS IESTEMP, TDDADOS_QUADRO3.CGCEEMP AS CGCEEMP, TDDADOS_QUADRO3.NOMEEMP AS NOMEEMP, TDDADOS_QUADRO3.ESTAEMP AS ESTAEMP FROM( SELECT 3 AS QUADRO, 1 AS ORDE, N.CODI_NAT AS CODINAT, 0 AS CODINAT1, SUM(CASE WHEN (N.CODI_NAT IN (5111, 5112, 5113, 5114, 6111, 6112, 6113, 6114) AND PV.DESCONTAR_VALOR_ICMS_IPI_CFOP_MERCANTIL = 'S') THEN 0 ELSE TDVALORES.VALOR_CONTABIL END) AS VCON, SUM(CASE WHEN (N.CODI_NAT IN (5111, 5112, 5113, 5114, 6111, 6112, 6113, 6114) AND PV.DESCONTAR_VALOR_ICMS_IPI_CFOP_MERCANTIL = 'S') THEN 0 ELSE TDVALORES.BASE_CALCULO END) AS BCAL, SUM(CASE WHEN (N.CODI_NAT IN (5111, 5112, 5113, 5114, 6111, 6112, 6113, 6114) AND PV.DESCONTAR_VALOR_ICMS_IPI_CFOP_MERCANTIL = 'S') THEN 0 ELSE TDVALORES.VALOR_IMPOSTO END) AS VICM, SUM(CASE WHEN (N.CODI_NAT IN (5111, 5112, 5113, 5114, 6111, 6112, 6113, 6114) AND PV.DESCONTAR_VALOR_ICMS_IPI_CFOP_MERCANTIL = 'S') THEN 0 ELSE TDVALORES.VALOR_ISENTAS END) AS IICM, SUM(CASE WHEN (N.CODI_NAT IN (5111, 5112, 5113, 5114, 6111, 6112, 6113, 6114) AND PV.DESCONTAR_VALOR_ICMS_IPI_CFOP_MERCANTIL = 'S') THEN 0 ELSE TDVALORES.VALOR_OUTROS END) AS OICM, N.CODI_EMP AS CEMP, {livro_num} AS LIVRO, {pagina_num} AS PAGINA, G.TINS_EMP AS TINSEMP, TD_DADOS_EMPRESA.IESTEMP AS IESTEMP, TD_DADOS_EMPRESA.CGCEEMP AS CGCEEMP, TD_DADOS_EMPRESA.NOMEEMP AS NOMEEMP, TD_DADOS_EMPRESA.ESTAEMP AS ESTAEMP, N.CODI_EMP AS CODI_EMP FROM BETHADBA.EFSAIDAS AS N INNER JOIN BETHADBA.GEEMPRE AS G ON G.CODI_EMP = N.CODI_EMP INNER JOIN BETHADBA.EFACUMULADOR_VIGENCIA AS A ON A.CODI_EMP = N.CODI_EMP AND A.CODI_ACU = N.CODI_ACU AND A.VIGENCIA_ACU = DSDBA.D_BUSCA_VIGENCIA_ACUMULADOR(N.CODI_EMP, N.CODI_ACU, N.DSAI_SAI) INNER JOIN BETHADBA.EFPARAMETRO_VIGENCIA AS PV ON PV.CODI_EMP = N.CODI_EMP AND PV.VIGENCIA_PAR = DSDBA.D_BUSCA_VIGENCIA_PARAMETRO(N.CODI_EMP, N.DSAI_SAI), /*-ICMS-*/ LATERAL(SELECT CASE WHEN A.SIMPLESN_CREDITO_PRESUMIDO_ACU = 'S' AND G.ESTA_EMP = 'PR' THEN 0.00 ELSE SUM(I.BCAL_ISA) END AS BCAL_ISA, CASE WHEN A.SIMPLESN_CREDITO_PRESUMIDO_ACU = 'S' AND G.ESTA_EMP = 'PR' THEN 0.00 ELSE SUM(I.VLOR_ISA) END AS VLOR_ISA, CASE WHEN A.SIMPLESN_CREDITO_PRESUMIDO_ACU = 'S' AND G.ESTA_EMP = 'PR' THEN 0.00 ELSE SUM(I.VISE_ISA) END AS VISE_ISA, SUM(I.VOUT_ISA) AS VOUT_ISA, (CASE G.ESTA_EMP WHEN 'RS' THEN SUM(I.VALOR_FUNDO_AMPARA_ISA) ELSE 0 END) AS VALOR_AMPARA FROM BETHADBA.EFIMPSAI AS I WHERE N.CODI_EMP = I.CODI_EMP AND N.CODI_SAI = I.CODI_SAI AND I.CODI_IMP = 1 AND NOT(N.CODI_NAT IN (5929, 6929) AND PV.DESCONTAR_VALOR_ICMS_CFOP_5929_6929 = 'S')) AS TDIMP1, /*-AUXILIAR-*/ LATERAL(SELECT COALESCE(MAX(CASE WHEN I.CODI_IMP = 1 THEN 1 END), 0) AS TEMICMS, CASE WHEN (A.LANCTO_DEB_CRE_REF_ANT_ACU = 'S' AND G.ESTA_EMP = 'RS') THEN 0.00 ELSE TDIMP1.VLOR_ISA END AS VALOR_IMPOSTO FROM BETHADBA.EFIMPSAI AS I WHERE N.CODI_EMP = I.CODI_EMP AND N.CODI_SAI = I.CODI_SAI) AS TDAUX, LATERAL(SELECT CASE WHEN NOT (EMISSORA.TINS_EMP IN (3, 6)) THEN EMISSORA.CGCE_EMP ELSE COALESCE(DSDBA.S_BUSCA_ALTERACAO_EMPRESA(EMISSORA.CODI_EMP, '{data_inicio}', 21), EMISSORA.CPF_LEG_EMP, '') END AS CGCEEMP, COALESCE(DSDBA.S_BUSCA_ALTERACAO_EMPRESA(EMISSORA.CODI_EMP, '{data_inicio}', 12), EMISSORA.IEST_EMP) AS IESTEMP, COALESCE(DSDBA.S_BUSCA_ALTERACAO_EMPRESA(EMISSORA.CODI_EMP, '{data_inicio}', 2), EMISSORA.RAZAO_EMP) AS NOMEEMP, COALESCE(DSDBA.S_BUSCA_ALTERACAO_EMPRESA(EMISSORA.CODI_EMP, '{data_inicio}', 9), EMISSORA.ESTA_EMP) AS ESTAEMP FROM BETHADBA.GEEMPRE AS EMISSORA WHERE EMISSORA.CODI_EMP = {cod_emp}) AS TD_DADOS_EMPRESA, LATERAL(SELECT CASE WHEN G.ESTA_EMP = 'RS' AND N.CODI_NAT IN (5116, 5117, 6116, 6117) THEN 0 WHEN NOT(N.CODI_NAT IN (5929, 6929) AND PV.DESCONTAR_VALOR_ICMS_CFOP_5929_6929 = 'S') THEN N.VCON_SAI ELSE 0 END AS VCON, CASE WHEN G.ESTA_EMP = 'RS' AND N.CODI_NAT IN (5103, 5104, 6103, 6104) THEN 'S' ELSE 'N' END AS RS_EMITE_LINHA_ZERADA, CASE WHEN G.ESTA_EMP = 'CE' AND N.CODI_NAT IN (5601, 5602) AND N.SITUACAO_SAI = 9 AND N.VCON_SAI > 0 THEN 'S' WHEN G.ESTA_EMP = 'PA' AND N.CODI_NAT IN (5601, 5602) AND N.SITUACAO_SAI = 9 THEN 'S' ELSE 'N' END AS EMITE_LINHA_ZERADA, CASE WHEN A.SIMPLESN_CREDITO_PRESUMIDO_ACU = 'S' AND G.ESTA_EMP = 'RJ' AND N.DSAI_SAI > DATE('2020-03-01') THEN 'S' ELSE 'N' END AS RJ_EMITE_LINHA_ZERADA FROM DSDBA.DUMMY) AS TDAUX_2, LATERAL(SELECT CASE WHEN TDAUX_2.EMITE_LINHA_ZERADA = 'N' THEN COALESCE(TDAUX_2.VCON, 0) ELSE 0 END AS VALOR_CONTABIL, CASE WHEN TDAUX_2.RS_EMITE_LINHA_ZERADA = 'N' AND TDAUX_2.EMITE_LINHA_ZERADA = 'N' AND TDAUX_2.RJ_EMITE_LINHA_ZERADA = 'N' THEN COALESCE(TDIMP1.BCAL_ISA, 0) ELSE 0 END AS BASE_CALCULO, CASE WHEN TDAUX_2.RS_EMITE_LINHA_ZERADA = 'N' AND TDAUX_2.EMITE_LINHA_ZERADA = 'N' AND TDAUX_2.RJ_EMITE_LINHA_ZERADA = 'N' THEN COALESCE(TDAUX.VALOR_IMPOSTO, 0) + COALESCE(TDIMP1.VALOR_AMPARA, 0) ELSE 0 END AS VALOR_IMPOSTO, CASE WHEN TDAUX_2.RS_EMITE_LINHA_ZERADA = 'N' AND TDAUX_2.EMITE_LINHA_ZERADA = 'N' AND TDAUX_2.RJ_EMITE_LINHA_ZERADA = 'N' THEN COALESCE(TDIMP1.VISE_ISA, 0) ELSE 0 END AS VALOR_ISENTAS, CASE WHEN TDAUX_2.RS_EMITE_LINHA_ZERADA = 'N' AND TDAUX_2.EMITE_LINHA_ZERADA = 'N' AND TDAUX_2.RJ_EMITE_LINHA_ZERADA = 'N' THEN COALESCE(TDIMP1.VOUT_ISA, 0) ELSE 0 END AS VALOR_OUTROS FROM DSDBA.DUMMY) AS TDVALORES, LATERAL(SELECT COALESCE(CLI.CGCE_CLI, '') AS CNPJ FROM BETHADBA.EFCLIENTES CLI WHERE CLI.CODI_EMP = N.CODI_EMP AND CLI.CODI_CLI = N.CODI_CLI) AS TD_CLIENTE, LATERAL(SELECT CASE WHEN 0 = 0 THEN 'S' WHEN 0 = 1 AND PV.CENTRAL_PAR IN(2, 3) THEN 'S' WHEN 0 = 1 AND PV.APURACAO_CENTRALIZADA IN(2, 3) THEN 'S' ELSE 'N' END AS GERA_REGISTRO FROM DSDBA.DUMMY) AS TDCENTRALIZA, LATERAL(SELECT COALESCE(COUNT(1),0) AS EXISTE FROM BETHADBA.EFSAIDAS_CTES_REFERENCIADOS AS CTE_REF INNER JOIN BETHADBA.EFSAIDAS_CTES_REFERENCIADOS_ICMS AS CTES_REFERENCIADOS_ICMS ON CTES_REFERENCIADOS_ICMS.CODI_EMP = N.CODI_EMP AND CTES_REFERENCIADOS_ICMS.CODI_SAI = N.CODI_SAI INNER JOIN BETHADBA.GEEMPRE AS EMPRESA ON EMPRESA.CODI_EMP = CTE_REF.CODI_EMP WHERE CTE_REF.CODI_EMP = N.CODI_EMP AND CTE_REF.CODI_SAI_CTE = N.CODI_SAI AND CTES_REFERENCIADOS_ICMS.VALOR_IMPOSTO > 0 AND EMPRESA.ESTA_EMP = 'TO') AS TD_NOTA_REFERENCIADA_TO WHERE N.CODI_EMP IN ({cod_emp}) AND N.DSAI_SAI >= '{data_inicio}' AND N.DSAI_SAI <= '{data_fim}' AND TDCENTRALIZA.GERA_REGISTRO = 'S' AND N.NOVO_ECF = 'N' AND ((('N' = 'N' AND NOT ('N' = 'N' AND G.ESTA_EMP IN ('RN', 'PB') AND NOT TDAUX.TEMICMS = 1)) OR TDAUX.TEMICMS = 1)) AND TDAUX.TEMICMS = 1 AND A.RS_LANC_DEB_PARC_ICMSST_PRODUTO = 'N' AND N.SITUACAO_SAI NOT IN (2, 3) AND NOT(G.ESTA_EMP IN ('ES', 'PR') AND N.SITUACAO_SAI = 9 AND N.CODI_NAT IN(5605, 5602)) AND NOT(G.ESTA_EMP = 'RN' AND N.CODI_NAT IN (5602, 5605)) AND NOT(G.ESTA_EMP = 'RO' AND N.CODI_NAT = 5949 AND PV.SIMPLESN_OPTANTE_PAR = 'S' AND N.SITUACAO_SAI = 9 AND TD_CLIENTE.CNPJ = '00394585000171') AND NOT(G.ESTA_EMP = 'PR' AND N.CODI_NAT IN (5601, 5606)) AND NOT(G.ESTA_EMP = 'RR' AND A.TRANSFERENCIA_ACU = 'S' AND N.CODI_NAT = 5601) AND NOT(G.ESTA_EMP = 'GO') AND TD_NOTA_REFERENCIADA_TO.EXISTE = 0 GROUP BY N.CODI_NAT, N.CODI_EMP, G.TINS_EMP, TD_DADOS_EMPRESA.IESTEMP, TD_DADOS_EMPRESA.CGCEEMP, TD_DADOS_EMPRESA.NOMEEMP, TD_DADOS_EMPRESA.ESTAEMP UNION ALL SELECT 3 AS QUADRO, 1 AS ORDE, N.CODI_NAT AS CODINAT, 0 AS CODINAT1, SUM(CASE WHEN (N.CODI_NAT IN (5111, 5112, 5113, 5114, 6111, 6112, 6113, 6114) AND PV.DESCONTAR_VALOR_ICMS_IPI_CFOP_MERCANTIL = 'S') OR TDAUX_2.EMITE_LINHA_ZERADA = 'S' THEN 0 ELSE TDAUX_2.VCON_SAI END) AS VCON, 0 AS BCAL, 0 AS VICM, SUM(CASE WHEN (N.CODI_NAT IN (5111, 5112, 5113, 5114, 6111, 6112, 6113, 6114) AND PV.DESCONTAR_VALOR_ICMS_IPI_CFOP_MERCANTIL = 'S') OR TDAUX_2.EMITE_LINHA_ZERADA = 'S' THEN 0 ELSE CASE WHEN PV.GERAR_SAIDA_SEM_ICMS_EM = 'I' THEN N.VCON_SAI ELSE 0 END END) AS IICM, SUM(CASE WHEN (N.CODI_NAT IN (5111, 5112, 5113, 5114, 6111, 6112, 6113, 6114) AND PV.DESCONTAR_VALOR_ICMS_IPI_CFOP_MERCANTIL = 'S') OR TDAUX_2.EMITE_LINHA_ZERADA = 'S' THEN 0 ELSE CASE WHEN PV.GERAR_SAIDA_SEM_ICMS_EM = 'O' THEN N.VCON_SAI ELSE 0 END END) AS OICM, N.CODI_EMP AS CEMP, {livro_num} AS LIVRO, {pagina_num} AS PAGINA, G.TINS_EMP AS TINSEMP, TD_DADOS_EMPRESA.IESTEMP AS IESTEMP, TD_DADOS_EMPRESA.CGCEEMP AS CGCEEMP, TD_DADOS_EMPRESA.NOMEEMP AS NOMEEMP, TD_DADOS_EMPRESA.ESTAEMP AS ESTAEMP, N.CODI_EMP AS CODI_EMP FROM BETHADBA.EFSAIDAS AS N INNER JOIN BETHADBA.GEEMPRE AS G ON G.CODI_EMP = N.CODI_EMP INNER JOIN BETHADBA.EFACUMULADOR_VIGENCIA AS A ON A.CODI_EMP = N.CODI_EMP AND A.CODI_ACU = N.CODI_ACU AND A.VIGENCIA_ACU = DSDBA.D_BUSCA_VIGENCIA_ACUMULADOR(N.CODI_EMP, N.CODI_ACU, N.DSAI_SAI) INNER JOIN BETHADBA.EFPARAMETRO_VIGENCIA AS PV ON PV.CODI_EMP = N.CODI_EMP AND PV.VIGENCIA_PAR = DSDBA.D_BUSCA_VIGENCIA_PARAMETRO(N.CODI_EMP, N.DSAI_SAI), /*-AUXILIAR-*/ LATERAL(SELECT COALESCE(MAX(CASE WHEN I.CODI_IMP = 1 THEN 1 END), 0) AS TEMICMS, COALESCE(MAX(CASE WHEN I.CODI_IMP = 3 THEN 1 END), 0) AS TEMISS, COALESCE(MAX(CASE WHEN I.CODI_IMP = 18 THEN 1 END), 0) AS TEMISSR FROM BETHADBA.EFIMPSAI AS I WHERE N.CODI_EMP = I.CODI_EMP AND N.CODI_SAI = I.CODI_SAI) AS TDAUX, LATERAL(SELECT CASE WHEN NOT (EMISSORA.TINS_EMP IN (3, 6)) THEN EMISSORA.CGCE_EMP ELSE COALESCE(DSDBA.S_BUSCA_ALTERACAO_EMPRESA(EMISSORA.CODI_EMP, '{data_inicio}', 21), EMISSORA.CPF_LEG_EMP, '') END AS CGCEEMP, COALESCE(DSDBA.S_BUSCA_ALTERACAO_EMPRESA(EMISSORA.CODI_EMP, '{data_inicio}', 12), EMISSORA.IEST_EMP) AS IESTEMP, COALESCE(DSDBA.S_BUSCA_ALTERACAO_EMPRESA(EMISSORA.CODI_EMP, '{data_inicio}', 2), EMISSORA.RAZAO_EMP) AS NOMEEMP, COALESCE(DSDBA.S_BUSCA_ALTERACAO_EMPRESA(EMISSORA.CODI_EMP, '{data_inicio}', 9), EMISSORA.ESTA_EMP) AS ESTAEMP FROM BETHADBA.GEEMPRE AS EMISSORA WHERE EMISSORA.CODI_EMP = {cod_emp}) AS TD_DADOS_EMPRESA, LATERAL(SELECT CASE WHEN G.ESTA_EMP = 'RS' AND N.CODI_NAT IN (5116, 5117, 6116, 6117) THEN 0 ELSE N.VCON_SAI END AS VCON_SAI, CASE WHEN G.ESTA_EMP = 'CE' AND N.CODI_NAT IN (5601, 5602) AND N.SITUACAO_SAI = 9 AND N.VCON_SAI > 0 THEN 'S' WHEN G.ESTA_EMP = 'PA' AND N.CODI_NAT IN (5601, 5602) AND N.SITUACAO_SAI = 9 THEN 'S' ELSE 'N' END AS EMITE_LINHA_ZERADA FROM DSDBA.DUMMY) AS TDAUX_2, LATERAL(SELECT COALESCE(CLI.CGCE_CLI, '') AS CNPJ FROM BETHADBA.EFCLIENTES CLI WHERE CLI.CODI_EMP = N.CODI_EMP AND CLI.CODI_CLI = N.CODI_CLI) AS TD_CLIENTE, LATERAL(SELECT CASE WHEN 0 = 0 THEN 'S' WHEN 0 = 1 AND PV.CENTRAL_PAR IN(2, 3) THEN 'S' WHEN 0 = 1 AND PV.APURACAO_CENTRALIZADA IN(2, 3) THEN 'S' ELSE 'N' END AS GERA_REGISTRO FROM DSDBA.DUMMY) AS TDCENTRALIZA, LATERAL(SELECT COALESCE(COUNT(1),0) AS EXISTE FROM BETHADBA.EFSAIDAS_CTES_REFERENCIADOS AS CTE_REF INNER JOIN BETHADBA.EFSAIDAS_CTES_REFERENCIADOS_ICMS AS CTES_REFERENCIADOS_ICMS ON CTES_REFERENCIADOS_ICMS.CODI_EMP = N.CODI_EMP AND CTES_REFERENCIADOS_ICMS.CODI_SAI = N.CODI_SAI INNER JOIN BETHADBA.GEEMPRE AS EMPRESA ON EMPRESA.CODI_EMP = CTE_REF.CODI_EMP WHERE CTE_REF.CODI_EMP = N.CODI_EMP AND CTE_REF.CODI_SAI_CTE = N.CODI_SAI AND CTES_REFERENCIADOS_ICMS.VALOR_IMPOSTO > 0 AND EMPRESA.ESTA_EMP = 'TO') AS TD_NOTA_REFERENCIADA_TO WHERE N.CODI_EMP IN ({cod_emp}) AND N.DSAI_SAI >= '{data_inicio}' AND N.DSAI_SAI <= '{data_fim}' AND TDCENTRALIZA.GERA_REGISTRO = 'S' AND N.NOVO_ECF = 'N' AND ((('N' = 'N' AND NOT ('N' = 'N' AND G.ESTA_EMP IN ('RN', 'PB') AND NOT TDAUX.TEMICMS = 1)) OR TDAUX.TEMICMS = 1)) AND TDAUX.TEMICMS = 0 AND A.RS_LANC_DEB_PARC_ICMSST_PRODUTO = 'N' AND N.SITUACAO_SAI NOT IN (2, 3) AND ((TDAUX.TEMISS = 1 OR TDAUX.TEMISSR = 1) AND N.CODI_NAT IN (5933, 6933)) AND NOT(G.ESTA_EMP IN ('ES', 'PR') AND N.SITUACAO_SAI = 9 AND N.CODI_NAT IN(5605, 5602)) AND NOT(G.ESTA_EMP = 'PR' AND N.CODI_NAT IN (5601, 5606)) AND NOT(G.ESTA_EMP = 'RO' AND N.CODI_NAT = 5949 AND PV.SIMPLESN_OPTANTE_PAR = 'S' AND N.SITUACAO_SAI = 9 AND TD_CLIENTE.CNPJ = '00394585000171') AND NOT(G.ESTA_EMP = 'RR' AND A.TRANSFERENCIA_ACU = 'S' AND N.CODI_NAT = 5601) AND NOT(G.ESTA_EMP = 'GO') AND TD_NOTA_REFERENCIADA_TO.EXISTE = 0 GROUP BY N.CODI_NAT, N.CODI_EMP, G.TINS_EMP, TD_DADOS_EMPRESA.IESTEMP, TD_DADOS_EMPRESA.CGCEEMP, TD_DADOS_EMPRESA.NOMEEMP, TD_DADOS_EMPRESA.ESTAEMP UNION ALL SELECT 3 AS QUADRO, 1 AS ORDE, N.CODI_NAT AS CODINAT, 0 AS CODINAT1, SUM(TDVALORES.VCON_SAI) AS VCON, 0 AS BCAL, 0 AS VICM, SUM(TDVALORES.VALOR_ISENTAS) AS IICM, SUM(TDVALORES.VALOR_OUTROS) AS OICM, N.CODI_EMP AS CEMP, {livro_num} AS LIVRO, {pagina_num} AS PAGINA, G.TINS_EMP AS TINSEMP, TD_DADOS_EMPRESA.IESTEMP AS IESTEMP, TD_DADOS_EMPRESA.CGCEEMP AS CGCEEMP, TD_DADOS_EMPRESA.NOMEEMP AS NOMEEMP, TD_DADOS_EMPRESA.ESTAEMP AS ESTAEMP, N.CODI_EMP AS CODI_EMP FROM BETHADBA.EFSAIDAS AS N INNER JOIN BETHADBA.GEEMPRE AS G ON G.CODI_EMP = N.CODI_EMP INNER JOIN BETHADBA.EFACUMULADOR_VIGENCIA AS A ON A.CODI_EMP = N.CODI_EMP AND A.CODI_ACU = N.CODI_ACU AND A.VIGENCIA_ACU = DSDBA.D_BUSCA_VIGENCIA_ACUMULADOR(N.CODI_EMP, N.CODI_ACU, N.DSAI_SAI) INNER JOIN BETHADBA.EFPARAMETRO_VIGENCIA AS PAR_VIG ON PAR_VIG.CODI_EMP = N.CODI_EMP AND PAR_VIG.VIGENCIA_PAR = DSDBA.D_BUSCA_VIGENCIA_PARAMETRO(N.CODI_EMP, N.DSAI_SAI) INNER JOIN BETHADBA.EFESPECIES AS ESPECIE ON ESPECIE.CODI_ESP = N.CODI_ESP, LATERAL(SELECT COUNT(1) AS QTDE_REGISTRO FROM BETHADBA.EFIMPSAI AS I WHERE I.CODI_EMP = N.CODI_EMP AND I.CODI_SAI = N.CODI_SAI AND I.CODI_IMP = 1) AS TDIMP_ICMS, LATERAL(SELECT CASE WHEN G.ESTA_EMP = 'RS' AND N.CODI_NAT IN (5103, 5104, 6103, 6104) THEN 'S' ELSE 'N' END AS RS_EMITE_LINHA_ZERADA, CASE WHEN G.ESTA_EMP = 'CE' AND N.CODI_NAT IN (5601, 5602) AND N.SITUACAO_SAI = 9 AND N.VCON_SAI > 0 THEN 'S' WHEN G.ESTA_EMP = 'PA' AND N.CODI_NAT IN (5601, 5602) AND N.SITUACAO_SAI = 9 THEN 'S' ELSE 'N' END AS EMITE_LINHA_ZERADA FROM DSDBA.DUMMY) AS TDAUX, LATERAL(SELECT CASE WHEN NOT (EMISSORA.TINS_EMP IN (3, 6)) THEN EMISSORA.CGCE_EMP ELSE COALESCE(DSDBA.S_BUSCA_ALTERACAO_EMPRESA(EMISSORA.CODI_EMP, '{data_inicio}', 21), EMISSORA.CPF_LEG_EMP, '') END AS CGCEEMP, COALESCE(DSDBA.S_BUSCA_ALTERACAO_EMPRESA(EMISSORA.CODI_EMP, '{data_inicio}', 12), EMISSORA.IEST_EMP) AS IESTEMP, COALESCE(DSDBA.S_BUSCA_ALTERACAO_EMPRESA(EMISSORA.CODI_EMP, '{data_inicio}', 2), EMISSORA.RAZAO_EMP) AS NOMEEMP, COALESCE(DSDBA.S_BUSCA_ALTERACAO_EMPRESA(EMISSORA.CODI_EMP, '{data_inicio}', 9), EMISSORA.ESTA_EMP) AS ESTAEMP FROM BETHADBA.GEEMPRE AS EMISSORA WHERE EMISSORA.CODI_EMP = {cod_emp}) AS TD_DADOS_EMPRESA, LATERAL(SELECT CASE WHEN PAR_VIG.GERAR_SAIDA_SEM_ICMS_EM = 'I' AND TDAUX.RS_EMITE_LINHA_ZERADA = 'N' AND TDAUX.EMITE_LINHA_ZERADA = 'N' THEN N.VCON_SAI ELSE 0 END AS VALOR_ISENTAS, CASE WHEN PAR_VIG.GERAR_SAIDA_SEM_ICMS_EM = 'O' AND TDAUX.RS_EMITE_LINHA_ZERADA = 'N' AND TDAUX.EMITE_LINHA_ZERADA = 'N' THEN N.VCON_SAI ELSE 0 END AS VALOR_OUTROS, CASE WHEN (G.ESTA_EMP = 'RS' AND N.CODI_NAT IN (5116, 5117, 6116, 6117)) OR TDAUX.RS_EMITE_LINHA_ZERADA = 'S' OR TDAUX.EMITE_LINHA_ZERADA = 'S' THEN 0 ELSE N.VCON_SAI END AS VCON_SAI FROM DSDBA.DUMMY) AS TDVALORES, LATERAL(SELECT CASE WHEN 0 = 0 THEN 'S' WHEN 0 = 1 AND PAR_VIG.CENTRAL_PAR IN(2, 3) THEN 'S' WHEN 0 = 1 AND PAR_VIG.APURACAO_CENTRALIZADA IN(2, 3) THEN 'S' ELSE 'N' END AS GERA_REGISTRO FROM DSDBA.DUMMY) AS TDCENTRALIZA, LATERAL(SELECT COALESCE(COUNT(1),0) AS EXISTE FROM BETHADBA.EFSAIDAS_CTES_REFERENCIADOS AS CTE_REF INNER JOIN BETHADBA.EFSAIDAS_CTES_REFERENCIADOS_ICMS AS CTES_REFERENCIADOS_ICMS ON CTES_REFERENCIADOS_ICMS.CODI_EMP = N.CODI_EMP AND CTES_REFERENCIADOS_ICMS.CODI_SAI = N.CODI_SAI INNER JOIN BETHADBA.GEEMPRE AS EMPRESA ON EMPRESA.CODI_EMP = CTE_REF.CODI_EMP WHERE CTE_REF.CODI_EMP = N.CODI_EMP AND CTE_REF.CODI_SAI_CTE = N.CODI_SAI AND CTES_REFERENCIADOS_ICMS.VALOR_IMPOSTO > 0 AND EMPRESA.ESTA_EMP = 'TO') AS TD_NOTA_REFERENCIADA_TO WHERE N.CODI_EMP IN ({cod_emp}) AND N.DSAI_SAI >= '{data_inicio}' AND N.DSAI_SAI <= '{data_fim}' AND TDCENTRALIZA.GERA_REGISTRO = 'S' AND N.NOVO_ECF = 'N' AND ('N' = 'S' OR ('N' = 'N' AND G.ESTA_EMP = 'PB' AND ESPECIE.DOCUMENTO_NAO_FISCAL = 'N') OR (PAR_VIG.SIMPLESN_OPTANTE_PAR = 'S' AND G.ESTA_EMP = 'RN')) AND A.RS_LANC_DEB_PARC_ICMSST_PRODUTO = 'N' AND NOT TDIMP_ICMS.QTDE_REGISTRO > 0 AND NOT (G.ESTA_EMP = 'GO') AND TD_NOTA_REFERENCIADA_TO.EXISTE = 0 GROUP BY N.CODI_NAT, N.CODI_EMP, G.TINS_EMP, TD_DADOS_EMPRESA.IESTEMP, TD_DADOS_EMPRESA.CGCEEMP, TD_DADOS_EMPRESA.NOMEEMP, TD_DADOS_EMPRESA.ESTAEMP UNION ALL SELECT 3 AS QUADRO, 1 AS ORDE, N.CODI_NAT AS CODINAT, 0 AS CODINAT1, CASE WHEN TDAUX_02.EQUIPAMENTO_EMISSOR_CUPOM_FISCAL = 'N' THEN SUM(N.VCON_SAI - COALESCE(TDECF.VLOR_ECA, 0)) ELSE 0 END AS VCON, CASE WHEN ACU_VIG.SIMPLESN_CREDITO_PRESUMIDO_ACU = 'S' OR TDAUX_02.EQUIPAMENTO_EMISSOR_CUPOM_FISCAL = 'S' THEN 0 ELSE SUM(COALESCE(TDIMP1.BCAL_ISA, 0)) END AS BCAL, CASE WHEN ACU_VIG.SIMPLESN_CREDITO_PRESUMIDO_ACU = 'S' OR TDAUX_02.EQUIPAMENTO_EMISSOR_CUPOM_FISCAL = 'S' THEN 0 ELSE SUM(COALESCE(TDIMP1.VLOR_ISA, 0)) END AS VICM, CASE WHEN ACU_VIG.SIMPLESN_CREDITO_PRESUMIDO_ACU = 'S' OR TDAUX_02.EQUIPAMENTO_EMISSOR_CUPOM_FISCAL = 'S' THEN 0 ELSE SUM(COALESCE(TDIMP1.VISE_ISA + TDIMP1.NTRI_ISA + TDIMP1.REDU_ISA, 0) + COALESCE(TDIMP3.VISE_ISA + TDIMP3.BCAL_ISA, 0) + COALESCE(TDIMP18.VISE_ISA + TDIMP18.BCAL_ISA, 0)) END AS IICM, CASE WHEN TDAUX_02.EQUIPAMENTO_EMISSOR_CUPOM_FISCAL = 'S' THEN 0 WHEN ACU_VIG.SIMPLESN_CREDITO_PRESUMIDO_ACU = 'S' THEN SUM(N.VCON_SAI - COALESCE(TDECF.VLOR_ECA, 0)) ELSE SUM(CASE WHEN(COALESCE(TDIMP1.VOUT_ISA, 0) + COALESCE(TDIMP3.VOUT_ISA, 0) - COALESCE(TDECF.VLOR_ECA, 0)) > 0 THEN COALESCE(TDIMP1.VOUT_ISA, 0) + COALESCE(TDIMP3.VOUT_ISA, 0) - COALESCE(TDECF.VLOR_ECA, 0) ELSE 0 END) END AS OICM, N.CODI_EMP AS CEMP, {livro_num} AS LIVRO, {pagina_num} AS PAGINA, G.TINS_EMP AS TINSEMP, TDEMP.IESTEMP AS IESTEMP, TDEMP.CGCEEMP AS CGCEEMP, TDEMP.NOMEEMP AS NOMEEMP, TDEMP.ESTAEMP AS ESTAEMP, N.CODI_EMP AS CODI_EMP FROM BETHADBA.EFSAIDAS AS N INNER JOIN BETHADBA.GEEMPRE AS G ON G.CODI_EMP = N.CODI_EMP INNER JOIN BETHADBA.EFESPECIES AS P ON P.CODI_ESP = N.CODI_ESP INNER JOIN BETHADBA.EFACUMULADOR_VIGENCIA AS ACU_VIG ON ACU_VIG.CODI_EMP = N.CODI_EMP AND ACU_VIG.CODI_ACU = N.CODI_ACU INNER JOIN BETHADBA.EFPARAMETRO_VIGENCIA AS R ON R.CODI_EMP = N.CODI_EMP AND R.VIGENCIA_PAR = DSDBA.D_BUSCA_VIGENCIA_PARAMETRO(N.CODI_EMP, N.DSAI_SAI), /*-AUXILIAR-*/ LATERAL(SELECT COALESCE(MAX(CASE WHEN I.CODI_IMP = 1 THEN 1 END), 0) AS TEMICMS, COALESCE(MAX(CASE WHEN I.CODI_IMP = 3 THEN 1 END), 0) AS TEMISS, COALESCE(MAX(CASE WHEN I.CODI_IMP = 18 THEN 1 END) , 0) AS TEMISSR FROM BETHADBA.EFIMPSAI AS I WHERE I.CODI_EMP = N.CODI_EMP AND I.CODI_SAI = N.CODI_SAI) AS TDAUX, /*-ICMS-*/ LATERAL(SELECT SUM(I.BCAL_ISA) AS BCAL_ISA, SUM(I.VLOR_ISA) AS VLOR_ISA, SUM(I.VISE_ISA) AS VISE_ISA, SUM(I.VOUT_ISA) AS VOUT_ISA, SUM(I.NTRI_ISA) AS NTRI_ISA, SUM(I.REDU_ISA) AS REDU_ISA FROM BETHADBA.EFIMPSAI AS I WHERE I.CODI_EMP = N.CODI_EMP AND I.CODI_SAI = N.CODI_SAI AND I.CODI_IMP = 1) AS TDIMP1, /*-ISS-*/ LATERAL(SELECT SUM(I.BCAL_ISA) AS BCAL_ISA, SUM(I.VLOR_ISA) AS VLOR_ISA, SUM(I.VISE_ISA) AS VISE_ISA, SUM(I.VOUT_ISA) AS VOUT_ISA FROM BETHADBA.EFIMPSAI AS I WHERE I.CODI_EMP = N.CODI_EMP AND I.CODI_SAI = N.CODI_SAI AND I.CODI_IMP = 3 AND N.CODI_NAT IN (5933, 6933)) AS TDIMP3, /*-ISSR-*/ LATERAL(SELECT SUM(I.BCAL_ISA) AS BCAL_ISA, SUM(I.VLOR_ISA) AS VLOR_IEN, SUM(I.VISE_ISA) AS VISE_ISA, SUM(I.VOUT_ISA) AS VOUT_ISA FROM BETHADBA.EFIMPSAI AS I WHERE I.CODI_EMP = N.CODI_EMP AND I.CODI_SAI = N.CODI_SAI AND I.CODI_IMP = 18 AND N.CODI_NAT IN (5933, 6933)) AS TDIMP18, /*-ECF-*/ LATERAL(SELECT COALESCE ( SUM ( A.VLOR_ECA ), 0 ) AS VLOR_ECA FROM BETHADBA.EFTABECFM M, BETHADBA.EFTABECFA A WHERE M.CODI_EMP = N.CODI_EMP AND M.CODI_ECM = N.CODI_SAI AND M.TIPO_ECM = 'S' AND (M.DEDUZIR_ECM = 'S' OR N.NOVO_ECF = 'S') AND M.CODI_EMP = A.CODI_EMP AND M.CODI_ECM = A.CODI_ECM AND M.CODI_MEC = A.CODI_MEC AND M.TIPO_ECM = A.TIPO_ECM AND A.SITU_ECA IN ( 'CANC', 'DESC' ) ) AS TDECF, /*-EMPRESA-*/ LATERAL(SELECT G.TINS_EMP AS TINSEMP, COALESCE(DSDBA.S_BUSCA_ALTERACAO_EMPRESA(G.CODI_EMP, '{data_inicio}', 12), G.IEST_EMP) AS IESTEMP, COALESCE(DSDBA.S_BUSCA_ALTERACAO_EMPRESA(G.CODI_EMP, '{data_inicio}', 2), G.RAZAO_EMP) AS NOMEEMP, COALESCE(DSDBA.S_BUSCA_ALTERACAO_EMPRESA(G.CODI_EMP, '{data_inicio}', 9), G.ESTA_EMP) AS ESTAEMP, CASE WHEN NOT (G.TINS_EMP IN (3, 6)) THEN G.CGCE_EMP ELSE COALESCE(DSDBA.S_BUSCA_ALTERACAO_EMPRESA(G.CODI_EMP, '{data_inicio}', 21), G.CPF_LEG_EMP,'') END AS CGCEEMP FROM BETHADBA.GEEMPRE AS G WHERE G.CODI_EMP = {cod_emp}) AS TDEMP, LATERAL(SELECT COALESCE(MAX('S'), 'N') AS GO_TEM_TRANSFERENCIA_CHEQUE_MORADIA FROM BETHADBA.EFSAIDAS_ESTADUAL_GO AS SAIDAS_ESTADUAL_GO WHERE SAIDAS_ESTADUAL_GO.CODI_EMP = N.CODI_EMP AND SAIDAS_ESTADUAL_GO.CODI_SAI = N.CODI_SAI AND SAIDAS_ESTADUAL_GO.GO_VALOR_TRANSFERENCIA > 0) AS TD_GO_CHEQUE_MORADIA, LATERAL(SELECT CASE WHEN N.CODI_NAT IN (5929, 6929) AND R.DESCONTAR_VALOR_ICMS_CFOP_5929_6929 = 'S' THEN 'S' WHEN N.CODI_NAT IN (5111, 5112, 5113, 5114, 6111, 6112, 6113, 6114) AND R.DESCONTAR_VALOR_ICMS_IPI_CFOP_MERCANTIL = 'S' THEN 'S' ELSE 'N' END AS EQUIPAMENTO_EMISSOR_CUPOM_FISCAL FROM DSDBA.DUMMY) AS TDAUX_02, LATERAL(SELECT CASE WHEN 0 = 0 THEN 'S' WHEN 0 = 1 AND R.CENTRAL_PAR IN(2, 3) THEN 'S' WHEN 0 = 1 AND R.APURACAO_CENTRALIZADA IN(2, 3) THEN 'S' ELSE 'N' END AS GERA_REGISTRO FROM DSDBA.DUMMY) AS TDCENTRALIZA WHERE N.CODI_EMP IN ({cod_emp}) AND N.DSAI_SAI >= '{data_inicio}' AND N.DSAI_SAI <= '{data_fim}' AND TDCENTRALIZA.GERA_REGISTRO = 'S' AND N.NOVO_ECF = 'N' AND (NOT (R.FOMENTAR_PAR <> 'S' AND N.SITUACAO_SAI = 9 AND N.CODI_NAT = 5602)) AND (TDAUX.TEMICMS = 1 OR ((TDAUX.TEMISS = 1 OR TDAUX.TEMISSR = 1) AND N.CODI_NAT IN (5933, 6933))) AND N.SITUACAO_SAI NOT IN (2, 3) AND ('N' = 'N' OR TDAUX.TEMICMS = 1) AND P.DOCUMENTO_NAO_FISCAL = 'N' AND ACU_VIG.VIGENCIA_ACU = DSDBA.D_BUSCA_VIGENCIA_ACUMULADOR(N.CODI_EMP, N.CODI_ACU, N.DSAI_SAI) AND TD_GO_CHEQUE_MORADIA.GO_TEM_TRANSFERENCIA_CHEQUE_MORADIA = 'N' AND G.ESTA_EMP = 'GO' GROUP BY N.CODI_NAT, N.CODI_EMP, G.TINS_EMP, TDEMP.IESTEMP, TDEMP.CGCEEMP, TDEMP.NOMEEMP, TDEMP.ESTAEMP, ACU_VIG.SIMPLESN_CREDITO_PRESUMIDO_ACU, TDAUX_02.EQUIPAMENTO_EMISSOR_CUPOM_FISCAL UNION ALL SELECT 3 AS QUADRO, 1 AS ORDE, N.CODI_NAT AS CODINAT, 0 AS CODINAT1, SUM(N.VCON_SAI - COALESCE(TDECF.VLOR_ECA, 0)) AS VCON, 0 AS BCAL, 0 AS VICM, 0 AS IICM, SUM(N.VCON_SAI - COALESCE(TDECF.VLOR_ECA, 0)) AS OICM, N.CODI_EMP AS CEMP, {livro_num} AS LIVRO, {pagina_num} AS PAGINA, TDEMP.TINSEMP AS TINSEMP, TDEMP.IESTEMP AS IESTEMP, TDEMP.CGCEEMP AS CGCEEMP, TDEMP.NOMEEMP AS NOMEEMP, TDEMP.ESTAEMP AS ESTAEMP, N.CODI_EMP AS CODI_EMP FROM BETHADBA.EFSAIDAS AS N INNER JOIN BETHADBA.GEEMPRE AS G ON G.CODI_EMP = N.CODI_EMP INNER JOIN BETHADBA.EFESPECIES AS P ON P.CODI_ESP = N.CODI_ESP INNER JOIN BETHADBA.EFPARAMETRO_VIGENCIA AS R ON R.CODI_EMP = N.CODI_EMP AND R.VIGENCIA_PAR = DSDBA.D_BUSCA_VIGENCIA_PARAMETRO(N.CODI_EMP, N.DSAI_SAI), /*-AUXILIAR-*/ LATERAL(SELECT COALESCE(MAX(CASE WHEN I.CODI_IMP = 1 THEN 1 END), 0) AS TEMICMS FROM BETHADBA.EFIMPSAI AS I WHERE I.CODI_EMP = N.CODI_EMP AND I.CODI_SAI = N.CODI_SAI) AS TDAUX, /*-ECF-*/ LATERAL ( SELECT COALESCE ( SUM ( A.VLOR_ECA ), 0 ) AS VLOR_ECA FROM BETHADBA.EFTABECFM M, BETHADBA.EFTABECFA A WHERE M.CODI_EMP = N.CODI_EMP AND M.CODI_ECM = N.CODI_SAI AND M.TIPO_ECM = 'S' AND (M.DEDUZIR_ECM = 'S' OR N.NOVO_ECF = 'S') AND M.CODI_EMP = A.CODI_EMP AND M.CODI_ECM = A.CODI_ECM AND M.CODI_MEC = A.CODI_MEC AND M.TIPO_ECM = A.TIPO_ECM AND A.SITU_ECA IN ( 'CANC', 'DESC' ) ) AS TDECF, /*-EMPRESA-*/ LATERAL(SELECT G.TINS_EMP AS TINSEMP, COALESCE(DSDBA.S_BUSCA_ALTERACAO_EMPRESA(G.CODI_EMP, '{data_inicio}', 12), G.IEST_EMP) AS IESTEMP, COALESCE(DSDBA.S_BUSCA_ALTERACAO_EMPRESA(G.CODI_EMP, '{data_inicio}', 2), G.RAZAO_EMP) AS NOMEEMP, COALESCE(DSDBA.S_BUSCA_ALTERACAO_EMPRESA(G.CODI_EMP, '{data_inicio}', 9), G.ESTA_EMP) AS ESTAEMP, CASE WHEN NOT (G.TINS_EMP IN (3, 6)) THEN G.CGCE_EMP ELSE COALESCE(DSDBA.S_BUSCA_ALTERACAO_EMPRESA(G.CODI_EMP, '{data_inicio}', 21), G.CPF_LEG_EMP,'') END AS CGCEEMP FROM BETHADBA.GEEMPRE AS G WHERE G.CODI_EMP = {cod_emp}) AS TDEMP, LATERAL(SELECT COALESCE(MAX('S'), 'N') AS GO_TEM_TRANSFERENCIA_CHEQUE_MORADIA FROM BETHADBA.EFSAIDAS_ESTADUAL_GO AS SAIDAS_ESTADUAL_GO WHERE SAIDAS_ESTADUAL_GO.CODI_EMP = N.CODI_EMP AND SAIDAS_ESTADUAL_GO.CODI_SAI = N.CODI_SAI AND SAIDAS_ESTADUAL_GO.GO_VALOR_TRANSFERENCIA > 0) AS TD_GO_CHEQUE_MORADIA, LATERAL(SELECT CASE WHEN 0 = 0 THEN 'S' WHEN 0 = 1 AND R.CENTRAL_PAR IN(2, 3) THEN 'S' WHEN 0 = 1 AND R.APURACAO_CENTRALIZADA IN(2, 3) THEN 'S' ELSE 'N' END AS GERA_REGISTRO FROM DSDBA.DUMMY) AS TDCENTRALIZA WHERE N.CODI_EMP IN ({cod_emp}) AND N.DSAI_SAI >= '{data_inicio}' AND N.DSAI_SAI <= '{data_fim}' AND TDCENTRALIZA.GERA_REGISTRO = 'S' AND N.NOVO_ECF = 'N' AND N.SITUACAO_SAI NOT IN (2, 3) AND 'N' = 'S' AND NOT TDAUX.TEMICMS = 1 AND P.DOCUMENTO_NAO_FISCAL = 'N' AND TD_GO_CHEQUE_MORADIA.GO_TEM_TRANSFERENCIA_CHEQUE_MORADIA = 'N' AND G.ESTA_EMP = 'GO' GROUP BY N.CODI_NAT, N.CODI_EMP, TDEMP.TINSEMP, TDEMP.IESTEMP, TDEMP.CGCEEMP, TDEMP.NOMEEMP, TDEMP.ESTAEMP UNION ALL SELECT 3 AS QUADRO, 1 AS ORDE, EFECF_REDUCAO_Z_IMPOSTOS.CODI_NAT AS CODINAT, 0 AS CODINAT1, COALESCE(SUM(TDAUX.VCON), 0) AS VCON, COALESCE(SUM(TDVALORES.BCAL), 0) AS BCAL, COALESCE(SUM(TDVALORES.VICM), 0) AS VICM, COALESCE(SUM(TDVALORES.IICM), 0) AS IICM, COALESCE(SUM(TDVALORES.OICM), 0) AS OICM, EFECF_REDUCAO_Z_IMPOSTOS.CODI_EMP AS CEMP, {livro_num} AS LIVRO, {pagina_num} AS PAGINA, GEEMPRE.TINS_EMP AS TINSEMP, TD_DADOS_EMPRESA.IESTEMP AS IESTEMP, TD_DADOS_EMPRESA.CGCEEMP AS CGCEEMP, TD_DADOS_EMPRESA.NOMEEMP AS NOMEEMP, TD_DADOS_EMPRESA.ESTAEMP AS ESTAEMP, EFECF_REDUCAO_Z_IMPOSTOS.CODI_EMP AS CODI_EMP FROM BETHADBA.EFECF_REDUCAO_Z AS EFECF_REDUCAO_Z INNER JOIN BETHADBA.EFECF_REDUCAO_Z_IMPOSTOS AS EFECF_REDUCAO_Z_IMPOSTOS ON EFECF_REDUCAO_Z_IMPOSTOS.CODI_EMP = EFECF_REDUCAO_Z.CODI_EMP AND EFECF_REDUCAO_Z_IMPOSTOS.I_REDUCAO = EFECF_REDUCAO_Z.I_REDUCAO INNER JOIN BETHADBA.GEEMPRE AS GEEMPRE ON GEEMPRE.CODI_EMP = EFECF_REDUCAO_Z.CODI_EMP INNER JOIN BETHADBA.EFPARAMETRO_VIGENCIA AS EFPARAMETRO_VIGENCIA ON EFPARAMETRO_VIGENCIA.CODI_EMP = EFECF_REDUCAO_Z.CODI_EMP, LATERAL(SELECT COALESCE(MAX('S'), 'N') AS SIMPLES_NACIONAL FROM DSDBA.DUMMY WHERE EFPARAMETRO_VIGENCIA.SIMPLESN_OPTANTE_PAR = 'S' AND EFPARAMETRO_VIGENCIA.SIMPLESN_ULTRAPASSOU_PAR = 'N' AND EFPARAMETRO_VIGENCIA.SIMPLESN_ICMS_NORMAL_PAR = 'N') AS TDSIMPLES, LATERAL(SELECT COALESCE(MAX('S'), 'N') AS TEM_CANC_DESC, COALESCE(SUM(EFECF_REDUCAO_Z_SITUACAO_TRIBUTARIA.VALOR), 0) AS VALOR FROM BETHADBA.EFECF_REDUCAO_Z_SITUACAO_TRIBUTARIA AS EFECF_REDUCAO_Z_SITUACAO_TRIBUTARIA INNER JOIN BETHADBA.EFECF_REDUCAO_Z_SITUACAO_TRIBUTARIA_DETALHAMENTO AS EFECF_REDUCAO_Z_SITUACAO_TRIBUTARIA_DETALHAMENTO ON EFECF_REDUCAO_Z_SITUACAO_TRIBUTARIA_DETALHAMENTO.CODI_EMP = EFECF_REDUCAO_Z_SITUACAO_TRIBUTARIA.CODI_EMP AND EFECF_REDUCAO_Z_SITUACAO_TRIBUTARIA_DETALHAMENTO.I_REDUCAO = EFECF_REDUCAO_Z_SITUACAO_TRIBUTARIA.I_REDUCAO AND EFECF_REDUCAO_Z_SITUACAO_TRIBUTARIA_DETALHAMENTO.I_SITUACAO = EFECF_REDUCAO_Z_SITUACAO_TRIBUTARIA.I_SITUACAO WHERE EFECF_REDUCAO_Z_SITUACAO_TRIBUTARIA_DETALHAMENTO.CODI_EMP = EFECF_REDUCAO_Z_IMPOSTOS.CODI_EMP AND EFECF_REDUCAO_Z_SITUACAO_TRIBUTARIA_DETALHAMENTO.I_REDUCAO = EFECF_REDUCAO_Z_IMPOSTOS.I_REDUCAO AND EFECF_REDUCAO_Z_SITUACAO_TRIBUTARIA_DETALHAMENTO.CODI_ACU = EFECF_REDUCAO_Z_IMPOSTOS.CODI_ACU AND EFECF_REDUCAO_Z_SITUACAO_TRIBUTARIA_DETALHAMENTO.CODI_NAT = EFECF_REDUCAO_Z_IMPOSTOS.CODI_NAT AND EFECF_REDUCAO_Z_SITUACAO_TRIBUTARIA_DETALHAMENTO.VERSAO_NAT = EFECF_REDUCAO_Z_IMPOSTOS.VERSAO_NAT AND EFECF_REDUCAO_Z_IMPOSTOS.CODI_IMP = 1 AND EFECF_REDUCAO_Z_SITUACAO_TRIBUTARIA.OPERACAO IN (04, 06)) AS TDCANC_DESCONTO, LATERAL(SELECT EFECF_REDUCAO_Z_IMPOSTOS.BASE_CALCULO AS BASE_CALCULO, EFECF_REDUCAO_Z_IMPOSTOS.IMPOSTO AS IMPOSTO, CASE WHEN COALESCE(EFECF_REDUCAO_Z_IMPOSTOS.VALOR_CONTABIL, 0) - TDCANC_DESCONTO.VALOR <= 0 THEN 0 ELSE COALESCE(EFECF_REDUCAO_Z_IMPOSTOS.VALOR_CONTABIL, 0) - TDCANC_DESCONTO.VALOR END AS VCON, CASE WHEN COALESCE(EFECF_REDUCAO_Z_IMPOSTOS.OUTROS, 0) - TDCANC_DESCONTO.VALOR <= 0 THEN 0 ELSE COALESCE(EFECF_REDUCAO_Z_IMPOSTOS.OUTROS, 0) - TDCANC_DESCONTO.VALOR END AS VALOR_OUTRAS, CASE WHEN NOT (GEEMPRE.TINS_EMP IN (3, 6)) THEN GEEMPRE.CGCE_EMP ELSE GEEMPRE.CPF_LEG_EMP END AS CGCEEMP, CASE WHEN GEEMPRE.ESTA_EMP = 'RS' AND EFECF_REDUCAO_Z_IMPOSTOS.CODI_NAT IN (5103, 5104, 6103, 6104) THEN 'S' ELSE 'N' END AS RS_EMITE_LINHA_ZERADA FROM DSDBA.DUMMY) AS TDAUX, LATERAL(SELECT CASE WHEN NOT (EMISSORA.TINS_EMP IN (3, 6)) THEN EMISSORA.CGCE_EMP ELSE COALESCE(DSDBA.S_BUSCA_ALTERACAO_EMPRESA(EMISSORA.CODI_EMP, '{data_inicio}', 21), EMISSORA.CPF_LEG_EMP, '') END AS CGCEEMP, COALESCE(DSDBA.S_BUSCA_ALTERACAO_EMPRESA(EMISSORA.CODI_EMP, '{data_inicio}', 12), EMISSORA.IEST_EMP) AS IESTEMP, COALESCE(DSDBA.S_BUSCA_ALTERACAO_EMPRESA(EMISSORA.CODI_EMP, '{data_inicio}', 2), EMISSORA.RAZAO_EMP) AS NOMEEMP, COALESCE(DSDBA.S_BUSCA_ALTERACAO_EMPRESA(EMISSORA.CODI_EMP, '{data_inicio}', 9), EMISSORA.ESTA_EMP) AS ESTAEMP FROM BETHADBA.GEEMPRE AS EMISSORA WHERE EMISSORA.CODI_EMP = {cod_emp}) AS TD_DADOS_EMPRESA, LATERAL(SELECT CASE WHEN TDSIMPLES.SIMPLES_NACIONAL = 'S' OR TDAUX.RS_EMITE_LINHA_ZERADA = 'S' THEN 0 ELSE COALESCE(TDAUX.BASE_CALCULO, 0) END AS BCAL, CASE WHEN TDSIMPLES.SIMPLES_NACIONAL = 'S' OR TDAUX.RS_EMITE_LINHA_ZERADA = 'S' THEN 0 ELSE COALESCE(TDAUX.IMPOSTO, 0) END AS VICM, CASE WHEN TDSIMPLES.SIMPLES_NACIONAL = 'S' AND EFPARAMETRO_VIGENCIA.GERAR_SAIDA_SEM_ICMS_EM = 'I' AND TDAUX.RS_EMITE_LINHA_ZERADA = 'N' THEN TDAUX.VCON WHEN TDSIMPLES.SIMPLES_NACIONAL = 'S' OR TDAUX.RS_EMITE_LINHA_ZERADA = 'S' THEN 0 ELSE COALESCE(EFECF_REDUCAO_Z_IMPOSTOS.ISENTAS, 0) END AS IICM, CASE WHEN TDSIMPLES.SIMPLES_NACIONAL = 'S' AND EFPARAMETRO_VIGENCIA.GERAR_SAIDA_SEM_ICMS_EM = 'O' AND TDAUX.RS_EMITE_LINHA_ZERADA = 'N' THEN TDAUX.VCON WHEN TDSIMPLES.SIMPLES_NACIONAL = 'S' OR TDAUX.RS_EMITE_LINHA_ZERADA = 'S' THEN 0 ELSE VALOR_OUTRAS END AS OICM FROM DSDBA.DUMMY) AS TDVALORES, LATERAL(SELECT CASE WHEN 0 = 0 THEN 'S' WHEN 0 = 1 AND EFPARAMETRO_VIGENCIA.CENTRAL_PAR IN(2, 3) THEN 'S' WHEN 0 = 1 AND EFPARAMETRO_VIGENCIA.APURACAO_CENTRALIZADA IN(2, 3) THEN 'S' ELSE 'N' END AS GERA_REGISTRO FROM DSDBA.DUMMY) AS TDCENTRALIZA WHERE EFECF_REDUCAO_Z.CODI_EMP IN ({cod_emp}) AND EFECF_REDUCAO_Z.DATA_REDUCAO >= '{data_inicio}' AND EFECF_REDUCAO_Z.DATA_REDUCAO <= '{data_fim}' AND TDCENTRALIZA.GERA_REGISTRO = 'S' AND EFECF_REDUCAO_Z_IMPOSTOS.CODI_IMP = 1 AND EFPARAMETRO_VIGENCIA.VIGENCIA_PAR = DSDBA.D_BUSCA_VIGENCIA_PARAMETRO(EFECF_REDUCAO_Z.CODI_EMP, EFECF_REDUCAO_Z.DATA_REDUCAO) AND NOT(TDCANC_DESCONTO.TEM_CANC_DESC = 'S' AND EFECF_REDUCAO_Z_IMPOSTOS.CODI_NAT = 5949) AND NOT(GEEMPRE.ESTA_EMP = 'GO') GROUP BY EFECF_REDUCAO_Z_IMPOSTOS.CODI_NAT, EFECF_REDUCAO_Z_IMPOSTOS.CODI_EMP, GEEMPRE.TINS_EMP, TD_DADOS_EMPRESA.IESTEMP, TD_DADOS_EMPRESA.CGCEEMP, TD_DADOS_EMPRESA.NOMEEMP, EFECF_REDUCAO_Z_IMPOSTOS.CODI_EMP, TD_DADOS_EMPRESA.ESTAEMP UNION ALL SELECT 3 AS QUADRO, 1 AS ORDE, EFECF_REDUCAO_Z_IMPOSTOS.CODI_NAT AS CODINAT, 0 AS CODINAT1, COALESCE(SUM(TDVALORES.VCON), 0) AS VCON, 0 AS BCAL, 0 AS VICM, SUM(CASE WHEN EFPARAMETRO_VIGENCIA.GERAR_SAIDA_SEM_ICMS_EM = 'I' THEN COALESCE(TDVALORES.VCON, 0) ELSE 0 END) AS IICM, SUM(CASE WHEN EFPARAMETRO_VIGENCIA.GERAR_SAIDA_SEM_ICMS_EM = 'O' THEN COALESCE(TDVALORES.VCON, 0) ELSE 0 END) AS OICM, EFECF_REDUCAO_Z_IMPOSTOS.CODI_EMP AS CEMP, {livro_num} AS LIVRO, {pagina_num} AS PAGINA, GEEMPRE.TINS_EMP AS TINSEMP, TD_DADOS_EMPRESA.IESTEMP AS IESTEMP, TD_DADOS_EMPRESA.CGCEEMP AS CGCEEMP, TD_DADOS_EMPRESA.NOMEEMP AS NOMEEMP, TD_DADOS_EMPRESA.ESTAEMP AS ESTAEMP, EFECF_REDUCAO_Z_IMPOSTOS.CODI_EMP AS CODI_EMP FROM BETHADBA.EFECF_REDUCAO_Z AS EFECF_REDUCAO_Z INNER JOIN BETHADBA.EFECF_REDUCAO_Z_IMPOSTOS AS EFECF_REDUCAO_Z_IMPOSTOS ON EFECF_REDUCAO_Z_IMPOSTOS.CODI_EMP = EFECF_REDUCAO_Z.CODI_EMP AND EFECF_REDUCAO_Z_IMPOSTOS.I_REDUCAO = EFECF_REDUCAO_Z.I_REDUCAO INNER JOIN BETHADBA.GEEMPRE AS GEEMPRE ON GEEMPRE.CODI_EMP = EFECF_REDUCAO_Z.CODI_EMP INNER JOIN BETHADBA.EFPARAMETRO_VIGENCIA AS EFPARAMETRO_VIGENCIA ON EFPARAMETRO_VIGENCIA.CODI_EMP = EFECF_REDUCAO_Z.CODI_EMP, LATERAL(SELECT COALESCE(MAX('S'), 'N') AS SIMPLES_NACIONAL FROM DSDBA.DUMMY WHERE EFPARAMETRO_VIGENCIA.SIMPLESN_OPTANTE_PAR = 'S' AND EFPARAMETRO_VIGENCIA.SIMPLESN_ULTRAPASSOU_PAR = 'N' AND EFPARAMETRO_VIGENCIA.SIMPLESN_ICMS_NORMAL_PAR = 'N') AS TDSIMPLES, LATERAL(SELECT COALESCE(MAX('S'), 'N') AS TEM_CANC_DESC, COALESCE(SUM(EFECF_REDUCAO_Z_SITUACAO_TRIBUTARIA.VALOR), 0) AS VALOR FROM BETHADBA.EFECF_REDUCAO_Z_SITUACAO_TRIBUTARIA AS EFECF_REDUCAO_Z_SITUACAO_TRIBUTARIA INNER JOIN BETHADBA.EFECF_REDUCAO_Z_SITUACAO_TRIBUTARIA_DETALHAMENTO AS EFECF_REDUCAO_Z_SITUACAO_TRIBUTARIA_DETALHAMENTO ON EFECF_REDUCAO_Z_SITUACAO_TRIBUTARIA_DETALHAMENTO.CODI_EMP = EFECF_REDUCAO_Z_SITUACAO_TRIBUTARIA.CODI_EMP AND EFECF_REDUCAO_Z_SITUACAO_TRIBUTARIA_DETALHAMENTO.I_REDUCAO = EFECF_REDUCAO_Z_SITUACAO_TRIBUTARIA.I_REDUCAO AND EFECF_REDUCAO_Z_SITUACAO_TRIBUTARIA_DETALHAMENTO.I_SITUACAO = EFECF_REDUCAO_Z_SITUACAO_TRIBUTARIA.I_SITUACAO WHERE EFECF_REDUCAO_Z_SITUACAO_TRIBUTARIA_DETALHAMENTO.CODI_EMP = EFECF_REDUCAO_Z_IMPOSTOS.CODI_EMP AND EFECF_REDUCAO_Z_SITUACAO_TRIBUTARIA_DETALHAMENTO.I_REDUCAO = EFECF_REDUCAO_Z_IMPOSTOS.I_REDUCAO AND EFECF_REDUCAO_Z_SITUACAO_TRIBUTARIA_DETALHAMENTO.CODI_ACU = EFECF_REDUCAO_Z_IMPOSTOS.CODI_ACU AND EFECF_REDUCAO_Z_SITUACAO_TRIBUTARIA_DETALHAMENTO.CODI_NAT = EFECF_REDUCAO_Z_IMPOSTOS.CODI_NAT AND EFECF_REDUCAO_Z_SITUACAO_TRIBUTARIA_DETALHAMENTO.VERSAO_NAT = EFECF_REDUCAO_Z_IMPOSTOS.VERSAO_NAT AND EFECF_REDUCAO_Z_IMPOSTOS.CODI_IMP = 3 AND EFECF_REDUCAO_Z_SITUACAO_TRIBUTARIA.OPERACAO IN (11, 13) AND GEEMPRE.ESTA_EMP IN ('SP', 'MT')) AS TDCANC_DESCONTO, LATERAL(SELECT EFECF_REDUCAO_Z_IMPOSTOS.VALOR_CONTABIL AS VALOR_CONTABIL FROM DSDBA.DUMMY) AS TDAUX, LATERAL(SELECT CASE WHEN NOT (EMISSORA.TINS_EMP IN (3, 6)) THEN EMISSORA.CGCE_EMP ELSE COALESCE(DSDBA.S_BUSCA_ALTERACAO_EMPRESA(EMISSORA.CODI_EMP, '{data_inicio}', 21), EMISSORA.CPF_LEG_EMP, '') END AS CGCEEMP, COALESCE(DSDBA.S_BUSCA_ALTERACAO_EMPRESA(EMISSORA.CODI_EMP, '{data_inicio}', 12), EMISSORA.IEST_EMP) AS IESTEMP, COALESCE(DSDBA.S_BUSCA_ALTERACAO_EMPRESA(EMISSORA.CODI_EMP, '{data_inicio}', 2), EMISSORA.RAZAO_EMP) AS NOMEEMP, COALESCE(DSDBA.S_BUSCA_ALTERACAO_EMPRESA(EMISSORA.CODI_EMP, '{data_inicio}', 9), EMISSORA.ESTA_EMP) AS ESTAEMP FROM BETHADBA.GEEMPRE AS EMISSORA WHERE EMISSORA.CODI_EMP = {cod_emp}) AS TD_DADOS_EMPRESA, LATERAL(SELECT CASE WHEN COALESCE(TDAUX.VALOR_CONTABIL, 0) - TDCANC_DESCONTO.VALOR <= 0 THEN 0 ELSE COALESCE(TDAUX.VALOR_CONTABIL, 0) - TDCANC_DESCONTO.VALOR END AS VCON FROM DSDBA.DUMMY) AS TDVALORES, LATERAL(SELECT CASE WHEN 0 = 0 THEN 'S' WHEN 0 = 1 AND EFPARAMETRO_VIGENCIA.CENTRAL_PAR IN(2, 3) THEN 'S' WHEN 0 = 1 AND EFPARAMETRO_VIGENCIA.APURACAO_CENTRALIZADA IN(2, 3) THEN 'S' ELSE 'N' END AS GERA_REGISTRO FROM DSDBA.DUMMY) AS TDCENTRALIZA WHERE EFECF_REDUCAO_Z.CODI_EMP IN ({cod_emp}) AND EFECF_REDUCAO_Z.DATA_REDUCAO >= '{data_inicio}' AND EFECF_REDUCAO_Z.DATA_REDUCAO <= '{data_fim}' AND TDCENTRALIZA.GERA_REGISTRO = 'S' AND EFECF_REDUCAO_Z_IMPOSTOS.CODI_IMP = 3 AND GEEMPRE.ESTA_EMP IN ('SP', 'MT') AND EFPARAMETRO_VIGENCIA.VIGENCIA_PAR = DSDBA.D_BUSCA_VIGENCIA_PARAMETRO(EFECF_REDUCAO_Z.CODI_EMP, EFECF_REDUCAO_Z.DATA_REDUCAO) AND NOT(TDCANC_DESCONTO.TEM_CANC_DESC = 'S' AND EFECF_REDUCAO_Z_IMPOSTOS.CODI_NAT = 5949) GROUP BY EFECF_REDUCAO_Z_IMPOSTOS.CODI_NAT, EFECF_REDUCAO_Z_IMPOSTOS.CODI_EMP, GEEMPRE.TINS_EMP, TD_DADOS_EMPRESA.IESTEMP, TD_DADOS_EMPRESA.CGCEEMP, TD_DADOS_EMPRESA.NOMEEMP, EFECF_REDUCAO_Z_IMPOSTOS.CODI_EMP, TD_DADOS_EMPRESA.ESTAEMP UNION ALL SELECT 3 AS QUADRO, 1 AS ORDE, EFECF_REDUCAO_Z_IMPOSTOS.CODI_NAT AS CODINAT, 0 AS CODINAT1, COALESCE(SUM(TDVALORES.VCON), 0) AS VCON, COALESCE(SUM(TDVALORES.BCAL), 0) AS BCAL, COALESCE(SUM(TDVALORES.VICM), 0) AS VICM, COALESCE(SUM(TDVALORES.IICM), 0) AS IICM, COALESCE(SUM(TDVALORES.OICM), 0) AS OICM, EFECF_REDUCAO_Z_IMPOSTOS.CODI_EMP AS CEMP, {livro_num} AS LIVRO, {pagina_num} AS PAGINA, GEEMPRE.TINS_EMP AS TINSEMP, TD_DADOS_EMPRESA.IESTEMP AS IESTEMP, TD_DADOS_EMPRESA.CGCEEMP AS CGCEEMP, TD_DADOS_EMPRESA.NOMEEMP AS NOMEEMP, TD_DADOS_EMPRESA.ESTAEMP AS ESTAEMP, EFECF_REDUCAO_Z_IMPOSTOS.CODI_EMP AS CODI_EMP FROM BETHADBA.EFECF_REDUCAO_Z AS EFECF_REDUCAO_Z INNER JOIN BETHADBA.EFECF_REDUCAO_Z_IMPOSTOS AS EFECF_REDUCAO_Z_IMPOSTOS ON EFECF_REDUCAO_Z_IMPOSTOS.CODI_EMP = EFECF_REDUCAO_Z.CODI_EMP AND EFECF_REDUCAO_Z_IMPOSTOS.I_REDUCAO = EFECF_REDUCAO_Z.I_REDUCAO INNER JOIN BETHADBA.GEEMPRE AS GEEMPRE ON GEEMPRE.CODI_EMP = EFECF_REDUCAO_Z.CODI_EMP INNER JOIN BETHADBA.EFPARAMETRO_VIGENCIA AS EFPARAMETRO_VIGENCIA ON EFPARAMETRO_VIGENCIA.CODI_EMP = EFECF_REDUCAO_Z.CODI_EMP, LATERAL(SELECT COALESCE(MAX('S'), 'N') AS SIMPLES_NACIONAL FROM DSDBA.DUMMY WHERE EFPARAMETRO_VIGENCIA.SIMPLESN_OPTANTE_PAR = 'S' AND EFPARAMETRO_VIGENCIA.SIMPLESN_ULTRAPASSOU_PAR = 'N' AND EFPARAMETRO_VIGENCIA.SIMPLESN_ICMS_NORMAL_PAR = 'N') AS TDSIMPLES, LATERAL(SELECT COALESCE(SUM(EFECF_REDUCAO_Z_IMPOSTOS_ISS.BASE_CALCULO), 0) AS BASE_CALCULO, COALESCE(SUM(EFECF_REDUCAO_Z_IMPOSTOS_ISS.ISENTAS), 0) AS ISENTAS, COALESCE(SUM(EFECF_REDUCAO_Z_IMPOSTOS_ISS.OUTROS), 0) AS OUTROS FROM BETHADBA.EFECF_REDUCAO_Z_IMPOSTOS AS EFECF_REDUCAO_Z_IMPOSTOS_ISS WHERE EFECF_REDUCAO_Z_IMPOSTOS_ISS.CODI_EMP = EFECF_REDUCAO_Z_IMPOSTOS.CODI_EMP AND EFECF_REDUCAO_Z_IMPOSTOS_ISS.I_REDUCAO = EFECF_REDUCAO_Z_IMPOSTOS.I_REDUCAO AND EFECF_REDUCAO_Z_IMPOSTOS_ISS.CODI_IMP = 3) AS TDEFECF_REDUCAO_Z_IMPOSTOS_ISS, LATERAL(SELECT COALESCE(MAX('S'), 'N') AS TEM_CANC_DESC, COALESCE(SUM(EFECF_REDUCAO_Z_SITUACAO_TRIBUTARIA.VALOR), 0) AS VALOR FROM BETHADBA.EFECF_REDUCAO_Z_SITUACAO_TRIBUTARIA AS EFECF_REDUCAO_Z_SITUACAO_TRIBUTARIA INNER JOIN BETHADBA.EFECF_REDUCAO_Z_SITUACAO_TRIBUTARIA_DETALHAMENTO AS EFECF_REDUCAO_Z_SITUACAO_TRIBUTARIA_DETALHAMENTO ON EFECF_REDUCAO_Z_SITUACAO_TRIBUTARIA_DETALHAMENTO.CODI_EMP = EFECF_REDUCAO_Z_SITUACAO_TRIBUTARIA.CODI_EMP AND EFECF_REDUCAO_Z_SITUACAO_TRIBUTARIA_DETALHAMENTO.I_REDUCAO = EFECF_REDUCAO_Z_SITUACAO_TRIBUTARIA.I_REDUCAO AND EFECF_REDUCAO_Z_SITUACAO_TRIBUTARIA_DETALHAMENTO.I_SITUACAO = EFECF_REDUCAO_Z_SITUACAO_TRIBUTARIA.I_SITUACAO WHERE EFECF_REDUCAO_Z_SITUACAO_TRIBUTARIA_DETALHAMENTO.CODI_EMP = EFECF_REDUCAO_Z_IMPOSTOS.CODI_EMP AND EFECF_REDUCAO_Z_SITUACAO_TRIBUTARIA_DETALHAMENTO.I_REDUCAO = EFECF_REDUCAO_Z_IMPOSTOS.I_REDUCAO AND EFECF_REDUCAO_Z_SITUACAO_TRIBUTARIA_DETALHAMENTO.CODI_ACU = EFECF_REDUCAO_Z_IMPOSTOS.CODI_ACU AND EFECF_REDUCAO_Z_SITUACAO_TRIBUTARIA_DETALHAMENTO.CODI_NAT = EFECF_REDUCAO_Z_IMPOSTOS.CODI_NAT AND EFECF_REDUCAO_Z_SITUACAO_TRIBUTARIA_DETALHAMENTO.VERSAO_NAT = EFECF_REDUCAO_Z_IMPOSTOS.VERSAO_NAT AND ((EFECF_REDUCAO_Z_IMPOSTOS.CODI_IMP = 1 AND EFECF_REDUCAO_Z_SITUACAO_TRIBUTARIA.OPERACAO IN (04, 06)) OR (EFECF_REDUCAO_Z_IMPOSTOS.CODI_IMP = 3 AND EFECF_REDUCAO_Z_SITUACAO_TRIBUTARIA.OPERACAO IN (11, 13)) )) AS TDCANC_DESCONTO, LATERAL(SELECT EFECF_REDUCAO_Z_IMPOSTOS.VALOR_CONTABIL AS VALOR_CONTABIL, CASE WHEN EFECF_REDUCAO_Z_IMPOSTOS.CODI_IMP = 1 THEN EFECF_REDUCAO_Z_IMPOSTOS.BASE_CALCULO ELSE 0 END AS BASE_CALCULO, CASE WHEN EFECF_REDUCAO_Z_IMPOSTOS.CODI_IMP = 1 THEN EFECF_REDUCAO_Z_IMPOSTOS.IMPOSTO ELSE 0 END AS IMPOSTO, CASE WHEN EFECF_REDUCAO_Z_IMPOSTOS.CODI_IMP = 3 THEN EFECF_REDUCAO_Z_IMPOSTOS.BASE_CALCULO ELSE 0 END + COALESCE(EFECF_REDUCAO_Z_IMPOSTOS.ISENTAS, 0) + COALESCE(EFECF_REDUCAO_Z_IMPOSTOS.NAO_TRIBUTADAS, 0) + COALESCE(EFECF_REDUCAO_Z_IMPOSTOS.PARCELA_REDUZIDA, 0) AS ISENTAS, COALESCE(EFECF_REDUCAO_Z_IMPOSTOS.OUTROS, 0) AS OUTROS FROM DSDBA.DUMMY) AS TDAUX, LATERAL(SELECT CASE WHEN NOT (EMISSORA.TINS_EMP IN (3, 6)) THEN EMISSORA.CGCE_EMP ELSE COALESCE(DSDBA.S_BUSCA_ALTERACAO_EMPRESA(EMISSORA.CODI_EMP, '{data_inicio}', 21), EMISSORA.CPF_LEG_EMP, '') END AS CGCEEMP, COALESCE(DSDBA.S_BUSCA_ALTERACAO_EMPRESA(EMISSORA.CODI_EMP, '{data_inicio}', 12), EMISSORA.IEST_EMP) AS IESTEMP, COALESCE(DSDBA.S_BUSCA_ALTERACAO_EMPRESA(EMISSORA.CODI_EMP, '{data_inicio}', 2), EMISSORA.RAZAO_EMP) AS NOMEEMP, COALESCE(DSDBA.S_BUSCA_ALTERACAO_EMPRESA(EMISSORA.CODI_EMP, '{data_inicio}', 9), EMISSORA.ESTA_EMP) AS ESTAEMP FROM BETHADBA.GEEMPRE AS EMISSORA WHERE EMISSORA.CODI_EMP = {cod_emp}) AS TD_DADOS_EMPRESA, LATERAL(SELECT CASE WHEN COALESCE(TDAUX.VALOR_CONTABIL, 0) - TDCANC_DESCONTO.VALOR <= 0 THEN 0 ELSE COALESCE(TDAUX.VALOR_CONTABIL, 0) - TDCANC_DESCONTO.VALOR END AS VCON, CASE WHEN TDSIMPLES.SIMPLES_NACIONAL = 'S' THEN 0 ELSE COALESCE(TDAUX.BASE_CALCULO, 0) END AS BCAL, CASE WHEN TDSIMPLES.SIMPLES_NACIONAL = 'S' THEN 0 ELSE COALESCE(TDAUX.IMPOSTO, 0) END AS VICM, CASE WHEN TDSIMPLES.SIMPLES_NACIONAL = 'S' THEN 0 ELSE COALESCE(TDAUX.ISENTAS, 0) END AS IICM, CASE WHEN TDSIMPLES.SIMPLES_NACIONAL = 'S' THEN CASE WHEN COALESCE(TDAUX.VALOR_CONTABIL, 0) - TDCANC_DESCONTO.VALOR <= 0 THEN 0 ELSE COALESCE(TDAUX.VALOR_CONTABIL, 0) - TDCANC_DESCONTO.VALOR END ELSE CASE WHEN COALESCE(TDAUX.OUTROS, 0) - TDCANC_DESCONTO.VALOR <= 0 THEN 0 ELSE COALESCE(TDAUX.OUTROS, 0) - TDCANC_DESCONTO.VALOR END END AS OICM FROM DSDBA.DUMMY) AS TDVALORES, LATERAL(SELECT CASE WHEN 0 = 0 THEN 'S' WHEN 0 = 1 AND EFPARAMETRO_VIGENCIA.CENTRAL_PAR IN(2, 3) THEN 'S' WHEN 0 = 1 AND EFPARAMETRO_VIGENCIA.APURACAO_CENTRALIZADA IN(2, 3) THEN 'S' ELSE 'N' END AS GERA_REGISTRO FROM DSDBA.DUMMY) AS TDCENTRALIZA WHERE EFECF_REDUCAO_Z.CODI_EMP IN ({cod_emp}) AND EFECF_REDUCAO_Z.DATA_REDUCAO >= '{data_inicio}' AND EFECF_REDUCAO_Z.DATA_REDUCAO <= '{data_fim}' AND TDCENTRALIZA.GERA_REGISTRO = 'S' AND EFECF_REDUCAO_Z_IMPOSTOS.CODI_IMP = 1 AND EFPARAMETRO_VIGENCIA.VIGENCIA_PAR = DSDBA.D_BUSCA_VIGENCIA_PARAMETRO(EFECF_REDUCAO_Z.CODI_EMP, EFECF_REDUCAO_Z.DATA_REDUCAO) AND NOT(TDCANC_DESCONTO.TEM_CANC_DESC = 'S' AND EFECF_REDUCAO_Z_IMPOSTOS.CODI_NAT = 5949) AND GEEMPRE.ESTA_EMP = 'GO' GROUP BY EFECF_REDUCAO_Z_IMPOSTOS.CODI_NAT, EFECF_REDUCAO_Z_IMPOSTOS.CODI_EMP, GEEMPRE.TINS_EMP, TD_DADOS_EMPRESA.IESTEMP, TD_DADOS_EMPRESA.CGCEEMP, TD_DADOS_EMPRESA.NOMEEMP, EFECF_REDUCAO_Z_IMPOSTOS.CODI_EMP, TD_DADOS_EMPRESA.ESTAEMP UNION ALL SELECT 3 AS QUADRO, 1 AS ORDE, MOVIMENTO_DIARIO_BILHETE.CODI_NAT AS CODINAT, 0 AS CODINAT1, COALESCE(SUM(TDMOVIMENTO_DIARIO_BILHETE_IMPOSTOS_ICMS.VALOR_CONTABIL), 0) AS VCON, COALESCE(SUM(TDMOVIMENTO_DIARIO_BILHETE_IMPOSTOS_ICMS.BASE_CALCULO), 0) AS BCAL, COALESCE(SUM(TDMOVIMENTO_DIARIO_BILHETE_IMPOSTOS_ICMS.VALOR_IMPOSTO), 0) AS VICM, COALESCE(SUM(TDMOVIMENTO_DIARIO_BILHETE_IMPOSTOS_ICMS.ISENTAS), 0) AS IICM, COALESCE(SUM(TDMOVIMENTO_DIARIO_BILHETE_IMPOSTOS_ICMS.OUTROS), 0) AS OICM, MOVIMENTO_DIARIO.CODI_EMP AS CEMP, {livro_num} AS LIVRO, {pagina_num} AS PAGINA, GEEMPRE.TINS_EMP AS TINSEMP, TD_DADOS_EMPRESA.IESTEMP AS IESTEMP, TD_DADOS_EMPRESA.CGCEEMP AS CGCEEMP, TD_DADOS_EMPRESA.NOMEEMP AS NOMEEMP, TD_DADOS_EMPRESA.ESTAEMP AS ESTAEMP, MOVIMENTO_DIARIO.CODI_EMP AS CODI_EMP FROM BETHADBA.EFRESUMO_MOVIMENTO_DIARIO AS MOVIMENTO_DIARIO INNER JOIN BETHADBA.EFRESUMO_MOVIMENTO_DIARIO_BILHETE AS MOVIMENTO_DIARIO_BILHETE ON MOVIMENTO_DIARIO_BILHETE.CODI_EMP = MOVIMENTO_DIARIO.CODI_EMP AND MOVIMENTO_DIARIO_BILHETE.I_RESUMO = MOVIMENTO_DIARIO.I_RESUMO INNER JOIN BETHADBA.GEEMPRE AS GEEMPRE ON GEEMPRE.CODI_EMP = MOVIMENTO_DIARIO.CODI_EMP INNER JOIN BETHADBA.EFESPECIES AS EFESPECIES ON EFESPECIES.CODI_ESP = MOVIMENTO_DIARIO_BILHETE.CODI_ESP, LATERAL(SELECT SUM(MOVIMENTO_DIARIO_BILHETE_IMPOSTOS.VALOR_CONTABIL) AS VALOR_CONTABIL, SUM(MOVIMENTO_DIARIO_BILHETE_IMPOSTOS.BASE_CALCULO) AS BASE_CALCULO, SUM(MOVIMENTO_DIARIO_BILHETE_IMPOSTOS.ISENTAS) AS ISENTAS, SUM(MOVIMENTO_DIARIO_BILHETE_IMPOSTOS.OUTROS) AS OUTROS, SUM(MOVIMENTO_DIARIO_BILHETE_IMPOSTOS.VALOR_IMPOSTO) AS VALOR_IMPOSTO FROM BETHADBA.EFRESUMO_MOVIMENTO_DIARIO_BILHETE_IMPOSTOS AS MOVIMENTO_DIARIO_BILHETE_IMPOSTOS WHERE MOVIMENTO_DIARIO_BILHETE_IMPOSTOS.CODI_EMP = MOVIMENTO_DIARIO_BILHETE.CODI_EMP AND MOVIMENTO_DIARIO_BILHETE_IMPOSTOS.I_RESUMO = MOVIMENTO_DIARIO_BILHETE.I_RESUMO AND MOVIMENTO_DIARIO_BILHETE_IMPOSTOS.I_BILHETE = MOVIMENTO_DIARIO_BILHETE.I_BILHETE AND MOVIMENTO_DIARIO_BILHETE_IMPOSTOS.CODI_IMP = 1) AS TDMOVIMENTO_DIARIO_BILHETE_IMPOSTOS_ICMS, LATERAL(SELECT CASE WHEN NOT (GEEMPRE.TINS_EMP IN (3, 6)) THEN GEEMPRE.CGCE_EMP ELSE COALESCE(DSDBA.S_BUSCA_ALTERACAO_EMPRESA(GEEMPRE.CODI_EMP, '{data_inicio}', 21), GEEMPRE.CPF_LEG_EMP, '') END AS CGCEEMP, COALESCE(DSDBA.S_BUSCA_ALTERACAO_EMPRESA(GEEMPRE.CODI_EMP, '{data_inicio}', 12), GEEMPRE.IEST_EMP) AS IESTEMP, COALESCE(DSDBA.S_BUSCA_ALTERACAO_EMPRESA(GEEMPRE.CODI_EMP, '{data_inicio}', 2), GEEMPRE.RAZAO_EMP) AS NOMEEMP, COALESCE(DSDBA.S_BUSCA_ALTERACAO_EMPRESA(GEEMPRE.CODI_EMP, '{data_inicio}', 9), GEEMPRE.ESTA_EMP) AS ESTAEMP FROM DSDBA.DUMMY) AS TD_DADOS_EMPRESA WHERE MOVIMENTO_DIARIO.CODI_EMP = {cod_emp} AND MOVIMENTO_DIARIO.DATA_EMISSAO >= '{data_inicio}' AND MOVIMENTO_DIARIO.DATA_EMISSAO <= '{data_fim}' AND EFESPECIES.DOCUMENTO_NAO_FISCAL = 'N' AND NOT(GEEMPRE.ESTA_EMP = 'GO') GROUP BY MOVIMENTO_DIARIO.CODI_EMP, MOVIMENTO_DIARIO_BILHETE.CODI_NAT, MOVIMENTO_DIARIO.CODI_EMP, GEEMPRE.TINS_EMP, TD_DADOS_EMPRESA.IESTEMP, TD_DADOS_EMPRESA.CGCEEMP, TD_DADOS_EMPRESA.NOMEEMP, TD_DADOS_EMPRESA.ESTAEMP UNION ALL SELECT 3 AS QUADRO, 1 AS ORDE, MOVIMENTO_DIARIO_BILHETE.CODI_NAT AS CODINAT, 0 AS CODINAT1, COALESCE(SUM(TDMOVIMENTO_DIARIO_BILHETE_IMPOSTOS_ISS.VALOR_CONTABIL), 0) AS VCON, 0 AS BCAL, 0 AS VICM, SUM(CASE WHEN EFPARAMETRO_VIGENCIA.GERAR_SAIDA_SEM_ICMS_EM = 'I' THEN COALESCE(TDMOVIMENTO_DIARIO_BILHETE_IMPOSTOS_ISS.VALOR_CONTABIL, 0) ELSE 0 END) AS IICM, SUM(CASE WHEN EFPARAMETRO_VIGENCIA.GERAR_SAIDA_SEM_ICMS_EM = 'O' THEN COALESCE(TDMOVIMENTO_DIARIO_BILHETE_IMPOSTOS_ISS.VALOR_CONTABIL, 0) ELSE 0 END) AS OICM, MOVIMENTO_DIARIO.CODI_EMP AS CEMP, {livro_num} AS LIVRO, {pagina_num} AS PAGINA, GEEMPRE.TINS_EMP AS TINSEMP, TD_DADOS_EMPRESA.IESTEMP AS IESTEMP, TD_DADOS_EMPRESA.CGCEEMP AS CGCEEMP, TD_DADOS_EMPRESA.NOMEEMP AS NOMEEMP, TD_DADOS_EMPRESA.ESTAEMP AS ESTAEMP, MOVIMENTO_DIARIO.CODI_EMP AS CODI_EMP FROM BETHADBA.EFRESUMO_MOVIMENTO_DIARIO AS MOVIMENTO_DIARIO INNER JOIN BETHADBA.EFRESUMO_MOVIMENTO_DIARIO_BILHETE AS MOVIMENTO_DIARIO_BILHETE ON MOVIMENTO_DIARIO_BILHETE.CODI_EMP = MOVIMENTO_DIARIO.CODI_EMP AND MOVIMENTO_DIARIO_BILHETE.I_RESUMO = MOVIMENTO_DIARIO.I_RESUMO INNER JOIN BETHADBA.GEEMPRE AS GEEMPRE ON GEEMPRE.CODI_EMP = MOVIMENTO_DIARIO.CODI_EMP INNER JOIN BETHADBA.EFESPECIES AS EFESPECIES ON EFESPECIES.CODI_ESP = MOVIMENTO_DIARIO_BILHETE.CODI_ESP INNER JOIN BETHADBA.EFPARAMETRO_VIGENCIA AS EFPARAMETRO_VIGENCIA ON EFPARAMETRO_VIGENCIA.CODI_EMP = MOVIMENTO_DIARIO.CODI_EMP AND EFPARAMETRO_VIGENCIA.VIGENCIA_PAR = DSDBA.D_BUSCA_VIGENCIA_PARAMETRO(MOVIMENTO_DIARIO.CODI_EMP, MOVIMENTO_DIARIO.DATA_EMISSAO), LATERAL(SELECT SUM(MOVIMENTO_DIARIO_BILHETE_IMPOSTOS.VALOR_CONTABIL) AS VALOR_CONTABIL FROM BETHADBA.EFRESUMO_MOVIMENTO_DIARIO_BILHETE_IMPOSTOS AS MOVIMENTO_DIARIO_BILHETE_IMPOSTOS WHERE MOVIMENTO_DIARIO_BILHETE_IMPOSTOS.CODI_EMP = MOVIMENTO_DIARIO_BILHETE.CODI_EMP AND MOVIMENTO_DIARIO_BILHETE_IMPOSTOS.I_RESUMO = MOVIMENTO_DIARIO_BILHETE.I_RESUMO AND MOVIMENTO_DIARIO_BILHETE_IMPOSTOS.I_BILHETE = MOVIMENTO_DIARIO_BILHETE.I_BILHETE AND MOVIMENTO_DIARIO_BILHETE_IMPOSTOS.CODI_IMP = 3) AS TDMOVIMENTO_DIARIO_BILHETE_IMPOSTOS_ISS, LATERAL(SELECT CASE WHEN NOT (GEEMPRE.TINS_EMP IN (3, 6)) THEN GEEMPRE.CGCE_EMP ELSE COALESCE(DSDBA.S_BUSCA_ALTERACAO_EMPRESA(GEEMPRE.CODI_EMP, '{data_inicio}', 21), GEEMPRE.CPF_LEG_EMP, '') END AS CGCEEMP, COALESCE(DSDBA.S_BUSCA_ALTERACAO_EMPRESA(GEEMPRE.CODI_EMP, '{data_inicio}', 12), GEEMPRE.IEST_EMP) AS IESTEMP, COALESCE(DSDBA.S_BUSCA_ALTERACAO_EMPRESA(GEEMPRE.CODI_EMP, '{data_inicio}', 2), GEEMPRE.RAZAO_EMP) AS NOMEEMP, COALESCE(DSDBA.S_BUSCA_ALTERACAO_EMPRESA(GEEMPRE.CODI_EMP, '{data_inicio}', 9), GEEMPRE.ESTA_EMP) AS ESTAEMP FROM DSDBA.DUMMY) AS TD_DADOS_EMPRESA WHERE MOVIMENTO_DIario.CODI_EMP = {cod_emp} AND MOVIMENTO_DIARIO.DATA_EMISSAO >= '{data_inicio}' AND MOVIMENTO_DIARIO.DATA_EMISSAO <= '{data_fim}' AND EFESPECIES.DOCUMENTO_NAO_FISCAL = 'N' AND NOT(GEEMPRE.ESTA_EMP = 'GO') GROUP BY MOVIMENTO_DIARIO.CODI_EMP, MOVIMENTO_DIARIO_BILHETE.CODI_NAT, MOVIMENTO_DIARIO.CODI_EMP, GEEMPRE.TINS_EMP, TD_DADOS_EMPRESA.IESTEMP, TD_DADOS_EMPRESA.CGCEEMP, TD_DADOS_EMPRESA.NOMEEMP, TD_DADOS_EMPRESA.ESTAEMP UNION ALL SELECT 3 AS QUADRO, 1 AS ORDE, MOVIMENTO_DIARIO_BILHETE.CODI_NAT AS CODINAT, 0 AS CODINAT1, SUM(COALESCE(TDAUX.VALOR_CONTABIL, 0)) AS VCON, SUM(COALESCE(TDAUX.BASE_CALCULO, 0)) AS BCAL, SUM(COALESCE(TDAUX.VALOR_IMPOSTO, 0)) AS VICM, SUM(COALESCE(TDAUX.ISENTAS, 0)) AS IICM, SUM(COALESCE(TDAUX.OUTROS, 0)) AS OICM, GEEMPRE.CODI_EMP AS CEMP, {livro_num} AS LIVRO, {pagina_num} AS PAGINA, GEEMPRE.TINS_EMP AS TINSEMP, TDAUX.IESTEMP AS IESTEMP, TDAUX.CGCEEMP AS CGCEEMP, TDAUX.NOMEEMP AS NOMEEMP, TDAUX.ESTAEMP AS ESTAEMP, MOVIMENTO_DIARIO.CODI_EMP AS CODI_EMP FROM BETHADBA.EFRESUMO_MOVIMENTO_DIARIO AS MOVIMENTO_DIARIO INNER JOIN BETHADBA.EFRESUMO_MOVIMENTO_DIARIO_BILHETE AS MOVIMENTO_DIARIO_BILHETE ON MOVIMENTO_DIARIO_BILHETE.CODI_EMP = MOVIMENTO_DIARIO.CODI_EMP AND MOVIMENTO_DIARIO_BILHETE.I_RESUMO = MOVIMENTO_DIARIO.I_RESUMO INNER JOIN BETHADBA.EFESPECIES AS EFESPECIES ON EFESPECIES.CODI_ESP = MOVIMENTO_DIARIO_BILHETE.CODI_ESP INNER JOIN BETHADBA.EFPARAMETRO_VIGENCIA AS EFPARAMETRO_VIGENCIA ON EFPARAMETRO_VIGENCIA.CODI_EMP = MOVIMENTO_DIARIO_BILHETE.CODI_EMP INNER JOIN BETHADBA.GEEMPRE AS GEEMPRE ON MOVIMENTO_DIARIO.CODI_EMP = GEEMPRE.CODI_EMP, LATERAL(SELECT COALESCE(MAX('S'), 'N') AS SIMPLES_NACIONAL FROM DSDBA.DUMMY WHERE EFPARAMETRO_VIGENCIA.SIMPLESN_OPTANTE_PAR = 'S' AND EFPARAMETRO_VIGENCIA.SIMPLESN_ULTRAPASSOU_PAR = 'N' AND EFPARAMETRO_VIGENCIA.SIMPLESN_ICMS_NORMAL_PAR = 'N') AS TDSIMPLES, LATERAL(SELECT SUM(MOVIMENTO_DIARIO_BILHETE_IMPOSTOS.BASE_CALCULO) AS BASE_CALCULO, SUM(MOVIMENTO_DIARIO_BILHETE_IMPOSTOS.ISENTAS) AS ISENTAS, SUM(MOVIMENTO_DIARIO_BILHETE_IMPOSTOS.OUTROS) AS OUTROS, SUM(MOVIMENTO_DIARIO_BILHETE_IMPOSTOS.VALOR_IMPOSTO) AS VALOR_IMPOSTO FROM BETHADBA.EFRESUMO_MOVIMENTO_DIARIO_BILHETE_IMPOSTOS AS MOVIMENTO_DIARIO_BILHETE_IMPOSTOS WHERE MOVIMENTO_DIARIO_BILHETE_IMPOSTOS.CODI_EMP = MOVIMENTO_DIARIO_BILHETE.CODI_EMP AND MOVIMENTO_DIARIO_BILHETE_IMPOSTOS.I_RESUMO = MOVIMENTO_DIARIO_BILHETE.I_RESUMO AND MOVIMENTO_DIARIO_BILHETE_IMPOSTOS.I_BILHETE = MOVIMENTO_DIARIO_BILHETE.I_BILHETE AND MOVIMENTO_DIARIO_BILHETE_IMPOSTOS.CODI_IMP = 1) AS TD_ICMS, LATERAL(SELECT SUM(MOVIMENTO_DIARIO_BILHETE_IMPOSTOS.BASE_CALCULO) AS BASE_CALCULO, SUM(MOVIMENTO_DIARIO_BILHETE_IMPOSTOS.ISENTAS) AS ISENTAS, SUM(MOVIMENTO_DIARIO_BILHETE_IMPOSTOS.OUTROS) AS OUTROS FROM BETHADBA.EFRESUMO_MOVIMENTO_DIARIO_BILHETE_IMPOSTOS AS MOVIMENTO_DIARIO_BILHETE_IMPOSTOS WHERE MOVIMENTO_DIARIO_BILHETE_IMPOSTOS.CODI_EMP = MOVIMENTO_DIARIO_BILHETE.CODI_EMP AND MOVIMENTO_DIARIO_BILHETE_IMPOSTOS.I_RESUMO = MOVIMENTO_DIARIO_BILHETE.I_RESUMO AND MOVIMENTO_DIARIO_BILHETE_IMPOSTOS.I_BILHETE = MOVIMENTO_DIARIO_BILHETE.I_BILHETE AND MOVIMENTO_DIARIO_BILHETE_IMPOSTOS.CODI_IMP = 3) AS TD_ISS, LATERAL(SELECT COALESCE(MOVIMENTO_DIARIO.VALOR_TOTAL ,0) AS VALOR_CONTABIL, CASE WHEN TDSIMPLES.SIMPLES_NACIONAL = 'S' THEN 0 ELSE TD_ICMS.BASE_CALCULO END AS BASE_CALCULO, CASE WHEN TDSIMPLES.SIMPLES_NACIONAL = 'S' THEN 0 ELSE TD_ICMS.VALOR_IMPOSTO END AS VALOR_IMPOSTO, CASE WHEN TDSIMPLES.SIMPLES_NACIONAL = 'S' THEN 0 ELSE COALESCE(TD_ICMS.ISENTAS, 0) + COALESCE(TD_ISS.BASE_CALCULO, 0) + COALESCE(TD_ISS.ISENTAS, 0) END AS ISENTAS, CASE WHEN TDSIMPLES.SIMPLES_NACIONAL = 'S' THEN COALESCE(MOVIMENTO_DIARIO.VALOR_TOTAL ,0) ELSE COALESCE(TD_ICMS.OUTROS, 0) + COALESCE(TD_ISS.OUTROS, 0) END AS OUTROS, CASE WHEN NOT (GEEMPRE.TINS_EMP IN (3, 6)) THEN GEEMPRE.CGCE_EMP ELSE COALESCE(DSDBA.S_BUSCA_ALTERACAO_EMPRESA(GEEMPRE.CODI_EMP, '{data_inicio}', 21), GEEMPRE.CPF_LEG_EMP,'') END AS CGCEEMP, COALESCE(DSDBA.S_BUSCA_ALTERACAO_EMPRESA(GEEMPRE.CODI_EMP, '{data_inicio}', 12), GEEMPRE.IEST_EMP) AS IESTEMP, COALESCE(DSDBA.S_BUSCA_ALTERACAO_EMPRESA(GEEMPRE.CODI_EMP, '{data_inicio}', 2), GEEMPRE.RAZAO_EMP) AS NOMEEMP, COALESCE(DSDBA.S_BUSCA_ALTERACAO_EMPRESA(GEEMPRE.CODI_EMP, '{data_inicio}', 9), GEEMPRE.ESTA_EMP) AS ESTAEMP FROM DSDBA.DUMMY) AS TDAUX WHERE MOVIMENTO_DIARIO.CODI_EMP = {cod_emp} AND MOVIMENTO_DIARIO.DATA_EMISSAO BETWEEN '{data_inicio}' AND '{data_fim}' AND EFPARAMETRO_VIGENCIA.VIGENCIA_PAR = DSDBA.D_BUSCA_VIGENCIA_PARAMETRO(MOVIMENTO_DIARIO.CODI_EMP, MOVIMENTO_DIARIO.DATA_EMISSAO) AND EFESPECIES.DOCUMENTO_NAO_FISCAL = 'N' AND GEEMPRE.ESTA_EMP = 'GO' GROUP BY GEEMPRE.CODI_EMP, MOVIMENTO_DIARIO_BILHETE.CODI_NAT, MOVIMENTO_DIARIO.CODI_EMP, GEEMPRE.TINS_EMP, TDAUX.IESTEMP, TDAUX.CGCEEMP, TDAUX.NOMEEMP, TDAUX.ESTAEMP UNION ALL SELECT 3 AS QUADRO, 1 AS ORDE, EFECF_REDUCAO_Z_BILHETE_IMPOSTOS.CODI_NAT AS CODINAT, 0 AS CODINAT1, COALESCE(SUM(TDAUX.VALOR_CONTABIL), 0) AS VCON, COALESCE(SUM(EFECF_REDUCAO_Z_BILHETE_IMPOSTOS.BASE_CALCULO), 0) AS BCAL, COALESCE(SUM(EFECF_REDUCAO_Z_BILHETE_IMPOSTOS.IMPOSTO), 0) AS VICM, COALESCE(SUM(TDAUX.IICM), 0) AS IICM, COALESCE(SUM(TDAUX.OICM), 0) AS OICM, EFECF_REDUCAO_Z_BILHETE_IMPOSTOS.CODI_EMP AS CEMP, {livro_num} AS LIVRO, {pagina_num} AS PAGINA, GEEMPRE.TINS_EMP AS TINSEMP, TD_DADOS_EMPRESA.IESTEMP AS IESTEMP, TD_DADOS_EMPRESA.CGCEEMP AS CGCEEMP, TD_DADOS_EMPRESA.NOMEEMP AS NOMEEMP, TD_DADOS_EMPRESA.ESTAEMP AS ESTAEMP, EFECF_REDUCAO_Z_BILHETE.CODI_EMP AS CODI_EMP FROM BETHADBA.EFECF_REDUCAO_Z_BILHETE AS EFECF_REDUCAO_Z_BILHETE INNER JOIN BETHADBA.EFECF_REDUCAO_Z_BILHETE_IMPOSTOS AS EFECF_REDUCAO_Z_BILHETE_IMPOSTOS ON EFECF_REDUCAO_Z_BILHETE_IMPOSTOS.CODI_EMP = EFECF_REDUCAO_Z_BILHETE.CODI_EMP AND EFECF_REDUCAO_Z_BILHETE_IMPOSTOS.I_REDUCAO = EFECF_REDUCAO_Z_BILHETE.I_REDUCAO INNER JOIN BETHADBA.GEEMPRE AS GEEMPRE ON GEEMPRE.CODI_EMP = EFECF_REDUCAO_Z_BILHETE.CODI_EMP INNER JOIN BETHADBA.EFPARAMETRO_VIGENCIA AS EFPARAMETRO_VIGENCIA ON EFPARAMETRO_VIGENCIA.CODI_EMP = EFECF_REDUCAO_Z_BILHETE.CODI_EMP AND EFPARAMETRO_VIGENCIA.VIGENCIA_PAR = DSDBA.D_BUSCA_VIGENCIA_PARAMETRO(EFECF_REDUCAO_Z_BILHETE.CODI_EMP, EFECF_REDUCAO_Z_BILHETE.DATA_REDUCAO), LATERAL(SELECT COALESCE(SUM(EFECF_REDUCAO_Z_BILHETE_SITUACAO_TRIBUTARIA.VALOR), 0) AS VALOR FROM BETHADBA.EFECF_REDUCAO_Z_BILHETE_SITUACAO_TRIBUTARIA AS EFECF_REDUCAO_Z_BILHETE_SITUACAO_TRIBUTARIA INNER JOIN BETHADBA.EFECF_REDUCAO_Z_BILHETE_SITUACAO_TRIBUTARIA_DETALHAMENTO AS EFECF_REDUCAO_Z_BILHETE_SITUACAO_TRIBUTARIA_DETALHAMENTO ON EFECF_REDUCAO_Z_BILHETE_SITUACAO_TRIBUTARIA_DETALHAMENTO.CODI_EMP = EFECF_REDUCAO_Z_BILHETE_SITUACAO_TRIBUTARIA.CODI_EMP AND EFECF_REDUCAO_Z_BILHETE_SITUACAO_TRIBUTARIA_DETALHAMENTO.I_REDUCAO = EFECF_REDUCAO_Z_BILHETE_SITUACAO_TRIBUTARIA.I_REDUCAO AND EFECF_REDUCAO_Z_BILHETE_SITUACAO_TRIBUTARIA_DETALHAMENTO.I_SITUACAO = EFECF_REDUCAO_Z_BILHETE_SITUACAO_TRIBUTARIA.I_SITUACAO WHERE EFECF_REDUCAO_Z_BILHETE_SITUACAO_TRIBUTARIA_DETALHAMENTO.CODI_EMP = EFECF_REDUCAO_Z_BILHETE_IMPOSTOS.CODI_EMP AND EFECF_REDUCAO_Z_BILHETE_SITUACAO_TRIBUTARIA_DETALHAMENTO.I_REDUCAO = EFECF_REDUCAO_Z_BILHETE_IMPOSTOS.I_REDUCAO AND EFECF_REDUCAO_Z_BILHETE_SITUACAO_TRIBUTARIA_DETALHAMENTO.CODI_ACU = EFECF_REDUCAO_Z_BILHETE_IMPOSTOS.CODI_ACU AND EFECF_REDUCAO_Z_BILHETE_SITUACAO_TRIBUTARIA_DETALHAMENTO.CODI_NAT = EFECF_REDUCAO_Z_BILHETE_IMPOSTOS.CODI_NAT AND EFECF_REDUCAO_Z_BILHETE_SITUACAO_TRIBUTARIA_DETALHAMENTO.VERSAO_NAT = EFECF_REDUCAO_Z_BILHETE_IMPOSTOS.VERSAO_NAT AND EFECF_REDUCAO_Z_BILHETE_IMPOSTOS.CODI_IMP = 1 AND EFECF_REDUCAO_Z_BILHETE_SITUACAO_TRIBUTARIA.OPERACAO IN (04, 06)) AS TDCANC_DESCONTO, LATERAL(SELECT CASE WHEN EFECF_REDUCAO_Z_BILHETE_IMPOSTOS.VALOR_CONTABIL - TDCANC_DESCONTO.VALOR > 0 THEN EFECF_REDUCAO_Z_BILHETE_IMPOSTOS.VALOR_CONTABIL - TDCANC_DESCONTO.VALOR ELSE 0 END AS VALOR_CONTABIL, CASE WHEN COALESCE(EFECF_REDUCAO_Z_BILHETE_IMPOSTOS.OUTROS, 0) - TDCANC_DESCONTO.VALOR > 0 THEN COALESCE(EFECF_REDUCAO_Z_BILHETE_IMPOSTOS.OUTROS, 0) - TDCANC_DESCONTO.VALOR ELSE 0 END AS OICM, COALESCE(EFECF_REDUCAO_Z_BILHETE_IMPOSTOS.ISENTAS, 0) AS IICM FROM DSDBA.DUMMY) AS TDAUX, LATERAL(SELECT CASE WHEN NOT (EMISSORA.TINS_EMP IN (3, 6)) THEN EMISSORA.CGCE_EMP ELSE COALESCE(DSDBA.S_BUSCA_ALTERACAO_EMPRESA(EMISSORA.CODI_EMP, '{data_inicio}', 21), EMISSORA.CPF_LEG_EMP, '') END AS CGCEEMP, COALESCE(DSDBA.S_BUSCA_ALTERACAO_EMPRESA(EMISSORA.CODI_EMP, '{data_inicio}', 12), EMISSORA.IEST_EMP) AS IESTEMP, COALESCE(DSDBA.S_BUSCA_ALTERACAO_EMPRESA(EMISSORA.CODI_EMP, '{data_inicio}', 2), EMISSORA.RAZAO_EMP) AS NOMEEMP, COALESCE(DSDBA.S_BUSCA_ALTERACAO_EMPRESA(EMISSORA.CODI_EMP, '{data_inicio}', 9), EMISSORA.ESTA_EMP) AS ESTAEMP FROM BETHADBA.GEEMPRE AS EMISSORA WHERE EMISSORA.CODI_EMP = {cod_emp}) AS TD_DADOS_EMPRESA, LATERAL(SELECT CASE WHEN 0 = 0 THEN 'S' WHEN 0 = 1 AND EFPARAMETRO_VIGENCIA.CENTRAL_PAR IN(2, 3) THEN 'S' WHEN 0 = 1 AND EFPARAMETRO_VIGENCIA.APURACAO_CENTRALIZADA IN(2, 3) THEN 'S' ELSE 'N' END AS GERA_REGISTRO FROM DSDBA.DUMMY) AS TDCENTRALIZA WHERE EFECF_REDUCAO_Z_BILHETE.CODI_EMP IN ({cod_emp}) AND EFECF_REDUCAO_Z_BILHETE.DATA_REDUCAO >= '{data_inicio}' AND EFECF_REDUCAO_Z_BILHETE.DATA_REDUCAO <= '{data_fim}' AND TDCENTRALIZA.GERA_REGISTRO = 'S' AND EFECF_REDUCAO_Z_BILHETE_IMPOSTOS.CODI_IMP = 1 AND NOT(GEEMPRE.ESTA_EMP = 'GO') GROUP BY EFECF_REDUCAO_Z_BILHETE.CODI_EMP, EFECF_REDUCAO_Z_BILHETE_IMPOSTOS.CODI_NAT, EFECF_REDUCAO_Z_BILHETE_IMPOSTOS.CODI_EMP, GEEMPRE.TINS_EMP, TD_DADOS_EMPRESA.IESTEMP, TD_DADOS_EMPRESA.CGCEEMP, TD_DADOS_EMPRESA.NOMEEMP, TD_DADOS_EMPRESA.ESTAEMP UNION ALL SELECT 3 AS QUADRO, 1 AS ORDE, EFECF_REDUCAO_Z_BILHETE_IMPOSTOS.CODI_NAT AS CODINAT, 0 AS CODINAT1, SUM(COALESCE(TDVALORES.VALOR_CONTABIL, 0)) AS VCON, SUM(COALESCE(TDVALORES.BASE_CALCULO, 0)) AS BCAL, SUM(COALESCE(TDVALORES.IMPOSTO, 0)) AS VICM, SUM(COALESCE(TDVALORES.ISENTAS, 0)) AS IICM, SUM(COALESCE(TDVALORES.OUTROS, 0)) AS OICM, GEEMPRE.CODI_EMP AS CEMP, {livro_num} AS LIVRO, {pagina_num} AS PAGINA, GEEMPRE.TINS_EMP AS TINSEMP, TDAUX.IESTEMP AS IESTEMP, TDAUX.CGCEEMP AS CGCEEMP, TDAUX.NOMEEMP AS NOMEEMP, TDAUX.ESTAEMP AS ESTAEMP, EFECF_REDUCAO_Z_BILHETE.CODI_EMP AS CODI_EMP FROM BETHADBA.EFECF_REDUCAO_Z_BILHETE AS EFECF_REDUCAO_Z_BILHETE INNER JOIN BETHADBA.EFECF_REDUCAO_Z_BILHETE_IMPOSTOS AS EFECF_REDUCAO_Z_BILHETE_IMPOSTOS ON EFECF_REDUCAO_Z_BILHETE_IMPOSTOS.CODI_EMP = EFECF_REDUCAO_Z_BILHETE.CODI_EMP AND EFECF_REDUCAO_Z_BILHETE_IMPOSTOS.I_REDUCAO = EFECF_REDUCAO_Z_BILHETE.I_REDUCAO INNER JOIN BETHADBA.GEEMPRE AS GEEMPRE ON GEEMPRE.CODI_EMP = EFECF_REDUCAO_Z_BILHETE.CODI_EMP INNER JOIN BETHADBA.EFPARAMETRO_VIGENCIA AS EFPARAMETRO_VIGENCIA ON EFPARAMETRO_VIGENCIA.CODI_EMP = EFECF_REDUCAO_Z_BILHETE.CODI_EMP, LATERAL(SELECT COALESCE(MAX('S'), 'N') AS SIMPLES_NACIONAL FROM DSDBA.DUMMY WHERE EFPARAMETRO_VIGENCIA.SIMPLESN_OPTANTE_PAR = 'S' AND EFPARAMETRO_VIGENCIA.SIMPLESN_ULTRAPASSOU_PAR = 'N' AND EFPARAMETRO_VIGENCIA.SIMPLESN_ICMS_NORMAL_PAR = 'N') AS TDSIMPLES, LATERAL(SELECT SUM(EFECF_REDUCAO_Z_BILHETE_SITUACAO_TRIBUTARIA.VALOR) AS VALOR FROM BETHADBA.EFECF_REDUCAO_Z_BILHETE_SITUACAO_TRIBUTARIA AS EFECF_REDUCAO_Z_BILHETE_SITUACAO_TRIBUTARIA INNER JOIN BETHADBA.EFECF_REDUCAO_Z_BILHETE_SITUACAO_TRIBUTARIA_DETALHAMENTO AS EFECF_REDUCAO_Z_BILHETE_SITUACAO_TRIBUTARIA_DETALHAMENTO ON EFECF_REDUCAO_Z_BILHETE_SITUACAO_TRIBUTARIA_DETALHAMENTO.CODI_EMP = EFECF_REDUCAO_Z_BILHETE_SITUACAO_TRIBUTARIA.CODI_EMP AND EFECF_REDUCAO_Z_BILHETE_SITUACAO_TRIBUTARIA_DETALHAMENTO.I_REDUCAO = EFECF_REDUCAO_Z_BILHETE_SITUACAO_TRIBUTARIA.I_REDUCAO AND EFECF_REDUCAO_Z_BILHETE_SITUACAO_TRIBUTARIA_DETALHAMENTO.I_SITUACAO = EFECF_REDUCAO_Z_BILHETE_SITUACAO_TRIBUTARIA.I_SITUACAO WHERE EFECF_REDUCAO_Z_BILHETE_SITUACAO_TRIBUTARIA_DETALHAMENTO.CODI_EMP = EFECF_REDUCAO_Z_BILHETE_IMPOSTOS.CODI_EMP AND EFECF_REDUCAO_Z_BILHETE_SITUACAO_TRIBUTARIA_DETALHAMENTO.I_REDUCAO = EFECF_REDUCAO_Z_BILHETE_IMPOSTOS.I_REDUCAO AND EFECF_REDUCAO_Z_BILHETE_SITUACAO_TRIBUTARIA_DETALHAMENTO.CODI_ACU = EFECF_REDUCAO_Z_BILHETE_IMPOSTOS.CODI_ACU AND EFECF_REDUCAO_Z_BILHETE_SITUACAO_TRIBUTARIA_DETALHAMENTO.CODI_NAT = EFECF_REDUCAO_Z_BILHETE_IMPOSTOS.CODI_NAT AND EFECF_REDUCAO_Z_BILHETE_SITUACAO_TRIBUTARIA_DETALHAMENTO.VERSAO_NAT = EFECF_REDUCAO_Z_BILHETE_IMPOSTOS.VERSAO_NAT AND ((EFECF_REDUCAO_Z_BILHETE_IMPOSTOS.CODI_IMP = 1 AND EFECF_REDUCAO_Z_BILHETE_SITUACAO_TRIBUTARIA.OPERACAO IN (04, 06)) OR (EFECF_REDUCAO_Z_BILHETE_IMPOSTOS.CODI_IMP = 3 AND EFECF_REDUCAO_Z_BILHETE_SITUACAO_TRIBUTARIA.OPERACAO IN (11, 13)) )) AS TDCANC_DESCONTO, LATERAL(SELECT EFECF_REDUCAO_Z_BILHETE_IMPOSTOS.VALOR_CONTABIL AS VALOR_CONTABIL, CASE WHEN EFECF_REDUCAO_Z_BILHETE_IMPOSTOS.CODI_IMP = 1 AND TDSIMPLES.SIMPLES_NACIONAL = 'N' THEN EFECF_REDUCAO_Z_BILHETE_IMPOSTOS.BASE_CALCULO ELSE 0 END AS BASE_CALCULO, CASE WHEN EFECF_REDUCAO_Z_BILHETE_IMPOSTOS.CODI_IMP = 1 AND TDSIMPLES.SIMPLES_NACIONAL = 'N' THEN EFECF_REDUCAO_Z_BILHETE_IMPOSTOS.IMPOSTO ELSE 0 END AS IMPOSTO, CASE WHEN TDSIMPLES.SIMPLES_NACIONAL = 'S' THEN 0 ELSE COALESCE(EFECF_REDUCAO_Z_BILHETE_IMPOSTOS.ISENTAS, 0) END + CASE WHEN EFECF_REDUCAO_Z_BILHETE_IMPOSTOS.CODI_IMP = 3 AND TDSIMPLES.SIMPLES_NACIONAL = 'N' THEN EFECF_REDUCAO_Z_BILHETE_IMPOSTOS.BASE_CALCULO ELSE 0 END AS ISENTAS, CASE WHEN TDSIMPLES.SIMPLES_NACIONAL = 'S' THEN EFECF_REDUCAO_Z_BILHETE_IMPOSTOS.VALOR_CONTABIL ELSE COALESCE(EFECF_REDUCAO_Z_BILHETE_IMPOSTOS.OUTROS, 0) END AS OUTROS, CASE WHEN NOT (GEEMPRE.TINS_EMP IN (3, 6)) THEN GEEMPRE.CGCE_EMP ELSE COALESCE(DSDBA.S_BUSCA_ALTERACAO_EMPRESA(GEEMPRE.CODI_EMP, '{data_inicio}', 21), GEEMPRE.CPF_LEG_EMP,'') END AS CGCEEMP, COALESCE(DSDBA.S_BUSCA_ALTERACAO_EMPRESA(GEEMPRE.CODI_EMP, '{data_inicio}', 12), GEEMPRE.IEST_EMP) AS IESTEMP, COALESCE(DSDBA.S_BUSCA_ALTERACAO_EMPRESA(GEEMPRE.CODI_EMP, '{data_inicio}', 2), GEEMPRE.RAZAO_EMP) AS NOMEEMP, COALESCE(DSDBA.S_BUSCA_ALTERACAO_EMPRESA(GEEMPRE.CODI_EMP, '{data_inicio}', 9), GEEMPRE.ESTA_EMP) AS ESTAEMP FROM DSDBA.DUMMY) AS TDAUX, LATERAL(SELECT CASE WHEN COALESCE(TDAUX.VALOR_CONTABIL, 0) - COALESCE(TDCANC_DESCONTO.VALOR, 0) <= 0 THEN 0 ELSE COALESCE(TDAUX.VALOR_CONTABIL, 0) - COALESCE(TDCANC_DESCONTO.VALOR, 0) END AS VALOR_CONTABIL, COALESCE(TDAUX.BASE_CALCULO, 0) AS BASE_CALCULO, COALESCE(TDAUX.IMPOSTO, 0) AS IMPOSTO, COALESCE(TDAUX.ISENTAS, 0) AS ISENTAS, CASE WHEN COALESCE(TDAUX.OUTROS, 0) - COALESCE(TDCANC_DESCONTO.VALOR, 0) <= 0 THEN 0 ELSE COALESCE(TDAUX.OUTROS, 0) - COALESCE(TDCANC_DESCONTO.VALOR, 0) END AS OUTROS FROM DSDBA.DUMMY) AS TDVALORES WHERE EFECF_REDUCAO_Z_BILHETE.CODI_EMP = {cod_emp} AND EFECF_REDUCAO_Z_BILHETE.DATA_REDUCAO BETWEEN '{data_inicio}' AND '{data_fim}' AND EFECF_REDUCAO_Z_BILHETE_IMPOSTOS.CODI_IMP = 1 AND EFPARAMETRO_VIGENCIA.VIGENCIA_PAR = DSDBA.D_BUSCA_VIGENCIA_PARAMETRO(EFECF_REDUCAO_Z_BILHETE.CODI_EMP, EFECF_REDUCAO_Z_BILHETE.DATA_REDUCAO) AND GEEMPRE.ESTA_EMP = 'GO' GROUP BY GEEMPRE.CODI_EMP, EFECF_REDUCAO_Z_BILHETE_IMPOSTOS.CODI_NAT, EFECF_REDUCAO_Z_BILHETE.CODI_EMP, GEEMPRE.TINS_EMP, TDAUX.IESTEMP, TDAUX.CGCEEMP, TDAUX.NOMEEMP, TDAUX.ESTAEMP UNION ALL SELECT 3 AS QUADRO, 1 AS ORDE, EFBILHETE_PASSAGEM.CODI_NAT AS CODINAT, 0 AS CODINAT1, COALESCE(SUM(TDEFBILHETE_PASSAGEM_ICMS.VALOR_CONTABIL), 0) AS VCON, COALESCE(SUM(TDEFBILHETE_PASSAGEM_ICMS.BASE_CALCULO), 0) AS BCAL, COALESCE(SUM(TDEFBILHETE_PASSAGEM_ICMS.VALOR_IMPOSTO), 0) AS VICM, COALESCE(SUM(TDEFBILHETE_PASSAGEM_ICMS.ISENTAS), 0) AS IICM, COALESCE(SUM(TDEFBILHETE_PASSAGEM_ICMS.OUTROS), 0) AS OICM, EFBILHETE_PASSAGEM.CODI_EMP AS CEMP, {livro_num} AS LIVRO, {pagina_num} AS PAGINA, GEEMPRE.TINS_EMP AS TINSEMP, TD_DADOS_EMPRESA.IESTEMP AS IESTEMP, TD_DADOS_EMPRESA.CGCEEMP AS CGCEEMP, TD_DADOS_EMPRESA.NOMEEMP AS NOMEEMP, TD_DADOS_EMPRESA.ESTAEMP AS ESTAEMP, EFBILHETE_PASSAGEM.CODI_EMP AS CODI_EMP FROM BETHADBA.EFBILHETE_PASSAGEM AS EFBILHETE_PASSAGEM INNER JOIN BETHADBA.GEEMPRE AS GEEMPRE ON GEEMPRE.CODI_EMP = EFBILHETE_PASSAGEM.CODI_EMP INNER JOIN BETHADBA.EFESPECIES AS EFESPECIES ON EFESPECIES.CODI_ESP = EFBILHETE_PASSAGEM.CODI_ESP INNER JOIN BETHADBA.EFPARAMETRO_VIGENCIA AS EFPARAMETRO_VIGENCIA ON EFPARAMETRO_VIGENCIA.CODI_EMP = EFBILHETE_PASSAGEM.CODI_EMP AND EFPARAMETRO_VIGENCIA.VIGENCIA_PAR = DSDBA.D_BUSCA_VIGENCIA_PARAMETRO(EFBILHETE_PASSAGEM.CODI_EMP, EFBILHETE_PASSAGEM.DATA_EMISSAO), LATERAL(SELECT SUM(EFBILHETE_PASSAGEM_IMPOSTOS.VALOR_CONTABIL) AS VALOR_CONTABIL, SUM(EFBILHETE_PASSAGEM_IMPOSTOS.BASE_CALCULO) AS BASE_CALCULO, SUM(EFBILHETE_PASSAGEM_IMPOSTOS.ISENTAS) AS ISENTAS, SUM(EFBILHETE_PASSAGEM_IMPOSTOS.OUTROS) AS OUTROS, SUM(EFBILHETE_PASSAGEM_IMPOSTOS.VALOR_IMPOSTO) AS VALOR_IMPOSTO FROM BETHADBA.EFBILHETE_PASSAGEM_IMPOSTOS AS EFBILHETE_PASSAGEM_IMPOSTOS WHERE EFBILHETE_PASSAGEM_IMPOSTOS.CODI_EMP = EFBILHETE_PASSAGEM.CODI_EMP AND EFBILHETE_PASSAGEM_IMPOSTOS.I_BILHETE = EFBILHETE_PASSAGEM.I_BILHETE AND EFBILHETE_PASSAGEM_IMPOSTOS.CODI_IMP = 1) AS TDEFBILHETE_PASSAGEM_ICMS, LATERAL(SELECT CASE WHEN NOT (EMISSORA.TINS_EMP IN (3, 6)) THEN EMISSORA.CGCE_EMP ELSE COALESCE(DSDBA.S_BUSCA_ALTERACAO_EMPRESA(EMISSORA.CODI_EMP, '{data_inicio}', 21), EMISSORA.CPF_LEG_EMP, '') END AS CGCEEMP, COALESCE(DSDBA.S_BUSCA_ALTERACAO_EMPRESA(EMISSORA.CODI_EMP, '{data_inicio}', 12), EMISSORA.IEST_EMP) AS IESTEMP, COALESCE(DSDBA.S_BUSCA_ALTERACAO_EMPRESA(EMISSORA.CODI_EMP, '{data_inicio}', 2), EMISSORA.RAZAO_EMP) AS NOMEEMP, COALESCE(DSDBA.S_BUSCA_ALTERACAO_EMPRESA(EMISSORA.CODI_EMP, '{data_inicio}', 9), EMISSORA.ESTA_EMP) AS ESTAEMP FROM BETHADBA.GEEMPRE AS EMISSORA WHERE EMISSORA.CODI_EMP = {cod_emp}) AS TD_DADOS_EMPRESA, LATERAL(SELECT CASE WHEN 0 = 0 THEN 'S' WHEN 0 = 1 AND EFPARAMETRO_VIGENCIA.CENTRAL_PAR IN(2, 3) THEN 'S' WHEN 0 = 1 AND EFPARAMETRO_VIGENCIA.APURACAO_CENTRALIZADA IN(2, 3) THEN 'S' ELSE 'N' END AS GERA_REGISTRO FROM DSDBA.DUMMY) AS TDCENTRALIZA WHERE EFBILHETE_PASSAGEM.CODI_EMP IN ({cod_emp}) AND EFBILHETE_PASSAGEM.DATA_EMISSAO >= '{data_inicio}' AND EFBILHETE_PASSAGEM.DATA_EMISSAO <= '{data_fim}' AND TDCENTRALIZA.GERA_REGISTRO = 'S' AND EFESPECIES.DOCUMENTO_NAO_FISCAL = 'N' AND NOT(GEEMPRE.ESTA_EMP = 'GO') GROUP BY EFBILHETE_PASSAGEM.CODI_EMP, EFBILHETE_PASSAGEM.CODI_NAT, EFBILHETE_PASSAGEM.CODI_EMP, GEEMPRE.TINS_EMP, TD_DADOS_EMPRESA.IESTEMP, TD_DADOS_EMPRESA.CGCEEMP, TD_DADOS_EMPRESA.NOMEEMP, TD_DADOS_EMPRESA.ESTAEMP UNION ALL SELECT 3 AS QUADRO, 1 AS ORDE, EFBILHETE_PASSAGEM.CODI_NAT AS CODINAT, 0 AS CODINAT1, SUM(COALESCE(TDAUX.VALOR_CONTABIL, 0)) AS VCON, SUM(COALESCE(TDAUX.BASE_CALCULO, 0)) AS BCAL, SUM(COALESCE(TDAUX.VALOR_IMPOSTO, 0)) AS VICM, SUM(COALESCE(TDAUX.ISENTAS, 0)) AS IICM, SUM(COALESCE(TDAUX.OUTROS, 0)) AS OICM, GEEMPRE.CODI_EMP AS CEMP, {livro_num} AS LIVRO, {pagina_num} AS PAGINA, GEEMPRE.TINS_EMP AS TINSEMP, TDAUX.IESTEMP AS IESTEMP, TDAUX.CGCEEMP AS CGCEEMP, TDAUX.NOMEEMP AS NOMEEMP, TDAUX.ESTAEMP AS ESTAEMP, EFBILHETE_PASSAGEM.CODI_EMP AS CODI_EMP FROM BETHADBA.EFBILHETE_PASSAGEM AS EFBILHETE_PASSAGEM INNER JOIN BETHADBA.EFESPECIES AS EFESPECIES ON EFESPECIES.CODI_ESP = EFBILHETE_PASSAGEM.CODI_ESP INNER JOIN BETHADBA.EFPARAMETRO_VIGENCIA AS EFPARAMETRO_VIGENCIA ON EFPARAMETRO_VIGENCIA.CODI_EMP = EFBILHETE_PASSAGEM.CODI_EMP INNER JOIN BETHADBA.GEEMPRE AS GEEMPRE ON EFBILHETE_PASSAGEM.CODI_EMP = GEEMPRE.CODI_EMP, LATERAL(SELECT COALESCE(MAX('S'), 'N') AS SIMPLES_NACIONAL FROM DSDBA.DUMMY WHERE EFPARAMETRO_VIGENCIA.SIMPLESN_OPTANTE_PAR = 'S' AND EFPARAMETRO_VIGENCIA.SIMPLESN_ULTRAPASSOU_PAR = 'N' AND EFPARAMETRO_VIGENCIA.SIMPLESN_ICMS_NORMAL_PAR = 'N') AS TDSIMPLES, LATERAL(SELECT SUM(EFBILHETE_PASSAGEM_IMPOSTOS.BASE_CALCULO) AS BASE_CALCULO, SUM(EFBILHETE_PASSAGEM_IMPOSTOS.ISENTAS) AS ISENTAS, SUM(EFBILHETE_PASSAGEM_IMPOSTOS.OUTROS) AS OUTROS, SUM(EFBILHETE_PASSAGEM_IMPOSTOS.VALOR_IMPOSTO) AS VALOR_IMPOSTO FROM BETHADBA.EFBILHETE_PASSAGEM_IMPOSTOS AS EFBILHETE_PASSAGEM_IMPOSTOS WHERE EFBILHETE_PASSAGEM_IMPOSTOS.CODI_EMP = EFBILHETE_PASSAGEM.CODI_EMP AND EFBILHETE_PASSAGEM_IMPOSTOS.I_BILHETE = EFBILHETE_PASSAGEM.I_BILHETE AND EFBILHETE_PASSAGEM_IMPOSTOS.CODI_IMP = 1) AS TD_ICMS, LATERAL(SELECT SUM(EFBILHETE_PASSAGEM_IMPOSTOS.BASE_CALCULO) AS BASE_CALCULO, SUM(EFBILHETE_PASSAGEM_IMPOSTOS.ISENTAS) AS ISENTAS, SUM(EFBILHETE_PASSAGEM_IMPOSTOS.OUTROS) AS OUTROS FROM BETHADBA.EFBILHETE_PASSAGEM_IMPOSTOS AS EFBILHETE_PASSAGEM_IMPOSTOS WHERE EFBILHETE_PASSAGEM_IMPOSTOS.CODI_EMP = EFBILHETE_PASSAGEM.CODI_EMP AND EFBILHETE_PASSAGEM_IMPOSTOS.I_BILHETE = EFBILHETE_PASSAGEM.I_BILHETE AND EFBILHETE_PASSAGEM_IMPOSTOS.CODI_IMP = 3) AS TD_ISS, LATERAL(SELECT COALESCE(EFBILHETE_PASSAGEM.VALOR_TOTAL ,0) AS VALOR_CONTABIL, CASE WHEN TDSIMPLES.SIMPLES_NACIONAL = 'S' THEN 0 ELSE TD_ICMS.BASE_CALCULO END AS BASE_CALCULO, CASE WHEN TDSIMPLES.SIMPLES_NACIONAL = 'S' THEN 0 ELSE TD_ICMS.VALOR_IMPOSTO END AS VALOR_IMPOSTO, CASE WHEN TDSIMPLES.SIMPLES_NACIONAL = 'S' THEN 0 ELSE COALESCE(TD_ICMS.ISENTAS, 0) + COALESCE(TD_ISS.BASE_CALCULO, 0) + COALESCE(TD_ISS.ISENTAS, 0) END AS ISENTAS, CASE WHEN TDSIMPLES.SIMPLES_NACIONAL = 'S' THEN COALESCE(EFBILHETE_PASSAGEM.VALOR_TOTAL ,0) ELSE COALESCE(TD_ICMS.OUTROS, 0) + COALESCE(TD_ISS.OUTROS, 0) END AS OUTROS, CASE WHEN NOT (GEEMPRE.TINS_EMP IN (3, 6)) THEN GEEMPRE.CGCE_EMP ELSE COALESCE(DSDBA.S_BUSCA_ALTERACAO_EMPRESA(GEEMPRE.CODI_EMP, '{data_inicio}', 21), GEEMPRE.CPF_LEG_EMP,'') END AS CGCEEMP, COALESCE(DSDBA.S_BUSCA_ALTERACAO_EMPRESA(GEEMPRE.CODI_EMP, '{data_inicio}', 12), GEEMPRE.IEST_EMP) AS IESTEMP, COALESCE(DSDBA.S_BUSCA_ALTERACAO_EMPRESA(GEEMPRE.CODI_EMP, '{data_inicio}', 2), GEEMPRE.RAZAO_EMP) AS NOMEEMP, COALESCE(DSDBA.S_BUSCA_ALTERACAO_EMPRESA(GEEMPRE.CODI_EMP, '{data_inicio}', 9), GEEMPRE.ESTA_EMP) AS ESTAEMP FROM DSDBA.DUMMY) AS TDAUX WHERE EFBILHETE_PASSAGEM.CODI_EMP = {cod_emp} AND EFBILHETE_PASSAGEM.DATA_EMISSAO BETWEEN '{data_inicio}' AND '{data_fim}' AND EFPARAMETRO_VIGENCIA.VIGENCIA_PAR = DSDBA.D_BUSCA_VIGENCIA_PARAMETRO(EFBILHETE_PASSAGEM.CODI_EMP, EFBILHETE_PASSAGEM.DATA_EMISSAO) AND EFESPECIES.DOCUMENTO_NAO_FISCAL = 'N' AND GEEMPRE.ESTA_EMP = 'GO' GROUP BY GEEMPRE.CODI_EMP, EFBILHETE_PASSAGEM.CODI_NAT, EFBILHETE_PASSAGEM.CODI_EMP, GEEMPRE.TINS_EMP, TDAUX.IESTEMP, TDAUX.CGCEEMP, TDAUX.NOMEEMP, TDAUX.ESTAEMP UNION ALL SELECT 3 AS QUADRO, 1 AS ORDE, IMPOSTOS_DETALHAMENTO.CODI_NAT AS CODINAT, 0 AS CODINAT1, COALESCE(SUM(IMPOSTOS_DETALHAMENTO.VALOR_CONTABIL), 0) AS VCON, COALESCE(SUM(TDIMPOSTO.BASE_CALCULO), 0) AS BCAL, COALESCE(SUM(TDIMPOSTO.VALOR_IMPOSTO), 0) AS VICM, COALESCE(SUM(TDIMPOSTO.VALOR_ISENTAS), 0) AS IICM, COALESCE(SUM(IMPOSTOS_DETALhamENTO.VALOR_OUTROS), 0) AS OICM, CUPOM.CODI_EMP AS CEMP, {livro_num} AS LIVRO, {pagina_num} AS PAGINA, GEEMPRE.TINS_EMP AS TINSEMP, TD_DADOS_EMPRESA.IESTEMP AS IESTEMP, TD_DADOS_EMPRESA.CGCEEMP AS CGCEEMP, TD_DADOS_EMPRESA.NOMEEMP AS NOMEEMP, TD_DADOS_EMPRESA.ESTAEMP AS ESTAEMP, CUPOM.CODI_EMP AS CODI_EMP FROM BETHADBA.EFCUPOM_FISCAL_ELETRONICO AS CUPOM INNER JOIN BETHADBA.EFSAT_CF_E AS SAT_CFE ON SAT_CFE.CODI_EMP = CUPOM.CODI_EMP AND SAT_CFE.I_SAT_CF_E = CUPOM.SAT INNER JOIN BETHADBA.EFCUPOM_FISCAL_ELETRONICO_IMPOSTOS AS IMPOSTOS ON IMPOSTOS.CODI_EMP = CUPOM.CODI_EMP AND IMPOSTOS.I_CFE = CUPOM.I_CFE INNER JOIN BETHADBA.EFCUPOM_FISCAL_ELETRONICO_IMPOSTOS_DETALHAMENTO AS IMPOSTOS_DETALHAMENTO ON IMPOSTOS_DETALHAMENTO.CODI_EMP = IMPOSTOS.CODI_EMP AND IMPOSTOS_DETALHAMENTO.I_CFE = IMPOSTOS.I_CFE AND IMPOSTOS_DETALHAMENTO.I_IMPOSTO = IMPOSTOS.I_IMPOSTO INNER JOIN BETHADBA.GEEMPRE AS GEEMPRE ON GEEMPRE.CODI_EMP = CUPOM.CODI_EMP INNER JOIN BETHADBA.EFPARAMETRO_VIGENCIA AS PARAMETRO_VIGENCIA ON PARAMETRO_VIGENCIA.CODI_EMP = CUPOM.CODI_EMP AND PARAMETRO_VIGENCIA.VIGENCIA_PAR = DSDBA.D_BUSCA_VIGENCIA_PARAMETRO(CUPOM.CODI_EMP, CUPOM.DATA_CFE), LATERAL(SELECT COALESCE(MAX('S'), 'N') AS SIMPLES_NACIONAL FROM DSDBA.DUMMY WHERE PARAMETRO_VIGENCIA.SIMPLESN_OPTANTE_PAR = 'S' AND PARAMETRO_VIGENCIA.SIMPLESN_ULTRAPASSOU_PAR = 'N' AND PARAMETRO_VIGENCIA.SIMPLESN_ICMS_NORMAL_PAR = 'N') AS TDSIMPLES, LATERAL(SELECT CASE WHEN NOT (EMISSORA.TINS_EMP IN (3, 6)) THEN EMISSORA.CGCE_EMP ELSE COALESCE(DSDBA.S_BUSCA_ALTERACAO_EMPRESA(EMISSORA.CODI_EMP, '{data_inicio}', 21), EMISSORA.CPF_LEG_EMP, '') END AS CGCEEMP, COALESCE(DSDBA.S_BUSCA_ALTERACAO_EMPRESA(EMISSORA.CODI_EMP, '{data_inicio}', 12), EMISSORA.IEST_EMP) AS IESTEMP, COALESCE(DSDBA.S_BUSCA_ALTERACAO_EMPRESA(EMISSORA.CODI_EMP, '{data_inicio}', 2), EMISSORA.RAZAO_EMP) AS NOMEEMP, COALESCE(DSDBA.S_BUSCA_ALTERACAO_EMPRESA(EMISSORA.CODI_EMP, '{data_inicio}', 9), EMISSORA.ESTA_EMP) AS ESTAEMP FROM BETHADBA.GEEMPRE AS EMISSORA WHERE EMISSORA.CODI_EMP = {cod_emp}) AS TD_DADOS_EMPRESA, LATERAL(SELECT CASE WHEN TDSIMPLES.SIMPLES_NACIONAL = 'S' THEN 0 ELSE IMPOSTOS_DETALHAMENTO.BASE_CALCULO END AS BASE_CALCULO, CASE WHEN TDSIMPLES.SIMPLES_NACIONAL = 'S' THEN 0 ELSE IMPOSTOS_DETALHAMENTO.VALOR_IMPOSTO END AS VALOR_IMPOSTO, CASE WHEN TDSIMPLES.SIMPLES_NACIONAL = 'S' THEN 0 ELSE IMPOSTOS_DETALHAMENTO.VALOR_ISENTAS END AS VALOR_ISENTAS FROM DSDBA.DUMMY) AS TDIMPOSTO, LATERAL(SELECT CASE WHEN 0 = 0 THEN 'S' WHEN 0 = 1 AND PARAMETRO_VIGENCIA.CENTRAL_PAR IN(2, 3) THEN 'S' WHEN 0 = 1 AND PARAMETRO_VIGENCIA.APURACAO_CENTRALIZADA IN(2, 3) THEN 'S' ELSE 'N' END AS GERA_REGISTRO FROM DSDBA.DUMMY) AS TDCENTRALIZA WHERE CUPOM.CODI_EMP IN ({cod_emp}) AND CUPOM.DATA_CFE BETWEEN '{data_inicio}' AND '{data_fim}' AND TDCENTRALIZA.GERA_REGISTRO = 'S' AND IMPOSTOS_DETALHAMENTO.CODI_IMP = 1 GROUP BY IMPOSTOS_DETALHAMENTO.CODI_NAT, CUPOM.CODI_EMP, GEEMPRE.TINS_EMP, TD_DADOS_EMPRESA.IESTEMP, TD_DADOS_EMPRESA.CGCEEMP, TD_DADOS_EMPRESA.NOMEEMP, CUPOM.CODI_EMP, TD_DADOS_EMPRESA.ESTAEMP) AS TDDADOS_QUADRO3 GROUP BY TDDADOS_QUADRO3.QUADRO, TDDADOS_QUADRO3.ORDE, TDDADOS_QUADRO3.CODINAT, TDDADOS_QUADRO3.CODINAT1, TDDADOS_QUADRO3.CEMP, TDDADOS_QUADRO3.LIVRO, TDDADOS_QUADRO3.PAGINA, TDDADOS_QUADRO3.TINSEMP, TDDADOS_QUADRO3.IESTEMP, TDDADOS_QUADRO3.CGCEEMP, TDDADOS_QUADRO3.NOMEEMP, TDDADOS_QUADRO3.ESTAEMP) AS TDDADOS, LATERAL(SELECT COALESCE(MAX(GEEMPRE_AUX.EMPRESA_CENTRALIZADORA), {cod_emp}) AS CODIGO_EMPRESA, COALESCE(MAX(GEEMPRE_AUX.USA_EMPRESA_CENTRALIZADORA), 'N') AS USA_CENTRALIZADORA, COALESCE(MAX(GEEMPRE_AUX.CPF_LEG_EMP), 0) AS CPFLEGEMP FROM BETHADBA.GEEMPRE AS GEEMPRE_AUX WHERE GEEMPRE_AUX.CODI_EMP = {cod_emp}) AS TD_GEEMPRE_AUX, LATERAL(SELECT COALESCE(MAX(PARAM.CONSIDERAR_DADOS_CADASTRAIS_EMPRESA_TRANSMISSORA_RELATORIOS), 'N') AS USA_CENTRALIZADORA_RELATORIO FROM BETHADBA.EFPARAMETRO PARAM WHERE CODI_EMP = {cod_emp}) AS TD_PARAM_AUX, /*-EMPRESA TRANSMISSORA-*/ LATERAL(SELECT COALESCE(MAX(GEEMPRE_CENT.TINS_EMP), TDDADOS.TINSEMP) AS TINSEMP, COALESCE(MAX(GEEMPRE_CENT.IEST_EMP), TDDADOS.IESTEMP) AS IESTEMP, COALESCE(MAX(GEEMPRE_CENT.CPF_LEG_EMP), TD_GEEMPRE_AUX.CPFLEGEMP) AS CPFLEGEMP, COALESCE(MAX(GEEMPRE_CENT.CGCE_EMP), TDDADOS.CGCEEMP) AS CGCEEMP, COALESCE(MAX(GEEMPRE_CENT.ESTA_EMP), TDDADOS.ESTAEMP) AS ESTAEMP, COALESCE(MAX(GEEMPRE_CENT.NOME_EMP), TDDADOS.NOMEEMP) AS NOMEEMP FROM BETHADBA.GEEMPRE AS GEEMPRE_CENT WHERE GEEMPRE_CENT.CODI_EMP = TD_GEEMPRE_AUX.CODIGO_EMPRESA) AS TD_EMP_CENTRAL GROUP BY TDDADOS.QUADRO, TDDADOS.ORDE, TDDADOS.CODINAT, TDDADOS.CODINAT1, TDDADOS.VCON, TDDADOS.BCAL, TDDADOS.VICM, TDDADOS.IICM, TDDADOS.OICM, TDDADOS.CEMP, TDDADOS.LIVRO, TDDADOS.PAGINA, TINSEMP, IESTEMP, CGCEEMP, NOMEEMP, ESTAEMP ORDER BY 1, 2, 3, 4
"""

# <<<<<<< ATENÇÃO: COLE SUA CONSULTA DE RESUMO AQUI >>>>>>>>>

SQL_RESUMO_APURACAO_TEMPLATE = """
SELECT
    YEAR(S.DATA_SIM) * 100 + MONTH(S.DATA_SIM) AS ANOMES,
    TDAUX.SAIDAS AS SAIDAS,
    TDAUX.OUTROSD AS OUTROSD,
    TDAUX.ESTORNOC AS ESTORNOC,
    TDAUX.SUBTOTALD AS SUBTOTALD,
    TDAUX.ENTRADAS AS ENTRADAS,
    TDAUX.OUTROSC AS OUTROSC,
    TDAUX.ESTORNOD AS ESTORNOD,
    TDAUX.SUBTOTALC AS SUBTOTALC,
    TDAUX.SALDOANT AS SALDOANT,
    TDAUX.TOTAL AS TOTAL,
    TDTOTAL.DEVEDOR AS DEVEDOR,
    TDAUX.DEDUCOES AS DEDUCOES,
    TDAUX.RECOLHER AS RECOLHER,
    TDAUX.CREDITO_N_C AS CREDITO_N_C,
    TDAUX.SALDO_CREDOR AS CREDOR,
    S.SDIF_SIM AS DIFERIDO,
    G.ESTA_EMP AS ESTADO,
    TDEFSDOIMP_31.BASE_CALCULO_ENTRADA AS BASE_CALCULO_ENTRADA_IMP_31,
    TDEFSDOIMP_31.VALOR_IMPOSTO_ENTRADA AS VALOR_IMPOSTO_ENTRADA_IMP_31,
    0.00 AS VALOR_IMPOSTO_ENTRADA_IMP_27,
    TDEFSDOIMP_125.VALOR_IMPOSTO AS VALOR_APURACAO_IMP_125,
    0.00 AS EXTINCAO_DEBITOS_FISCAIS,
    0.00 AS MG_APROVEITAMENTO_CREDITO_ICMS_485515,
    TDSALDO_PR_ICMS_FECOP.DEBITO_FECOP_ICMS_PR AS DEBITO_FECOP_ICMS_PR,
    TDSALDO_PR_ICMS_FECOP.DEVOLUCAO_FECOP_ICMS_PR AS DEVOLUCAO_FECOP_ICMS_PR,
    0.00 AS CREDITO_PRES_LEITE_ITEM15_TABELA1_ANEXOIV,
    0.00 AS ESTORNO_CREDITO_PRES_LEITE_ITEM15_TABELA1_ANEXOIV,
    0.00 AS CREDITO_PRES_LEITE_ITEM6_TABELA1_ANEXOIV,
    0.00 AS ESTORNO_CREDITO_PRES_LEITE_ITEM6_TABELA1_ANEXOIV,
    0.00 AS TRANSFERENCIA_SALDO_CREDITO_ART_59_OUTROS_DEBITOS,
    0.00 AS TRANSFERENCIA_SALDO_CREDITO_ART_59_OUTROS_CREDITOS,
    0.00 AS TRANSFERENCIA_CREDITO_ICMS_ACUMULADO_OUTROS_CREDITOS,
    0.00 AS TRANSFERENCIA_CREDITO_ICMS_ACUMULADO_OUTROS_DEBITOS,
    0.00 AS PA_TRANSFERENCIA_CREDITO_ICMS_ACUMULADO_OUTROS_CREDITOS,
    0.00 AS PA_TRANSFERENCIA_CREDITO_ICMS_ACUMULADO_OUTROS_DEBITOS,
    0.00 AS ESTORNO_CREDITO_PRESUMIDO_RIOLOG_LEI_9025_2020,
    0.00 AS COMPLEMENTO_ICMS_ST_ART_16_578_2023,
    0.00 AS COMPLEMENTO_FECP_ART_16_578_2023
FROM
    BETHADBA.EFSDOIMP AS S
    INNER JOIN BETHADBA.GEEMPRE AS G ON G.CODI_EMP = S.CODI_EMP
    INNER JOIN BETHADBA.EFPARAMETRO_VIGENCIA AS P ON P.CODI_EMP = S.CODI_EMP,
    LATERAL (
        SELECT
            (S.VIMS_SIM) AS SAIDAS,
            (S.OUTD_SIM) AS OUTROSD,
            (S.ESTC_SIM) AS ESTORNOC,
            (S.VIMS_SIM + S.OUTD_SIM + S.ESTC_SIM) AS SUBTOTALD,
            (S.VIME_SIM) AS ENTRADAS,
            (S.OUTC_SIM) AS OUTROSC,
            (S.ESTD_SIM) AS ESTORNOD,
            (S.VIME_SIM + S.OUTC_SIM + S.ESTD_SIM) AS SUBTOTALC,
            (0) AS SALDOANT,
            (S.VIME_SIM + S.OUTC_SIM + S.ESTD_SIM) AS TOTAL,
            (S.ODED_SIM) AS DEDUCOES,
            (S.SDEV_SIM) AS RECOLHER,
            (0) AS CREDITO_N_C,
            (S.SCRE_SIM) AS SALDO_CREDOR
        FROM DSDBA.DUMMY
    ) AS TDAUX,
    LATERAL (
        SELECT (S.SREC_SIM) AS DEVEDOR FROM DSDBA.DUMMY
    ) AS TDTOTAL,
    LATERAL(SELECT COALESCE(SUM(EFSDOIMP_31.BCAE_SIM), 0) AS BASE_CALCULO_ENTRADA, COALESCE(SUM(EFSDOIMP_31.VIME_SIM), 0) AS VALOR_IMPOSTO_ENTRADA FROM BETHADBA.EFSDOIMP AS EFSDOIMP_31 WHERE EFSDOIMP_31.CODI_EMP = S.CODI_EMP AND EFSDOIMP_31.DATA_SIM = S.DATA_SIM AND EFSDOIMP_31.PDIC_SIM = S.PDIC_SIM AND EFSDOIMP_31.CODI_IMP = 31) AS TDEFSDOIMP_31,
    LATERAL(SELECT COALESCE(SUM(SALDO_IMPOSTO.SDEV_SIM), 0) AS VALOR_IMPOSTO FROM BETHADBA.EFSDOIMP AS SALDO_IMPOSTO WHERE SALDO_IMPOSTO.CODI_EMP = S.CODI_EMP AND SALDO_IMPOSTO.DATA_SIM = S.DATA_SIM AND SALDO_IMPOSTO.CODI_IMP = 125) AS TDEFSDOIMP_125,
    LATERAL(SELECT COALESCE(SUM(IMPOSTO.DEBITO_FECOP_ICMS), 0) AS DEBITO_FECOP_ICMS_PR, COALESCE(SUM(IMPOSTO.DEVOLUCAO_FECOP_ICMS), 0) AS DEVOLUCAO_FECOP_ICMS_PR FROM BETHADBA.EFSDOIMP_ESTADUAL_PR AS IMPOSTO WHERE IMPOSTO.CODI_EMP = S.CODI_EMP AND IMPOSTO.DATA_SIM = S.DATA_SIM AND IMPOSTO.PDIC_SIM = S.PDIC_SIM AND IMPOSTO.CODI_IMP = S.CODI_IMP) AS TDSALDO_PR_ICMS_FECOP
WHERE
    P.VIGENCIA_PAR = DSDBA.D_BUSCA_VIGENCIA_PARAMETRO(S.CODI_EMP, S.DATA_SIM)
    AND S.CODI_EMP = {cod_emp}
    AND S.DATA_SIM = '{data_inicio}'
    AND S.CODI_IMP = 1
    AND S.PDIC_SIM = {pdic_sim}
    AND ('N' = 'N' OR 'N' = 'S')
UNION
SELECT
    YEAR('{data_inicio}') * 100 + MONTH('{data_inicio}') AS ANOMES,
    0.00 AS SAIDAS,
    0.00 AS OUTROSD,
    0.00 AS ESTORNOC,
    0.00 AS SUBTOTALD,
    0.00 AS ENTRADAS,
    0.00 AS OUTROSC,
    0.00 AS ESTORNOD,
    0.00 AS SUBTOTALC,
    0.00 AS SALDOANT,
    0.00 AS TOTAL,
    0.00 AS DEVEDOR,
    0.00 AS DEDUCOES,
    0.00 AS RECOLHER,
    0.00 AS CREDITO_N_C,
    0.00 AS CREDOR,
    0.00 AS DIFERIDO,
    G.ESTA_EMP AS ESTADO,
    0.00 AS BASE_CALCULO_ENTRADA_IMP_31,
    0.00 AS VALOR_IMPOSTO_ENTRADA_IMP_31,
    0.00 AS VALOR_IMPOSTO_ENTRADA_IMP_27, -- CORREÇÃO APLICADA AQUI
    0.00 AS VALOR_APURACAO_IMP_125,
    0.00 AS EXTINCAO_DEBITOS_FISCAIS,
    0 AS MG_APROVEITAMENTO_CREDITO_ICMS_485515,
    0.00 AS DEBITO_FECOP_ICMS_PR,
    0.00 AS DEVOLUCAO_FECOP_ICMS_PR,
    0.00 AS CREDITO_PRES_LEITE_ITEM15_TABELA1_ANEXOIV,
    0.00 AS ESTORNO_CREDITO_PRES_LEITE_ITEM15_TABELA1_ANEXOIV,
    0.00 AS CREDITO_PRES_LEITE_ITEM6_TABELA1_ANEXOIV,
    0.00 AS ESTORNO_CREDITO_PRES_LEITE_ITEM6_TABELA1_ANEXOIV,
    0.00 AS TRANSFERENCIA_SALDO_CREDITO_ART_59_OUTROS_DEBITOS,
    0.00 AS TRANSFERENCIA_SALDO_CREDITO_ART_59_OUTROS_CREDITOS,
    0.00 AS TRANSFERENCIA_CREDITO_ICMS_ACUMULADO_OUTROS_CREDITOS,
    0.00 AS TRANSFERENCIA_CREDITO_ICMS_ACUMULADO_OUTROS_DEBITOS,
    0.00 AS PA_TRANSFERENCIA_CREDITO_ICMS_ACUMULADO_OUTROS_CREDITOS,
    0.00 AS PA_TRANSFERENCIA_CREDITO_ICMS_ACUMULADO_OUTROS_DEBITOS,
    0.00 AS ESTORNO_CREDITO_PRESUMIDO_RIOLOG_LEI_9025_2020,
    0.00 AS COMPLEMENTO_ICMS_ST_ART_16_578_2023,
    0.00 AS COMPLEMENTO_FECP_ART_16_578_2023
FROM
    BETHADBA.GEEMPRE AS G
WHERE
    G.CODI_EMP = {cod_emp}
    AND 'N' = 'S'
    AND 'N' = 'N'
"""

# --- NOVOS TEMPLATES SQL PARA DETALHAMENTO DAS SEÇÕES DA APURAÇÃO ---

SQL_INFORMACOES_COMPLEMENTARES_TEMPLATE = """
SELECT I.CDRN_IMP AS CODIGO, S.DVCT_SIM AS VENCIMENTO, S.SREC_SIM - S.ODED_SIM - CASE G.ESTA_EMP WHEN 'SC' THEN (CASE WHEN S.CODI_IMP = 1 THEN VDI11_SIM ELSE 0 END) WHEN 'AM' THEN S.VDI7_SIM WHEN 'RJ' THEN (CASE WHEN S.VDI2_SIM > S.SREC_SIM THEN S.SREC_SIM ELSE S.VDI2_SIM END) WHEN 'AL' THEN S.VDI16_SIM ELSE 0 END + CASE G.ESTA_EMP WHEN 'MS' THEN S.ODED_SIM WHEN 'PE' THEN S.OACR_SIM ELSE 0 END AS VALOR, 1 AS TIPO, '' AS ORGAO_ARRECADADOR FROM BETHADBA.EFSDOIMP AS S INNER JOIN BETHADBA.EFIMPOSTO AS I ON S.CODI_EMP = I.CODI_EMP AND S.CODI_IMP = I.CODI_IMP INNER JOIN BETHADBA.GEEMPRE AS G ON S.CODI_EMP = G.CODI_EMP, LATERAL(SELECT COUNT(1) AS EXISTE FROM BETHADBA.EFSDOIMP_FUNSOC_POR_RECOLHIMENTO AS FUNSOC_POR_RECOLHIMENTO WHERE FUNSOC_POR_RECOLHIMENTO.CODI_EMP = S.CODI_EMP AND FUNSOC_POR_RECOLHIMENTO.CODI_IMP = S.CODI_IMP AND FUNSOC_POR_RECOLHIMENTO.DATA_SIM = S.DATA_SIM AND FUNSOC_POR_RECOLHIMENTO.PDIC_SIM = S.PDIC_SIM) AS TD_FUNSOC_POR_RECOLHIMENTO WHERE S.CODI_EMP = {cod_emp} AND S.DATA_SIM = {data_inicio} AND S.PDIC_SIM = 6 AND S.CODI_IMP IN (1, (CASE WHEN G.ESTA_EMP IN ('MT', 'RN', 'SC', 'SP', 'PR') THEN 8 ELSE 0 END), (CASE WHEN G.ESTA_EMP IN ('SE') THEN 27 ELSE 0 END), (CASE WHEN G.ESTA_EMP IN ('SC') AND I.PDIC_IMP <> 7 THEN 27 ELSE 0 END), (CASE WHEN G.ESTA_EMP IN ('SE', 'RN', 'TO') THEN 31 ELSE 0 END), (CASE WHEN G.ESTA_EMP IN ('SC') AND TD_FUNSOC_POR_RECOLHIMENTO.EXISTE = 0 THEN 32 ELSE 0 END), (CASE WHEN G.ESTA_EMP IN ('SC') AND I.PDIC_IMP <> 7 THEN 34 ELSE 0 END), (CASE WHEN G.ESTA_EMP IN ('SC') THEN 35 ELSE 0 END), (CASE WHEN G.ESTA_EMP IN ('SC') THEN 36 ELSE 0 END), (CASE WHEN G.ESTA_EMP IN ('SC') THEN 37 ELSE 0 END), (CASE WHEN G.ESTA_EMP IN ('SC') THEN 46 ELSE 0 END), (CASE WHEN G.ESTA_EMP IN ('RS') THEN 55 ELSE 0 END)) AND (S.SREC_SIM - S.ODED_SIM - (CASE WHEN G.ESTA_EMP IN ('MS') THEN S.VDI22_SIM ELSE 0 END)) > 0 AND (G.ESTA_EMP NOT IN ('SC', 'SP') OR NOT EXISTS(SELECT 1 FROM BETHADBA.EFSDOIMP_PARCELAS AS P WHERE P.CODI_EMP = S.CODI_EMP AND P.DATA_SIM = S.DATA_SIM AND P.PDIC_SIM = S.PDIC_SIM AND P.CODI_IMP = 1)) AND G.ESTA_EMP NOT IN ('GO', 'MG') UNION ALL SELECT FUNSOC_POR_RECOLHIMENTO.CODIGO_RECOLHIMENTO AS CODIGO, FUNSOC_POR_RECOLHIMENTO.DATA_VENCIMENTO AS VENCIMENTO, FUNSOC_POR_RECOLHIMENTO.VALOR_IMPOSTO AS VALOR, 1 AS TIPO, '' AS ORGAO_ARRECADADOR FROM BETHADBA.EFSDOIMP_FUNSOC_POR_RECOLHIMENTO AS FUNSOC_POR_RECOLHIMENTO INNER JOIN BETHADBA.GEEMPRE AS EMPRESA ON EMPRESA.CODI_EMP = FUNSOC_POR_RECOLHIMENTO.CODI_EMP WHERE FUNSOC_POR_RECOLHIMENTO.CODI_EMP = {cod_emp} AND FUNSOC_POR_RECOLHIMENTO.DATA_SIM BETWEEN {data_inicio} AND {data_fim} AND FUNSOC_POR_RECOLHIMENTO.CODI_IMP = 32 AND FUNSOC_POR_RECOLHIMENTO.VALOR_IMPOSTO > 0 AND EMPRESA.ESTA_EMP = 'SC' UNION ALL SELECT I.CDRN_IMP AS CODIGO, P.VCTO_SIMP AS VENCIMENTO, P.VALOR_SIMP AS VALOR, 1 AS TIPO, '' AS ORGAO_ARRECADADOR FROM BETHADBA.EFSDOIMP AS S INNER JOIN BETHADBA.EFIMPOSTO AS I ON S.CODI_EMP = I.CODI_EMP AND S.CODI_IMP = I.CODI_IMP INNER JOIN BETHADBA.EFSDOIMP_PARCELAS AS P ON P.CODI_EMP = S.CODI_EMP AND P.DATA_SIM = S.DATA_SIM AND P.PDIC_SIM = S.PDIC_SIM AND P.CODI_IMP = S.CODI_IMP INNER JOIN BETHADBA.GEEMPRE AS G ON G.CODI_EMP = S.CODI_EMP WHERE S.CODI_EMP = {cod_emp} AND S.DATA_SIM >= {data_inicio} AND S.DATA_SIM <= {data_fim} AND P.CODI_IMP = 1 AND S.SDEV_SIM > 0 AND G.ESTA_EMP NOT IN ('GO', 'SP') UNION ALL SELECT I.CDRN_IMP AS CODIGO, S.DVCT_SIM AS VENCIMENTO, S.SDEV_SIM AS VALOR, 1 AS TIPO, '' AS ORGAO_ARRECADADOR FROM BETHADBA.EFSDOIMP AS S INNER JOIN BETHADBA.EFIMPOSTO AS I ON S.CODI_EMP = I.CODI_EMP AND S.CODI_IMP = I.CODI_IMP INNER JOIN BETHADBA.GEEMPRE AS G ON G.CODI_EMP = S.CODI_EMP WHERE S.CODI_EMP = {cod_emp} AND S.DATA_SIM >= {data_inicio} AND S.DATA_SIM <= {data_fim} AND I.CODI_IMP = 125 AND S.SDEV_SIM > 0 AND G.ESTA_EMP = 'ES' UNION ALL SELECT MOVIMENTO_AJUSTE_ESTADUAL_SC_COMPLEMENTAR.CODIGO_RECEITA AS CODIGO, MOVIMENTO_AJUSTE_ESTADUAL_SC_COMPLEMENTAR.DATA_VENCIMENTO AS VENCIMENTO, MOVIMENTO_AJUSTE_ESTADUAL_SC.VALOR AS VALOR, 2 AS TIPO, '' AS ORGAO_ARRECADADOR FROM BETHADBA.EFMOVIMENTO_AJUSTE_ESTADUAL_SC AS MOVIMENTO_AJUSTE_ESTADUAL_SC INNER JOIN BETHADBA.EFMOVIMENTO_AJUSTE_ESTADUAL_SC_COMPLEMENTAR AS MOVIMENTO_AJUSTE_ESTADUAL_SC_COMPLEMENTAR ON MOVIMENTO_AJUSTE_ESTADUAL_SC_COMPLEMENTAR.CODI_EMP = MOVIMENTO_AJUSTE_ESTADUAL_SC.CODI_EMP AND MOVIMENTO_AJUSTE_ESTADUAL_SC_COMPLEMENTAR.I_AJUSTE = MOVIMENTO_AJUSTE_ESTADUAL_SC.I_AJUSTE INNER JOIN BETHADBA.GEEMPRE AS EMPRESA ON EMPRESA.CODI_EMP = MOVIMENTO_AJUSTE_ESTADUAL_SC.CODI_EMP WHERE MOVIMENTO_AJUSTE_ESTADUAL_SC.CODI_EMP = {cod_emp} AND MOVIMENTO_AJUSTE_ESTADUAL_SC.DATA_AJUSTE BETWEEN DATE({data_inicio}) AND DATE({data_fim}) AND MOVIMENTO_AJUSTE_ESTADUAL_SC.CODI_AJU = 28 AND EMPRESA.ESTA_EMP = 'SC' UNION ALL SELECT MOVIMENTO_AJUSTE_ESTADUAL_SC_COMPLEMENTAR.CODIGO_RECEITA AS CODIGO, MOVIMENTO_AJUSTE_ESTADUAL_SC_COMPLEMENTAR.DATA_VENCIMENTO AS VENCIMENTO, MOVIMENTO_AJUSTE_ESTADUAL_SC.VALOR AS VALOR, 3 AS TIPO, '' AS ORGAO_ARRECADADOR FROM BETHADBA.EFMOVIMENTO_AJUSTE_ESTADUAL_SC AS MOVIMENTO_AJUSTE_ESTADUAL_SC INNER JOIN BETHADBA.EFMOVIMENTO_AJUSTE_ESTADUAL_SC_COMPLEMENTAR AS MOVIMENTO_AJUSTE_ESTADUAL_SC_COMPLEMENTAR ON MOVIMENTO_AJUSTE_ESTADUAL_SC_COMPLEMENTAR.CODI_EMP = MOVIMENTO_AJUSTE_ESTADUAL_SC.CODI_EMP AND MOVIMENTO_AJUSTE_ESTADUAL_SC_COMPLEMENTAR.I_AJUSTE = MOVIMENTO_AJUSTE_ESTADUAL_SC.I_AJUSTE INNER JOIN BETHADBA.GEEMPRE AS EMPRESA ON EMPRESA.CODI_EMP = MOVIMENTO_AJUSTE_ESTADUAL_SC.CODI_EMP WHERE MOVIMENTO_AJUSTE_ESTADUAL_SC.CODI_EMP = {cod_emp} AND MOVIMENTO_AJUSTE_ESTADUAL_SC.DATA_AJUSTE BETWEEN DATE({data_inicio}) AND DATE({data_fim}) AND MOVIMENTO_AJUSTE_ESTADUAL_SC.CODI_AJU = 29 AND EMPRESA.ESTA_EMP = 'SC' UNION ALL SELECT TDAUX.CODIGO AS CODIGO, MAX(S.VCTOPRODEC_SIM) AS VENCIMENTO, SUM(S.VDI11_SIM) AS VALOR, 4 AS TIPO, '' AS ORGAO_ARRECADADOR FROM BETHADBA.EFSDOIMP AS S INNER JOIN BETHADBA.GEEMPRE AS G ON S.CODI_EMP = G.CODI_EMP, LATERAL(SELECT COALESCE((SELECT P.CODREC_PDC FROM BETHADBA.EFSCPRODEC_2004 AS P WHERE P.CODI_EMP = S.CODI_EMP AND P.PERINI_PDC <= S.DATA_SIM AND P.PERFIN_PDC >= S.DATA_SIM), ' ') AS CODIGO FROM DSDBA.DUMMY) AS TDAUX WHERE S.CODI_EMP = {cod_emp} AND S.DATA_SIM >= {data_inicio} AND S.DATA_SIM <= {data_fim} AND G.ESTA_EMP = 'SC' AND S.CODI_IMP = 1 AND S.VDI11_SIM > 0 GROUP BY TDAUX.CODIGO UNION ALL SELECT TDAUX.CODIGO AS CODIGO, MAX(S.DVCT_SIM) AS VENCIMENTO, SUM(S.SDEV_SIM) AS VALOR, 5 AS TIPO, '' AS ORGAO_ARRECADADOR FROM BETHADBA.EFSDOIMP AS S INNER JOIN BETHADBA.GEEMPRE AS G ON S.CODI_EMP = G.CODI_EMP, LATERAL(SELECT COALESCE((SELECT I.CDRN_IMP FROM BETHADBA.EFIMPOSTO AS I WHERE I.CODI_EMP = S.CODI_EMP AND I.CODI_IMP = 27), ' ') AS CODIGO FROM DSDBA.DUMMY) AS TDAUX WHERE S.CODI_EMP = {cod_emp} AND S.DATA_SIM >= {data_inicio} AND S.DATA_SIM <= {data_fim} AND G.ESTA_EMP IN ('AL') AND S.CODI_IMP = 27 AND S.SDEV_SIM > 0 GROUP BY TDAUX.CODIGO UNION ALL SELECT I.CDRN_IMP AS CODIGO, S.DVCT_SIM AS VENCIMENTO, S.SDEV_SIM AS VALOR, 6 AS TIPO, '' AS ORGAO_ARRECADADOR FROM BETHADBA.EFSDOIMP AS S INNER JOIN BETHADBA.EFIMPOSTO AS I ON S.CODI_EMP = I.CODI_EMP AND S.CODI_IMP = I.CODI_IMP INNER JOIN BETHADBA.GEEMPRE AS G ON S.CODI_EMP = G.CODI_EMP INNER JOIN BETHADBA.EFPARAM AS P ON S.CODI_EMP = P.CODI_EMP WHERE S.CODI_EMP = {cod_emp} AND S.DATA_SIM = {data_inicio} AND 6 IN (3, 5, 6, 8) AND S.CODI_IMP IN (9) AND G.ESTA_EMP IN ('SE') AND S.SDEV_SIM > 0 AND P.SUBST_PAR = 'S' UNION ALL SELECT IMPOSTO_VIGENCIA.CDRN_IMP AS CODIGO, SALDO.DVCT_SIM AS VENCIMENTO, SUBTRI.SALDO_DEVEDOR AS VALOR, 6 AS TIPO, '' AS ORGAO_ARRECADADOR FROM BETHADBA.EFSDOIMP AS SALDO INNER JOIN BETHADBA.EFIMPOSTO AS IMPOSTO_VIGENCIA ON IMPOSTO_VIGENCIA.CODI_EMP = SALDO.CODI_EMP AND IMPOSTO_VIGENCIA.CODI_IMP = SALDO.CODI_IMP INNER JOIN BETHADBA.GEEMPRE AS EMPRESA ON EMPRESA.CODI_EMP = SALDO.CODI_EMP INNER JOIN BETHADBA.EFPARAMETRO_VIGENCIA AS PARAMETRO ON PARAMETRO.CODI_EMP = SALDO.CODI_EMP AND PARAMETRO.VIGENCIA_PAR = DSDBA.D_BUSCA_VIGENCIA_PARAMETRO(PARAMETRO.CODI_EMP, SALDO.DATA_SIM) INNER JOIN BETHADBA.EFSDOIMP_SUBTRI_POR_UF AS SUBTRI ON SUBTRI.CODI_EMP = SALDO.CODI_EMP AND SUBTRI.DATA_SIM = SALDO.DATA_SIM AND SUBTRI.PDIC_SIM = SALDO.PDIC_SIM AND SUBTRI.CODI_IMP = SALDO.CODI_IMP AND SUBTRI.SIGLA_UF = EMPRESA.ESTA_EMP WHERE SALDO.CODI_EMP = {cod_emp} AND SALDO.DATA_SIM = {data_inicio} AND 6 IN (3, 5, 6, 8) AND SALDO.CODI_IMP IN (9) AND EMPRESA.ESTA_EMP IN ('SC') AND SUBTRI.SALDO_DEVEDOR > 0 AND PARAMETRO.SUBST_PAR = 'S' UNION ALL SELECT I.CDRN_IMP AS CODIGO, E.DENT_ENT AS VENCIMENTO, P.VLOR_IEN AS VALOR, 7 AS TIPO, '' AS ORGAO_ARRECADADOR FROM BETHADBA.EFIMPENT AS P INNER JOIN BETHADBA.EFENTRADAS AS E ON P.CODI_EMP = E.CODI_EMP AND P.CODI_ENT = E.CODI_ENT INNER JOIN BETHADBA.EFIMPOSTO AS I ON P.CODI_IMP = I.CODI_IMP AND P.CODI_EMP = I.CODI_EMP INNER JOIN BETHADBA.GEEMPRE AS G ON E.CODI_EMP = G.CODI_EMP INNER JOIN BETHADBA.GEIMPOSTO_VIGENCIA AS IMPOSTO_VIGENCIA ON IMPOSTO_VIGENCIA.CODI_EMP = E.CODI_EMP AND IMPOSTO_VIGENCIA.CODI_IMP = I.CODI_IMP AND IMPOSTO_VIGENCIA.VIGENCIA_IMP = DSDBA.D_BUSCA_VIGENCIA_IMPOSTO(IMPOSTO_VIGENCIA.CODI_EMP, IMPOSTO_VIGENCIA.CODI_IMP, E.DENT_ENT) WHERE E.CODI_EMP = {cod_emp} AND E.DENT_ENT >= {data_inicio} AND E.DENT_ENT <= {data_fim} AND I.PDIC_IMP = 7 AND 6 IN (3, 5, 6, 8) AND P.CODI_IMP IN (27, 34) AND G.ESTA_EMP = 'SC' AND P.VLOR_IEN > 0 AND IMPOSTO_VIGENCIA.TCAL_IMP <> 'P' UNION ALL SELECT IMPOSTO.CDRN_IMP AS CODIGO, ENTRADAS.DENT_ENT AS VENCIMENTO, EFMVEPRO_ICMSA.VALOR_ICMSA AS VALOR, 7 AS TIPO, '' AS ORGAO_ARRECADADOR FROM BETHADBA.EFENTRADAS AS ENTRADAS INNER JOIN BETHADBA.EFMVEPRO_ICMSA AS EFMVEPRO_ICMSA ON EFMVEPRO_ICMSA.CODI_EMP = ENTRADAS.CODI_EMP AND EFMVEPRO_ICMSA.CODI_ENT = ENTRADAS.CODI_ENT INNER JOIN BETHADBA.EFIMPOSTO AS IMPOSTO ON ENTRADAS.CODI_EMP = IMPOSTO.CODI_EMP INNER JOIN BETHADBA.GEEMPRE AS GEEMPRE ON ENTRADAS.CODI_EMP = GEEMPRE.CODI_EMP INNER JOIN BETHADBA.GEIMPOSTO_VIGENCIA AS IMPOSTO_VIGENCIA ON IMPOSTO_VIGENCIA.CODI_EMP = ENTRADAS.CODI_EMP AND IMPOSTO_VIGENCIA.CODI_IMP = IMPOSTO.CODI_IMP AND IMPOSTO_VIGENCIA.VIGENCIA_IMP = DSDBA.D_BUSCA_VIGENCIA_IMPOSTO(IMPOSTO_VIGENCIA.CODI_EMP, IMPOSTO_VIGENCIA.CODI_IMP, ENTRADAS.DENT_ENT) WHERE ENTRADAS.CODI_EMP = {cod_emp} AND ENTRADAS.DENT_ENT >= {data_inicio} AND ENTRADAS.DENT_ENT <= {data_fim} AND IMPOSTO.PDIC_IMP = 7 AND IMPOSTO.CODI_IMP = 27 AND 6 IN (3, 5, 6, 8) AND GEEMPRE.ESTA_EMP = 'SC' AND EFMVEPRO_ICMSA.VALOR_ICMSA > 0 AND IMPOSTO_VIGENCIA.TCAL_IMP = 'P' UNION ALL SELECT I.CDRN_IMP AS CODIGO, S.DVCT_SIM AS VENCIMENTO, T.SDEV_SST AS VALOR, 9 AS TIPO, '' AS ORGAO_ARRECADADOR FROM BETHADBA.EFSDOIMP AS S INNER JOIN BETHADBA.EFSDOSUBTRI AS T ON S.CODI_EMP = T.CODI_EMP AND S.CODI_IMP = T.CODI_IMP AND S.DATA_SIM = T.DATA_SIM AND S.PDIC_SIM = T.PDIC_SIM INNER JOIN BETHADBA.EFIMPOSTO AS I ON S.CODI_EMP = I.CODI_EMP AND S.CODI_IMP = I.CODI_IMP INNER JOIN BETHADBA.EFPARAM AS P ON S.CODI_EMP = P.CODI_EMP INNER JOIN BETHADBA.GEEMPRE AS G ON G.CODI_EMP = P.CODI_EMP WHERE S.CODI_EMP = {cod_emp} AND S.DATA_SIM >= {data_inicio} AND S.DATA_SIM <= {data_fim} AND S.CODI_IMP = 9 AND T.SDEV_SST > 0 AND P.SUBST_PAR = 'S' AND T.SIGL_EST = 'RN' AND G.ESTA_EMP = 'RN' UNION ALL SELECT TDAUX.CODIGO AS CODIGO, MAX(S.DVCT_SIM) AS VENCIMENTO, SUM(S.VDI5_SIM) AS VALOR, 10 AS TIPO, '' AS ORGAO_ARRECADADOR FROM BETHADBA.EFSDOIMP AS S INNER JOIN BETHADBA.GEEMPRE AS G ON S.CODI_EMP = G.CODI_EMP, LATERAL(SELECT COALESCE((SELECT I.CDRN_IMP FROM BETHADBA.EFIMPOSTO AS I WHERE I.CODI_EMP = S.CODI_EMP AND I.CODI_IMP = 20), ' ') AS CODIGO FROM DSDBA.DUMMY) AS TDAUX WHERE S.CODI_EMP = {cod_emp} AND S.DATA_SIM >= {data_inicio} AND S.DATA_SIM <= {data_fim} AND G.ESTA_EMP IN ('MG') AND S.CODI_IMP = 1 AND S.VDI5_SIM > 0 GROUP BY TDAUX.CODIGO UNION ALL SELECT TDAUX.CODIGO AS CODIGO, MAX(S.DVCT_SIM) AS VENCIMENTO, SUM(S.VDI7_SIM) AS VALOR, 11 AS TIPO, '' AS ORGAO_ARRECADADOR FROM BETHADBA.EFSDOIMP AS S INNER JOIN BETHADBA.GEEMPRE AS G ON S.CODI_EMP = G.CODI_EMP, LATERAL(SELECT COALESCE((SELECT I.CDRN_IMP FROM BETHADBA.EFIMPOSTO AS I WHERE I.CODI_EMP = S.CODI_EMP AND I.CODI_IMP = 21), ' ') AS CODIGO FROM DSDBA.DUMMY) AS TDAUX WHERE S.CODI_EMP = {cod_emp} AND S.DATA_SIM >= {data_inicio} AND S.DATA_SIM <= {data_fim} AND G.ESTA_EMP IN ('MG') AND S.CODI_IMP = 1 AND S.VDI7_SIM > 0 GROUP BY TDAUX.CODIGO UNION ALL SELECT I.CODEXCED_IMP AS CODIGO, S.DVCT_SIM AS VENCIMENTO, S.VDI7_SIM AS VALOR, 12 AS TIPO, '' AS ORGAO_ARRECADADOR FROM BETHADBA.EFSDOIMP AS S INNER JOIN BETHADBA.EFIMPOSTO AS I ON S.CODI_EMP = I.CODI_EMP AND S.CODI_IMP = I.CODI_IMP INNER JOIN BETHADBA.GEEMPRE AS G ON S.CODI_EMP = G.CODI_EMP WHERE S.CODI_EMP = {cod_emp} AND S.DATA_SIM = {data_inicio} AND G.ESTA_EMP = 'AM' AND S.PDIC_SIM = 6 AND S.CODI_IMP = 1 AND S.VDI7_SIM > 0 UNION ALL SELECT I.CDRN_IMP AS CODIGO, S.DVCT_SIM AS VENCIMENTO, S.SDEV_SIM AS VALOR, 13 AS TIPO, '' AS ORGAO_ARRECADADOR FROM BETHADBA.EFSDOIMP AS S INNER JOIN BETHADBA.EFIMPOSTO AS I ON S.CODI_EMP = I.CODI_EMP AND S.CODI_IMP = I.CODI_IMP INNER JOIN BETHADBA.GEEMPRE AS G ON S.CODI_EMP = G.CODI_EMP WHERE S.CODI_EMP = {cod_emp} AND S.DATA_SIM = {data_inicio} AND G.ESTA_EMP = 'AL' AND S.PDIC_SIM = 6 AND S.CODI_IMP = 49 AND S.SDEV_SIM > 0 UNION ALL SELECT I.CDRN_IMP AS CODIGO, S.DVCT_SIM AS VENCIMENTO, S.SDEV_SIM AS VALOR, 13 AS TIPO, '' AS ORGAO_ARRECADADOR FROM BETHADBA.EFSDOIMP AS S INNER JOIN BETHADBA.EFIMPOSTO AS I ON S.CODI_EMP = I.CODI_EMP AND S.CODI_IMP = I.CODI_IMP INNER JOIN BETHADBA.GEEMPRE AS G ON S.CODI_EMP = G.CODI_EMP WHERE S.CODI_EMP = {cod_emp} AND S.DATA_SIM = {data_inicio} AND G.ESTA_EMP = 'RJ' AND S.PDIC_SIM = 6 AND S.CODI_IMP IN (8, 55, 57) AND S.SDEV_SIM > 0 UNION ALL SELECT IMPOSTO_VIGENCIA.CDRN_IMP AS CODIGO, TDAUX_2.VENCIMENTO AS VENCIMENTO, TDAUX_2.VALOR AS VALOR, 14 AS TIPO, '' AS ORGAO_ARRECADADOR FROM BETHADBA.EFMOVIMENTO_AJUSTE_ESTADUAL_SC AS MOVIMENTO_AJUSTE_ESTADUAL_SC INNER JOIN BETHADBA.EFMOVIMENTO_AJUSTE_ESTADUAL_SC_DETALHAMENTO_16 AS MOVIMENTO_AJUSTE_ESTADUAL_DETALHAMENTO_16 ON MOVIMENTO_AJUSTE_ESTADUAL_DETALHAMENTO_16.CODI_EMP = MOVIMENTO_AJUSTE_ESTADUAL_SC.CODI_EMP AND MOVIMENTO_AJUSTE_ESTADUAL_DETALHAMENTO_16.I_AJUSTE = MOVIMENTO_AJUSTE_ESTADUAL_SC.I_AJUSTE INNER JOIN BETHADBA.EFAJUSTES AS AJUSTE ON AJUSTE.CODI_EMP = MOVIMENTO_AJUSTE_ESTADUAL_SC.CODI_EMP AND AJUSTE.CODI_AJU = MOVIMENTO_AJUSTE_ESTADUAL_SC.CODI_AJU INNER JOIN BETHADBA.GEEMPRE AS EMPRESA ON EMPRESA.CODI_EMP = MOVIMENTO_AJUSTE_ESTADUAL_SC.CODI_EMP INNER JOIN BETHADBA.GEIMPOSTO_VIGENCIA AS IMPOSTO_VIGENCIA ON IMPOSTO_VIGENCIA.CODI_EMP = AJUSTE.CODI_EMP AND IMPOSTO_VIGENCIA.CODI_IMP = AJUSTE.CODI_IMP AND IMPOSTO_VIGENCIA.VIGENCIA_IMP = DSDBA.D_BUSCA_VIGENCIA_IMPOSTO(AJUSTE.CODI_EMP, AJUSTE.CODI_IMP, MOVIMENTO_AJUSTE_ESTADUAL_SC.DATA_AJUSTE), LATERAL(SELECT DSDBA.I_DIF_M(MOVIMENTO_AJUSTE_ESTADUAL_SC.DATA_AJUSTE, MOVIMENTO_AJUSTE_ESTADUAL_DETALHAMENTO_16.VENCIMENTO) AS MESES, CAST((MOVIMENTO_AJUSTE_ESTADUAL_DETALHAMENTO_16.VALOR_IMPOSTO / MOVIMENTO_AJUSTE_ESTADUAL_DETALHAMENTO_16.QUANTIDADE_PARCELAS) AS NUMERIC(13, 2)) AS VALOR FROM DSDBA.DUMMY) AS TDAUX, LATERAL(SELECT CASE WHEN YEAR(MOVIMENTO_AJUSTE_ESTADUAL_DETALHAMENTO_16.PERIODO_REFERENCIA) = YEAR({data_inicio}) AND MONTH(MOVIMENTO_AJUSTE_ESTADUAL_DETALHAMENTO_16.PERIODO_REFERENCIA) = MONTH({data_inicio}) THEN TDAUX.VALOR + (MOVIMENTO_AJUSTE_ESTADUAL_DETALHAMENTO_16.VALOR_IMPOSTO - (TDAUX.VALOR * MOVIMENTO_AJUSTE_ESTADUAL_DETALHAMENTO_16.QUANTIDADE_PARCELAS)) ELSE TDAUX.VALOR END AS VALOR, DSDBA.D_YMD(YEAR({data_inicio}), MONTH({data_inicio}) + TDAUX.MESES, DAY(MOVIMENTO_AJUSTE_ESTADUAL_DETALHAMENTO_16.VENCIMENTO)) AS VENCIMENTO FROM DSDBA.DUMMY) AS TDAUX_2 WHERE MOVIMENTO_AJUSTE_ESTADUAL_SC.CODI_EMP = {cod_emp} AND DSDBA.D_YMD(YEAR(MOVIMENTO_AJUSTE_ESTADUAL_SC.DATA_AJUSTE), MONTH(MOVIMENTO_AJUSTE_ESTADUAL_SC.DATA_AJUSTE), 1) <= DATE({data_inicio}) AND DSDBA.D_YMD(YEAR(MOVIMENTO_AJUSTE_ESTADUAL_DETALHAMENTO_16.PERIODO_REFERENCIA), MONTH(MOVIMENTO_AJUSTE_ESTADUAL_DETALHAMENTO_16.PERIODO_REFERENCIA) + 1, - 1) >= DATE({data_inicio}) AND EMPRESA.ESTA_EMP = 'SC' AND AJUSTE.CODI_IMP = 9 AND AJUSTE.OPER_AJU = 40 UNION ALL SELECT P.CODIGO_RECEITA AS CODIGO, P.VCTO_SIMP AS VENCIMENTO, P.VALOR_SIMP AS VALOR, 15 AS TIPO, '' AS ORGAO_ARRECADADOR FROM BETHADBA.EFSDOIMP AS S INNER JOIN BETHADBA.EFIMPOSTO AS I ON S.CODI_EMP = I.CODI_EMP AND S.CODI_IMP = I.CODI_IMP INNER JOIN BETHADBA.EFSDOIMP_PARCELAS AS P ON P.CODI_EMP = S.CODI_EMP AND P.DATA_SIM = S.DATA_SIM AND P.PDIC_SIM = S.PDIC_SIM AND P.CODI_IMP = S.CODI_IMP INNER JOIN BETHADBA.GEEMPRE AS G ON G.CODI_EMP = S.CODI_EMP WHERE S.CODI_EMP = {cod_emp} AND S.DATA_SIM >= {data_inicio} AND S.DATA_SIM <= {data_fim} AND P.CODI_IMP = 1 AND S.SDEV_SIM > 0 AND G.ESTA_EMP = 'SP' UNION ALL SELECT COALESCE(IMPOSTO_VIGENCIA.CDRN_IMP, '') AS CODIGO, PAGAMENTO_IMPOSTO.DPAG_PIM AS VENCIMENTO, (PAGAMENTO_IMPOSTO.VPAG_PIM) AS VALOR, 16 AS TIPO, PAGAMENTO_IMPOSTO.ORGAO_ARRECADADOR AS ORGAO_ARRECADADOR FROM BETHADBA.EFPAGIMP AS PAGAMENTO_IMPOSTO INNER JOIN BETHADBA.GEEMPRE AS EMPRESA ON EMPRESA.CODI_EMP = PAGAMENTO_IMPOSTO.CODI_EMP INNER JOIN BETHADBA.GEIMPOSTO_VIGENCIA AS IMPOSTO_VIGENCIA ON IMPOSTO_VIGENCIA.CODI_EMP = PAGAMENTO_IMPOSTO.CODI_EMP AND IMPOSTO_VIGENCIA.CODI_IMP = PAGAMENTO_IMPOSTO.CODI_IMP WHERE PAGAMENTO_IMPOSTO.CODI_EMP = {cod_emp} AND PAGAMENTO_IMPOSTO.DATA_PIM BETWEEN {data_inicio} AND {data_fim} AND PAGAMENTO_IMPOSTO.CODI_IMP = 1 AND PAGAMENTO_IMPOSTO.IMPOSTO_PARCELADO = 'N' AND EMPRESA.ESTA_EMP = 'MG' AND IMPOSTO_VIGENCIA.VIGENCIA_IMP = DSDBA.D_BUSCA_VIGENCIA_IMPOSTO(PAGAMENTO_IMPOSTO.CODI_EMP, PAGAMENTO_IMPOSTO.CODI_IMP, PAGAMENTO_IMPOSTO.DATA_PIM) UNION ALL SELECT P.CODIGO_RECOLHIMENTO AS CODIGO, P.DATA_VENCIMENTO AS VENCIMENTO, P.SALDO_RECOLHER AS VALOR, 1 AS TIPO, '' AS ORGAO_ARRECADADOR FROM BETHADBA.EFSDOIMP AS S INNER JOIN BETHADBA.EFSDOIMP_POR_RECOLHIMENTO AS P ON P.CODI_EMP = S.CODI_EMP AND P.DATA_SIM = S.DATA_SIM AND P.PDIC_SIM = S.PDIC_SIM AND P.CODI_IMP = S.CODI_IMP INNER JOIN BETHADBA.GEEMPRE AS G ON G.CODI_EMP = S.CODI_EMP WHERE S.CODI_EMP = {cod_emp} AND S.DATA_SIM >= {data_inicio} AND S.DATA_SIM <= {data_fim} AND P.CODI_IMP IN(31, 116) AND P.SALDO_RECOLHER > 0 AND G.ESTA_EMP = 'SC' AND NOT EXISTS(SELECT 1 FROM BETHADBA.EFSDOIMP_POR_RECOLHIMENTO_POR_NOTA AS N WHERE N.CODI_EMP = P.CODI_EMP AND N.DATA_SIM = P.DATA_SIM AND N.PDIC_SIM = P.PDIC_SIM AND N.CODI_IMP = P.CODI_IMP AND N.I_RECOLHIMENTO = P.I_RECOLHIMENTO) UNION ALL SELECT N.CODIGO_RECOLHIMENTO AS CODIGO, N.DATA_VENCIMENTO AS VENCIMENTO, N.VALOR_RECOLHER AS VALOR, 1 AS TIPO, '' AS ORGAO_ARRECADADOR FROM BETHADBA.EFSDOIMP AS S INNER JOIN BETHADBA.EFSDOIMP_POR_RECOLHIMENTO AS P ON P.CODI_EMP = S.CODI_EMP AND P.DATA_SIM = S.DATA_SIM AND P.PDIC_SIM = S.PDIC_SIM AND P.CODI_IMP = S.CODI_IMP INNER JOIN BETHADBA.EFSDOIMP_POR_RECOLHIMENTO_POR_NOTA AS N ON N.CODI_EMP = P.CODI_EMP AND N.DATA_SIM = P.DATA_SIM AND N.PDIC_SIM = P.PDIC_SIM AND N.CODI_IMP = P.CODI_IMP AND N.I_RECOLHIMENTO = P.I_RECOLHIMENTO INNER JOIN BETHADBA.GEEMPRE AS G ON G.CODI_EMP = S.CODI_EMP WHERE S.CODI_EMP = {cod_emp} AND S.DATA_SIM >= {data_inicio} AND S.DATA_SIM <= {data_fim} AND P.CODI_IMP IN(31, 116) AND N.VALOR_RECOLHER > 0 AND G.ESTA_EMP = 'SC' UNION ALL SELECT P.CODIGO_RECOLHIMENTO AS CODIGO, P.DATA_VENCIMENTO AS VENCIMENTO, P.SALDO_RECOLHER AS VALOR, 1 AS TIPO, '' AS ORGAO_ARRECADADOR FROM BETHADBA.EFSDOIMP AS S INNER JOIN BETHADBA.EFSDOIMP_POR_RECOLHIMENTO AS P ON P.CODI_EMP = S.CODI_EMP AND P.DATA_SIM = S.DATA_SIM AND P.PDIC_SIM = S.PDIC_SIM AND P.CODI_IMP = S.CODI_IMP INNER JOIN BETHADBA.GEEMPRE AS G ON G.CODI_EMP = S.CODI_EMP WHERE S.CODI_EMP = {cod_emp} AND S.DATA_SIM >= {data_inicio} AND S.DATA_SIM <= {data_fim} AND P.CODI_IMP = 42 AND P.SALDO_RECOLHER > 0 AND G.ESTA_EMP = 'SC' AND S.PDIC_SIM <> 16 UNION ALL SELECT P.CODIGO_RECOLHIMENTO AS CODIGO, P.DATA_VENCIMENTO AS VENCIMENTO, P.VALOR_RECOLHER AS VALOR, 1 AS TIPO, '' AS ORGAO_ARRECADADOR FROM BETHADBA.EFSDOIMP AS S INNER JOIN BETHADBA.EFSDOIMP_POR_RECOLHIMENTO_POR_NOTA AS P ON P.CODI_EMP = S.CODI_EMP AND P.DATA_SIM = S.DATA_SIM AND P.PDIC_SIM = S.PDIC_SIM AND P.CODI_IMP = S.CODI_IMP INNER JOIN BETHADBA.GEEMPRE AS G ON G.CODI_EMP = S.CODI_EMP WHERE S.CODI_EMP = {cod_emp} AND S.DATA_SIM >= {data_inicio} AND S.DATA_SIM <= {data_fim} AND P.CODI_IMP = 42 AND P.VALOR_RECOLHER > 0 AND G.ESTA_EMP = 'SC' AND S.PDIC_SIM = 16 UNION ALL SELECT GEIMPOSTO_VIGENCIA.CDRN_IMP AS CODIGO, EFSDOIMP.DVCT_SIM AS VENCIMENTO, EFSDOIMP.SDEV_SIM AS VALOR, 1 AS TIPO, '' AS ORGAO_ARRECADADOR FROM BETHADBA.EFSDOIMP AS EFSDOIMP INNER JOIN BETHADBA.GEIMPOSTO_VIGENCIA AS GEIMPOSTO_VIGENCIA ON GEIMPOSTO_VIGENCIA.CODI_EMP = EFSDOIMP.CODI_EMP AND GEIMPOSTO_VIGENCIA.CODI_IMP = EFSDOIMP.CODI_IMP AND GEIMPOSTO_VIGENCIA.VIGENCIA_IMP = DSDBA.D_BUSCA_VIGENCIA_IMPOSTO(EFSDOIMP.CODI_EMP, EFSDOIMP.CODI_IMP, EFSDOIMP.DATA_SIM) INNER JOIN BETHADBA.GEEMPRE AS EMPRESA ON EMPRESA.CODI_EMP = EFSDOIMP.CODI_EMP WHERE EFSDOIMP.CODI_EMP = {cod_emp} AND EFSDOIMP.DATA_SIM BETWEEN {data_inicio} AND {data_fim} AND EFSDOIMP.CODI_IMP = 121 AND EFSDOIMP.PDIC_SIM IN (1, 2) AND EMPRESA.ESTA_EMP <> 'GO' UNION ALL SELECT EFSDOIMP_POR_RECOLHIMENTO.CODIGO_RECOLHIMENTO AS CODIGO, EFSDOIMP_POR_RECOLHIMENTO.DATA_VENCIMENTO AS VENCIMENTO, EFSDOIMP_POR_RECOLHIMENTO.SALDO_RECOLHER AS VALOR, 1 AS TIPO, '' AS ORGAO_ARRECADADOR FROM BETHADBA.EFSDOIMP AS EFSDOIMP INNER JOIN BETHADBA.EFSDOIMP_POR_RECOLHIMENTO AS EFSDOIMP_POR_RECOLHIMENTO ON EFSDOIMP_POR_RECOLHIMENTO.CODI_EMP = EFSDOIMP.CODI_EMP AND EFSDOIMP_POR_RECOLHIMENTO.DATA_SIM = EFSDOIMP.DATA_SIM AND EFSDOIMP_POR_RECOLHIMENTO.PDIC_SIM = EFSDOIMP.PDIC_SIM AND EFSDOIMP_POR_RECOLHIMENTO.CODI_IMP = EFSDOIMP.CODI_IMP INNER JOIN BETHADBA.GEEMPRE AS GEEMPRE ON GEEMPRE.CODI_EMP = EFSDOIMP.CODI_EMP WHERE EFSDOIMP.CODI_EMP = {cod_emp} AND EFSDOIMP.DATA_SIM >= {data_inicio} AND EFSDOIMP.DATA_SIM <= {data_fim} AND EFSDOIMP_POR_RECOLHIMENTO.CODI_IMP = 42 AND EFSDOIMP_POR_RECOLHIMENTO.SALDO_RECOLHER > 0 AND GEEMPRE.ESTA_EMP = 'MT' AND EFSDOIMP.PDIC_SIM <> 16 UNION ALL SELECT EFSDOIMP_POR_RECOLHIMENTO_POR_NOTA.CODIGO_RECOLHIMENTO AS CODIGO, EFSDOIMP_POR_RECOLHIMENTO_POR_NOTA.DATA_VENCIMENTO AS VENCIMENTO, EFSDOIMP_POR_RECOLHIMENTO_POR_NOTA.VALOR_RECOLHER AS VALOR, 1 AS TIPO, '' AS ORGAO_ARRECADADOR FROM BETHADBA.EFSDOIMP AS EFSDOIMP INNER JOIN BETHADBA.EFSDOIMP_POR_RECOLHIMENTO_POR_NOTA AS EFSDOIMP_POR_RECOLHIMENTO_POR_NOTA ON EFSDOIMP_POR_RECOLHIMENTO_POR_NOTA.CODI_EMP = EFSDOIMP.CODI_EMP AND EFSDOIMP_POR_RECOLHIMENTO_POR_NOTA.DATA_SIM = EFSDOIMP.DATA_SIM AND EFSDOIMP_POR_RECOLHIMENTO_POR_NOTA.PDIC_SIM = EFSDOIMP.PDIC_SIM AND EFSDOIMP_POR_RECOLHIMENTO_POR_NOTA.CODI_IMP = EFSDOIMP.CODI_IMP INNER JOIN BETHADBA.GEEMPRE AS GEEMPRE ON GEEMPRE.CODI_EMP = EFSDOIMP.CODI_EMP WHERE EFSDOIMP.CODI_EMP = {cod_emp} AND EFSDOIMP.DATA_SIM >= {data_inicio} AND EFSDOIMP.DATA_SIM <= {data_fim} AND EFSDOIMP_POR_RECOLHIMENTO_POR_NOTA.CODI_IMP = 42 AND EFSDOIMP_POR_RECOLHIMENTO_POR_NOTA.VALOR_RECOLHER > 0 AND GEEMPRE.ESTA_EMP = 'MT' AND EFSDOIMP.PDIC_SIM = 16 UNION ALL SELECT COALESCE(MAX(SALDO_IMPOSTO_COMPETE.CODIGO_RECOLHIMENTO), '') AS CODIGO, COALESCE(MAX(SALDO_IMPOSTO_COMPETE.VENCIMENTO), DATE('1900-01-01')) AS VENCIMENTO, COALESCE(SUM(SALDO_IMPOSTO_COMPETE.VALOR_RECOLHER + SALDO_IMPOSTO_COMPETE.VALOR_RECOLHER_BARES_RESTAURANTES + SALDO_IMPOSTO_COMPETE.VALOR_RECOLHER_BENEFICIO_ART_530_LRI_RICMS + SALDO_IMPOSTO_COMPETE.VALOR_RECOLHER_BENEFICIO_ART_530_LFII_RICMS), 0) AS VALOR, 1 AS TIPO, '' AS ORGAO_ARRECADADOR FROM BETHADBA.EFSDOIMP_ES_COMPETE AS SALDO_IMPOSTO_COMPETE INNER JOIN BETHADBA.GEEMPRE AS EMPRESA ON EMPRESA.CODI_EMP = SALDO_IMPOSTO_COMPETE.CODI_EMP WHERE SALDO_IMPOSTO_COMPETE.CODI_EMP = {cod_emp} AND SALDO_IMPOSTO_COMPETE.DATA_SIM BETWEEN {data_inicio} AND {data_fim} AND SALDO_IMPOSTO_COMPETE.CODI_IMP = 1 AND EMPRESA.ESTA_EMP = 'ES' HAVING COALESCE(SUM(SALDO_IMPOSTO_COMPETE.VALOR_RECOLHER + SALDO_IMPOSTO_COMPETE.VALOR_RECOLHER_BARES_RESTAURANTES + SALDO_IMPOSTO_COMPETE.VALOR_RECOLHER_BENEFICIO_ART_530_LRI_RICMS + SALDO_IMPOSTO_COMPETE.VALOR_RECOLHER_BENEFICIO_ART_530_LFII_RICMS), 0) > 0 UNION ALL SELECT COALESCE(IMP_RECOLHIMENTO.CODIGO_RECOLHIMENTO, '') AS CODIGO, COALESCE(SALDO_IMPOSTO.VENCIMENTO, DATE('1900-01-01')) AS VENCIMENTO, COALESCE(SALDO_IMPOSTO.SALDO_DEVEDOR, 0) AS VALOR, 1 AS TIPO, '' AS ORGAO_ARRECADADOR FROM BETHADBA.GEEMPRE AS EMPRESA INNER JOIN BETHADBA.EFSDOIMP_POR_UF AS SALDO_IMPOSTO ON SALDO_IMPOSTO.CODI_EMP = EMPRESA.CODI_EMP INNER JOIN BETHADBA.GEIMPOSTO_VIGENCIA_RECOLHIMENTO AS IMP_RECOLHIMENTO ON IMP_RECOLHIMENTO.CODI_EMP = EMPRESA.CODI_EMP AND IMP_RECOLHIMENTO.CODI_IMP = SALDO_IMPOSTO.CODI_IMP AND IMP_RECOLHIMENTO.UF_FAVORECIDA = SALDO_IMPOSTO.SIGLA_UF AND IMP_RECOLHIMENTO.VIGENCIA_IMP = DSDBA.D_BUSCA_VIGENCIA_IMPOSTO(EMPRESA.CODI_EMP, SALDO_IMPOSTO.CODI_IMP, SALDO_IMPOSTO.DATA_SIM) WHERE EMPRESA.CODI_EMP = {cod_emp} AND ((EMPRESA.ESTA_EMP = 'GO' AND SALDO_IMPOSTO.SIGLA_UF = 'GO') OR (EMPRESA.ESTA_EMP = 'SC' AND SALDO_IMPOSTO.SIGLA_UF = 'SC')) AND SALDO_IMPOSTO.DATA_SIM = {data_inicio} AND SALDO_IMPOSTO.CODI_IMP = 69 AND COALESCE(SALDO_IMPOSTO.SALDO_DEVEDOR, 0) > 0 AND NOT EXISTS(SELECT 1 FROM BETHADBA.EFSDOIMP_POR_UF_POR_NOTA AS SALDO_IMPOSTO_NOTA WHERE SALDO_IMPOSTO_NOTA.CODI_EMP = SALDO_IMPOSTO.CODI_EMP AND SALDO_IMPOSTO_NOTA.CODI_IMP = SALDO_IMPOSTO.CODI_IMP AND SALDO_IMPOSTO_NOTA.DATA_SIM = SALDO_IMPOSTO.DATA_SIM AND SALDO_IMPOSTO_NOTA.PDIC_SIM = SALDO_IMPOSTO.PDIC_SIM AND SALDO_IMPOSTO_NOTA.SIGLA_UF = SALDO_IMPOSTO.SIGLA_UF) UNION ALL SELECT COALESCE(IMP_RECOLHIMENTO.CODIGO_RECOLHIMENTO, '') AS CODIGO, COALESCE(SALDO_IMPOSTO.VENCIMENTO, DATE('1900-01-01')) AS VENCIMENTO, COALESCE(SALDO_IMPOSTO.SALDO_DEVEDOR, 0) AS VALOR, 1 AS TIPO, '' AS ORGAO_ARRECADADOR FROM BETHADBA.GEEMPRE AS EMPRESA INNER JOIN BETHADBA.EFSDOIMP_POR_UF_POR_NOTA AS SALDO_IMPOSTO ON SALDO_IMPOSTO.CODI_EMP = EMPRESA.CODI_EMP INNER JOIN BETHADBA.GEIMPOSTO_VIGENCIA_RECOLHIMENTO AS IMP_RECOLHIMENTO ON IMP_RECOLHIMENTO.CODI_EMP = EMPRESA.CODI_EMP AND IMP_RECOLHIMENTO.CODI_IMP = SALDO_IMPOSTO.CODI_IMP AND IMP_RECOLHIMENTO.UF_FAVORECIDA = SALDO_IMPOSTO.SIGLA_UF WHERE EMPRESA.CODI_EMP = {cod_emp} AND EMPRESA.ESTA_EMP = 'SC' AND SALDO_IMPOSTO.SIGLA_UF = 'SC' AND SALDO_IMPOSTO.DATA_SIM = {data_inicio} AND SALDO_IMPOSTO.CODI_IMP = 69 AND IMP_RECOLHIMENTO.VIGENCIA_IMP = DSDBA.D_BUSCA_VIGENCIA_IMPOSTO(EMPRESA.CODI_EMP, SALDO_IMPOSTO.CODI_IMP, SALDO_IMPOSTO.DATA_SIM) AND COALESCE(SALDO_IMPOSTO.SALDO_DEVEDOR, 0) > 0 UNION ALL SELECT GEIMPOSTO_VIGENCIA.CDRN_IMP AS CODIGO, EFSDOIMP.DVCT_SIM AS VENCIMENTO, EFSDOIMP.SDEV_SIM AS VALOR, 1 AS TIPO, '' AS ORGAO_ARRECADADOR FROM BETHADBA.EFSDOIMP AS EFSDOIMP INNER JOIN BETHADBA.GEIMPOSTO_VIGENCIA AS GEIMPOSTO_VIGENCIA ON GEIMPOSTO_VIGENCIA.CODI_EMP = EFSDOIMP.CODI_EMP AND GEIMPOSTO_VIGENCIA.CODI_IMP = EFSDOIMP.CODI_IMP AND GEIMPOSTO_VIGENCIA.VIGENCIA_IMP = DSDBA.D_BUSCA_VIGENCIA_IMPOSTO(EFSDOIMP.CODI_EMP, EFSDOIMP.CODI_IMP, EFSDOIMP.DATA_SIM) INNER JOIN BETHADBA.GEEMPRE AS EMPRESA ON EMPRESA.CODI_EMP = EFSDOIMP.CODI_EMP WHERE EFSDOIMP.CODI_EMP = {cod_emp} AND EFSDOIMP.DATA_SIM BETWEEN {data_inicio} AND {data_fim} AND EFSDOIMP.CODI_IMP = 154 AND EMPRESA.ESTA_EMP = 'RJ' AND EFSDOIMP.SDEV_SIM > 0 UNION ALL SELECT IMPOSTO_VIGENCIA.CDRN_IMP_FEEF AS CODIGO, SALDO_IMPOSTO.DVCT_SIM AS VENCIMENTO, SALDO_IMPOSTO.SDEV_SIM AS VALOR, 1 AS TIPO, '' AS ORGAO_ARRECADADOR FROM BETHADBA.EFSDOIMP AS SALDO_IMPOSTO INNER JOIN BETHADBA.GEIMPOSTO_VIGENCIA AS IMPOSTO_VIGENCIA ON IMPOSTO_VIGENCIA.CODI_EMP = SALDO_IMPOSTO.CODI_EMP AND IMPOSTO_VIGENCIA.CODI_IMP = SALDO_IMPOSTO.CODI_IMP AND IMPOSTO_VIGENCIA.VIGENCIA_IMP = DSDBA.D_BUSCA_VIGENCIA_IMPOSTO(SALDO_IMPOSTO.CODI_EMP, SALDO_IMPOSTO.CODI_IMP, SALDO_IMPOSTO.DATA_SIM) INNER JOIN BETHADBA.GEEMPRE AS EMPRESA ON EMPRESA.CODI_EMP = SALDO_IMPOSTO.CODI_EMP WHERE SALDO_IMPOSTO.CODI_EMP = {cod_emp} AND SALDO_IMPOSTO.DATA_SIM BETWEEN {data_inicio} AND {data_fim} AND SALDO_IMPOSTO.CODI_IMP = 154 AND SALDO_IMPOSTO.SDEV_SIM > 0 AND EMPRESA.ESTA_EMP = 'MT' UNION ALL SELECT IMPOSTO_VIGENCIA.CDRN_IMP_FEEF AS CODIGO, SALDO_IMPOSTO.DVCT_SIM AS VENCIMENTO, SALDO_IMPOSTO.SDEV_SIM AS VALOR, 1 AS TIPO, '' AS ORGAO_ARRECADADOR FROM BETHADBA.EFSDOIMP AS SALDO_IMPOSTO INNER JOIN BETHADBA.GEIMPOSTO_VIGENCIA AS IMPOSTO_VIGENCIA ON IMPOSTO_VIGENCIA.CODI_EMP = SALDO_IMPOSTO.CODI_EMP AND IMPOSTO_VIGENCIA.CODI_IMP = SALDO_IMPOSTO.CODI_IMP AND IMPOSTO_VIGENCIA.VIGENCIA_IMP = DSDBA.D_BUSCA_VIGENCIA_IMPOSTO(SALDO_IMPOSTO.CODI_EMP, SALDO_IMPOSTO.CODI_IMP, SALDO_IMPOSTO.DATA_SIM) INNER JOIN BETHADBA.GEEMPRE AS EMPRESA ON EMPRESA.CODI_EMP = SALDO_IMPOSTO.CODI_EMP WHERE SALDO_IMPOSTO.CODI_EMP = {cod_emp} AND SALDO_IMPOSTO.DATA_SIM BETWEEN {data_inicio} AND {data_fim} AND SALDO_IMPOSTO.CODI_IMP = 154 AND SALDO_IMPOSTO.SDEV_SIM > 0 AND EMPRESA.ESTA_EMP = 'PB' UNION ALL SELECT COALESCE(MAX(SALDO_IMPOSTO_COMPETE.ADICIONAL_CODIGO_RECOLHIMENTO), '') AS CODIGO, COALESCE(MAX(SALDO_IMPOSTO_COMPETE.ADICIONAL_ICMS_VENCIMENTO), DATE('1900-01-01')) AS VENCIMENTO, COALESCE(SUM(SALDO_IMPOSTO_COMPETE.ADICIONAL_ICMS_VALOR_RECOLHER + SALDO_IMPOSTO_COMPETE.ADICIONAL_ICMS_VALOR_RECOLHER_BARES_RESTAURANTES + SALDO_IMPOSTO_COMPETE.ADICIONAL_ICMS_VALOR_RECOLHER_BENEFICIO_ART_530_LRI_RICMS + SALDO_IMPOSTO_COMPETE.ADICIONAL_ICMS_VALOR_RECOLHER_BENEFICIO_ART_530_LFII_RICMS), 0) AS VALOR, 1 AS TIPO, '' AS ORGAO_ARRECADADOR FROM BETHADBA.EFSDOIMP_ES_COMPETE AS SALDO_IMPOSTO_COMPETE INNER JOIN BETHADBA.GEEMPRE AS EMPRESA ON EMPRESA.CODI_EMP = SALDO_IMPOSTO_COMPETE.CODI_EMP WHERE SALDO_IMPOSTO_COMPETE.CODI_EMP = {cod_emp} AND SALDO_IMPOSTO_COMPETE.DATA_SIM BETWEEN {data_inicio} AND {data_fim} AND SALDO_IMPOSTO_COMPETE.CODI_IMP = 1 AND EMPRESA.ESTA_EMP = 'ES' HAVING COALESCE(SUM(SALDO_IMPOSTO_COMPETE.ADICIONAL_ICMS_VALOR_RECOLHER + SALDO_IMPOSTO_COMPETE.ADICIONAL_ICMS_VALOR_RECOLHER_BARES_RESTAURANTES + SALDO_IMPOSTO_COMPETE.ADICIONAL_ICMS_VALOR_RECOLHER_BENEFICIO_ART_530_LRI_RICMS + SALDO_IMPOSTO_COMPETE.ADICIONAL_ICMS_VALOR_RECOLHER_BENEFICIO_ART_530_LFII_RICMS), 0) > 0 UNION ALL SELECT COALESCE(MAX(IMPOSTO_VIGENCIA.CDRN_IMP), '') AS CODIGO, COALESCE(MAX(SALDO_IMPOSTO.DVCT_SIM), DATE('1900-01-01')) AS VENCIMENTO, COALESCE(SUM(SALDO_ESTADUAL_RJ.VALOR_ICMS_MINIMO_RIOLOG), 0) AS VALOR, 1 AS TIPO, '' AS ORGAO_ARRECADADOR FROM BETHADBA.EFSDOIMP_ESTADUAL_RJ AS SALDO_ESTADUAL_RJ INNER JOIN BETHADBA.EFSDOIMP AS SALDO_IMPOSTO ON SALDO_IMPOSTO.CODI_EMP = SALDO_ESTADUAL_RJ.CODI_EMP AND SALDO_IMPOSTO.CODI_IMP = SALDO_ESTADUAL_RJ.CODI_IMP AND SALDO_IMPOSTO.DATA_SIM = SALDO_ESTADUAL_RJ.DATA_SIM AND SALDO_IMPOSTO.PDIC_SIM = SALDO_ESTADUAL_RJ.PDIC_SIM INNER JOIN BETHADBA.GEIMPOSTO_VIGENCIA AS IMPOSTO_VIGENCIA ON IMPOSTO_VIGENCIA.CODI_EMP = SALDO_ESTADUAL_RJ.CODI_EMP AND IMPOSTO_VIGENCIA.CODI_IMP = SALDO_ESTADUAL_RJ.CODI_IMP AND IMPOSTO_VIGENCIA.VIGENCIA_IMP = DSDBA.D_BUSCA_VIGENCIA_IMPOSTO(SALDO_ESTADUAL_RJ.CODI_EMP, SALDO_ESTADUAL_RJ.CODI_IMP, SALDO_ESTADUAL_RJ.DATA_SIM) WHERE SALDO_ESTADUAL_RJ.CODI_EMP = {cod_emp} AND SALDO_ESTADUAL_RJ.DATA_SIM BETWEEN {data_inicio} AND {data_fim} AND SALDO_ESTADUAL_RJ.CODI_IMP = 1 HAVING COALESCE(SUM(SALDO_ESTADUAL_RJ.VALOR_ICMS_MINIMO_RIOLOG), 0) > 0 UNION ALL SELECT COALESCE(MAX(IMPOSTO_VIGENCIA.CDRN_IMP), '') AS CODIGO, COALESCE(MAX(SALDO_IMPOSTO.DVCT_SIM), DATE('1900-01-01')) AS VENCIMENTO, COALESCE(SUM(SALDO_ESTADUAL_RJ.VALOR_ICMS_MINIMO_RIOLOG_LEI_9025_2020), 0) AS VALOR, 1 AS TIPO, '' AS ORGAO_ARRECADADOR FROM BETHADBA.EFSDOIMP_ESTADUAL_RJ AS SALDO_ESTADUAL_RJ INNER JOIN BETHADBA.EFSDOIMP AS SALDO_IMPOSTO ON SALDO_IMPOSTO.CODI_EMP = SALDO_ESTADUAL_RJ.CODI_EMP AND SALDO_IMPOSTO.CODI_IMP = SALDO_ESTADUAL_RJ.CODI_IMP AND SALDO_IMPOSTO.DATA_SIM = SALDO_ESTADUAL_RJ.DATA_SIM AND SALDO_IMPOSTO.PDIC_SIM = SALDO_ESTADUAL_RJ.PDIC_SIM INNER JOIN BETHADBA.GEIMPOSTO_VIGENCIA AS IMPOSTO_VIGENCIA ON IMPOSTO_VIGENCIA.CODI_EMP = SALDO_ESTADUAL_RJ.CODI_EMP AND IMPOSTO_VIGENCIA.CODI_IMP = SALDO_ESTADUAL_RJ.CODI_IMP AND IMPOSTO_VIGENCIA.VIGENCIA_IMP = DSDBA.D_BUSCA_VIGENCIA_IMPOSTO(SALDO_ESTADUAL_RJ.CODI_EMP, SALDO_ESTADUAL_RJ.CODI_IMP, SALDO_ESTADUAL_RJ.DATA_SIM) WHERE SALDO_ESTADUAL_RJ.CODI_EMP = {cod_emp} AND SALDO_ESTADUAL_RJ.DATA_SIM BETWEEN {data_inicio} AND {data_fim} AND SALDO_ESTADUAL_RJ.CODI_IMP = 1 HAVING COALESCE(SUM(SALDO_ESTADUAL_RJ.VALOR_ICMS_MINIMO_RIOLOG_LEI_9025_2020), 0) > 0 UNION ALL SELECT COALESCE(IMPOSTO_VIGENCIA.CDRN_IMP, '') AS CODIGO, PAGAMENTO_IMPOSTO.DPAG_PIM AS VENCIMENTO, (PAGAMENTO_IMPOSTO.VPAG_PIM) AS VALOR, 16 AS TIPO, PAGAMENTO_IMPOSTO.ORGAO_ARRECADADOR AS ORGAO_ARRECADADOR FROM BETHADBA.EFPAGIMP AS PAGAMENTO_IMPOSTO INNER JOIN BETHADBA.GEEMPRE AS EMPRESA ON EMPRESA.CODI_EMP = PAGAMENTO_IMPOSTO.CODI_EMP INNER JOIN BETHADBA.GEIMPOSTO_VIGENCIA AS IMPOSTO_VIGENCIA ON IMPOSTO_VIGENCIA.CODI_EMP = PAGAMENTO_IMPOSTO.CODI_EMP AND IMPOSTO_VIGENCIA.CODI_IMP = PAGAMENTO_IMPOSTO.CODI_IMP WHERE PAGAMENTO_IMPOSTO.CODI_EMP = {cod_emp} AND PAGAMENTO_IMPOSTO.DATA_PIM BETWEEN {data_inicio} AND {data_fim} AND PAGAMENTO_IMPOSTO.CODI_IMP = 27 AND PAGAMENTO_IMPOSTO.IMPOSTO_PARCELADO = 'N' AND EMPRESA.ESTA_EMP = 'RR' AND IMPOSTO_VIGENCIA.VIGENCIA_IMP = DSDBA.D_BUSCA_VIGENCIA_IMPOSTO(PAGAMENTO_IMPOSTO.CODI_EMP, PAGAMENTO_IMPOSTO.CODI_IMP, PAGAMENTO_IMPOSTO.DATA_PIM) UNION ALL SELECT IMPOSTO_VIGENCIA.CDRN_IMP AS CODIGO, SALDO_IMPOSTO.DVCT_SIM AS VENCIMENTO, SALDO_IMPOSTO.SDEV_SIM AS VALOR, 1 AS TIPO, '' AS ORGAO_ARRECADADOR FROM BETHADBA.EFSDOIMP AS SALDO_IMPOSTO INNER JOIN BETHADBA.GEIMPOSTO_VIGENCIA AS IMPOSTO_VIGENCIA ON IMPOSTO_VIGENCIA.CODI_EMP = SALDO_IMPOSTO.CODI_EMP AND IMPOSTO_VIGENCIA.CODI_IMP = SALDO_IMPOSTO.CODI_IMP AND IMPOSTO_VIGENCIA.VIGENCIA_IMP = DSDBA.D_BUSCA_VIGENCIA_IMPOSTO(SALDO_IMPOSTO.CODI_EMP, SALDO_IMPOSTO.CODI_IMP, SALDO_IMPOSTO.DATA_SIM) INNER JOIN BETHADBA.GEEMPRE AS EMPRESA ON EMPRESA.CODI_EMP = SALDO_IMPOSTO.CODI_EMP WHERE SALDO_IMPOSTO.CODI_EMP = {cod_emp} AND SALDO_IMPOSTO.DATA_SIM BETWEEN {data_inicio} AND {data_fim} AND SALDO_IMPOSTO.CODI_IMP = 165 AND SALDO_IMPOSTO.SDEV_SIM > 0 AND EMPRESA.ESTA_EMP = 'RO' UNION ALL SELECT IMPOSTO_VIGENCIA.CDRN_IMP AS CODIGO, SALDO_IMPOSTO.DVCT_SIM AS VENCIMENTO, SALDO_IMPOSTO.SDEV_SIM AS VALOR, 1 AS TIPO, '' AS ORGAO_ARRECADADOR FROM BETHADBA.EFSDOIMP AS SALDO_IMPOSTO INNER JOIN BETHADBA.GEIMPOSTO_VIGENCIA AS IMPOSTO_VIGENCIA ON IMPOSTO_VIGENCIA.CODI_EMP = SALDO_IMPOSTO.CODI_EMP AND IMPOSTO_VIGENCIA.CODI_IMP = SALDO_IMPOSTO.CODI_IMP AND IMPOSTO_VIGENCIA.VIGENCIA_IMP = DSDBA.D_BUSCA_VIGENCIA_IMPOSTO(SALDO_IMPOSTO.CODI_EMP, SALDO_IMPOSTO.CODI_IMP, SALDO_IMPOSTO.DATA_SIM) INNER JOIN BETHADBA.GEEMPRE AS EMPRESA ON EMPRESA.CODI_EMP = SALDO_IMPOSTO.CODI_EMP WHERE SALDO_IMPOSTO.CODI_EMP = {cod_emp} AND SALDO_IMPOSTO.DATA_SIM BETWEEN {data_inicio} AND {data_fim} AND SALDO_IMPOSTO.CODI_IMP = 166 AND SALDO_IMPOSTO.SDEV_SIM > 0 AND EMPRESA.ESTA_EMP = 'RO' UNION ALL SELECT IMPOSTO_VIGENCIA.CDRN_IMP AS CODIGO, SALDO_IMPOSTO.DVCT_SIM AS VENCIMENTO, SALDO_IMPOSTO.SDEV_SIM AS VALOR, 1 AS TIPO, '' AS ORGAO_ARRECADADOR FROM BETHADBA.EFSDOIMP AS SALDO_IMPOSTO INNER JOIN BETHADBA.GEIMPOSTO_VIGENCIA AS IMPOSTO_VIGENCIA ON IMPOSTO_VIGENCIA.CODI_EMP = SALDO_IMPOSTO.CODI_EMP AND IMPOSTO_VIGENCIA.CODI_IMP = SALDO_IMPOSTO.CODI_IMP AND IMPOSTO_VIGENCIA.VIGENCIA_IMP = DSDBA.D_BUSCA_VIGENCIA_IMPOSTO(SALDO_IMPOSTO.CODI_EMP, SALDO_IMPOSTO.CODI_IMP, SALDO_IMPOSTO.DATA_SIM) INNER JOIN BETHADBA.GEEMPRE AS EMPRESA ON EMPRESA.CODI_EMP = SALDO_IMPOSTO.CODI_EMP WHERE SALDO_IMPOSTO.CODI_EMP = {cod_emp} AND SALDO_IMPOSTO.DATA_SIM BETWEEN {data_inicio} AND {data_fim} AND SALDO_IMPOSTO.CODI_IMP = 167 AND SALDO_IMPOSTO.SDEV_SIM > 0 AND EMPRESA.ESTA_EMP = 'RO' UNION ALL SELECT COALESCE(MAX(SALDO_ESTADUAL.ICMS_COMPLEMENTAR_CODIGO_RECOLHIMENTO), '') AS CODIGO, COALESCE(MAX(SALDO_ESTADUAL.ICMS_COMPLEMENTAR_DATA_VENCIMENTO), DATE('1900-01-01')) AS VENCIMENTO, COALESCE(SUM(SALDO_ESTADUAL.ICMS_COMPLEMENTAR_VALOR_RECOLHER), 0) AS VALOR, 1 AS TIPO, '' AS ORGAO_ARRECADADOR FROM BETHADBA.EFSDOIMP_ESTADUAL_SC AS SALDO_ESTADUAL WHERE SALDO_ESTADUAL.CODI_EMP = {cod_emp} AND SALDO_ESTADUAL.DATA_SIM BETWEEN {data_inicio} AND {data_fim} AND SALDO_ESTADUAL.DATA_SIM >= DATE('2020-01-01') AND SALDO_ESTADUAL.CODI_IMP = 1 HAVING COALESCE(SUM(SALDO_ESTADUAL.ICMS_COMPLEMENTAR_VALOR_RECOLHER), 0) > 0 UNION ALL SELECT COALESCE(MAX(SALDO_ESTADUAL.ICMS_COMPLEMENTAR_CODIGO_RECOLHIMENTO), '') AS CODIGO, COALESCE(MAX(SALDO_ESTADUAL.ICMS_COMPLEMENTAR_DATA_VENCIMENTO), DATE('1900-01-01')) AS VENCIMENTO, COALESCE(SUM(SALDO_ESTADUAL.ICMS_COMPLEMENTAR_VALOR_RECOLHER), 0) AS VALOR, 1 AS TIPO, '' AS ORGAO_ARRECADADOR FROM BETHADBA.EFSDOIMP_ESTADUAL_RJ AS SALDO_ESTADUAL WHERE SALDO_ESTADUAL.CODI_EMP = {cod_emp} AND SALDO_ESTADUAL.DATA_SIM BETWEEN {data_inicio} AND {data_fim} AND SALDO_ESTADUAL.DATA_SIM >= DATE('2019-09-01') AND SALDO_ESTADUAL.CODI_IMP = 1 HAVING COALESCE(SUM(SALDO_ESTADUAL.ICMS_COMPLEMENTAR_VALOR_RECOLHER), 0) > 0 UNION ALL SELECT COALESCE(MAX(IMPOSTO_VIGENCIA.CDRN_IMP), '') AS CODIGO, COALESCE(MAX(SALDO_IMPOSTO.DVCT_SIM), DATE('1900-01-01')) AS VENCIMENTO, COALESCE(SUM(SALDO_ESTADUAL_RJ.COMPLEMENTO_ICMS_ST_ART_16_578_2023), 0) AS VALOR, 1 AS TIPO, '' AS ORGAO_ARRECADADOR FROM BETHADBA.EFSDOIMP_ESTADUAL_RJ AS SALDO_ESTADUAL_RJ INNER JOIN BETHADBA.EFSDOIMP AS SALDO_IMPOSTO ON SALDO_IMPOSTO.CODI_EMP = SALDO_ESTADUAL_RJ.CODI_EMP AND SALDO_IMPOSTO.CODI_IMP = SALDO_ESTADUAL_RJ.CODI_IMP AND SALDO_IMPOSTO.DATA_SIM = SALDO_ESTADUAL_RJ.DATA_SIM AND SALDO_IMPOSTO.PDIC_SIM = SALDO_ESTADUAL_RJ.PDIC_SIM INNER JOIN BETHADBA.GEIMPOSTO_VIGENCIA AS IMPOSTO_VIGENCIA ON IMPOSTO_VIGENCIA.CODI_EMP = SALDO_ESTADUAL_RJ.CODI_EMP AND IMPOSTO_VIGENCIA.CODI_IMP = SALDO_ESTADUAL_RJ.CODI_IMP AND IMPOSTO_VIGENCIA.VIGENCIA_IMP = DSDBA.D_BUSCA_VIGENCIA_IMPOSTO(SALDO_ESTADUAL_RJ.CODI_EMP, SALDO_ESTADUAL_RJ.CODI_IMP, SALDO_ESTADUAL_RJ.DATA_SIM) WHERE SALDO_ESTADUAL_RJ.CODI_EMP = {cod_emp} AND SALDO_ESTADUAL_RJ.DATA_SIM BETWEEN {data_inicio} AND {data_fim} AND SALDO_ESTADUAL_RJ.CODI_IMP = 1 HAVING COALESCE(SUM(SALDO_ESTADUAL_RJ.COMPLEMENTO_ICMS_ST_ART_16_578_2023), 0) > 0 UNION ALL SELECT COALESCE(MAX(IMPOSTO_VIGENCIA.CDRN_IMP), '') AS CODIGO, COALESCE(MAX(SALDO_IMPOSTO.DVCT_SIM), DATE('1900-01-01')) AS VENCIMENTO, COALESCE(SUM(SALDO_ESTADUAL_RJ.COMPLEMENTO_FECP_ART_16_578_2023), 0) AS VALOR, 1 AS TIPO, '' AS ORGAO_ARRECADADOR FROM BETHADBA.EFSDOIMP_ESTADUAL_RJ AS SALDO_ESTADUAL_RJ INNER JOIN BETHADBA.EFSDOIMP AS SALDO_IMPOSTO ON SALDO_IMPOSTO.CODI_EMP = SALDO_ESTADUAL_RJ.CODI_EMP AND SALDO_IMPOSTO.CODI_IMP = SALDO_ESTADUAL_RJ.CODI_IMP AND SALDO_IMPOSTO.DATA_SIM = SALDO_ESTADUAL_RJ.DATA_SIM AND SALDO_IMPOSTO.PDIC_SIM = SALDO_ESTADUAL_RJ.PDIC_SIM INNER JOIN BETHADBA.GEIMPOSTO_VIGENCIA AS IMPOSTO_VIGENCIA ON IMPOSTO_VIGENCIA.CODI_EMP = SALDO_ESTADUAL_RJ.CODI_EMP AND IMPOSTO_VIGENCIA.CODI_IMP = SALDO_ESTADUAL_RJ.CODI_IMP AND IMPOSTO_VIGENCIA.VIGENCIA_IMP = DSDBA.D_BUSCA_VIGENCIA_IMPOSTO(SALDO_ESTADUAL_RJ.CODI_EMP, SALDO_ESTADUAL_RJ.CODI_IMP, SALDO_ESTADUAL_RJ.DATA_SIM) WHERE SALDO_ESTADUAL_RJ.CODI_EMP = {cod_emp} AND SALDO_ESTADUAL_RJ.DATA_SIM BETWEEN {data_inicio} AND {data_fim} AND SALDO_ESTADUAL_RJ.CODI_IMP = 1 HAVING COALESCE(SUM(SALDO_ESTADUAL_RJ.COMPLEMENTO_FECP_ART_16_578_2023), 0) > 0 ORDER BY 2, 1
"""







SQL_OUTROS_DEBITOS_TEMPLATE = """
-- Consulta 46: Outros Débitos
SELECT 10 AS CODI, 'Estorno de crédito ICMS FUNDAP' AS NOME, SUM(ESTADUAL_ES.ESTORNO_CREDITO_OPERACAO_APURACAO_PROPRIA_FUNDAP + ESTADUAL_ES.ESTORNO_CREDITO_PRESTACAO_APURACAO_PROPRIA_FUNDAP) AS VLOR FROM BETHADBA.EFSDOIMP_ESTADUAL_ES AS ESTADUAL_ES INNER JOIN BETHADBA.GEEMPRE AS EMPRESA ON ESTADUAL_ES.CODI_EMP = EMPRESA.CODI_EMP WHERE ESTADUAL_ES.CODI_EMP = {cod_emp} AND ESTADUAL_ES.DATA_SIM BETWEEN '{data_inicio}' AND '{data_fim}' AND ESTADUAL_ES.PDIC_SIM = 6 AND ESTADUAL_ES.CODI_IMP = 1 AND EMPRESA.ESTA_EMP = 'ES' GROUP BY 10, 'Estorno de crédito ICMS FUNDAP' HAVING SUM(ESTADUAL_ES.ESTORNO_CREDITO_OPERACAO_APURACAO_PROPRIA_FUNDAP + ESTADUAL_ES.ESTORNO_CREDITO_PRESTACAO_APURACAO_PROPRIA_FUNDAP) > 0 UNION ALL SELECT 10 AS CODI, 'POR TRANSFERENCIA' AS NOME, SUM ( I.VLOR_ISA ) AS VLOR FROM BETHADBA.EFSAIDAS S, BETHADBA.EFIMPSAI I, BETHADBA.EFACUMULADORES A, BETHADBA.GEEMPRE G, BETHADBA.EFPARAM P WHERE S.CODI_EMP = {cod_emp} AND S.DSAI_SAI >= '{data_inicio}' AND S.DSAI_SAI <= '{data_fim}' AND S.CODI_EMP = A.CODI_EMP AND S.CODI_ACU = A.CODI_ACU AND S.CODI_EMP = G.CODI_EMP AND S.CODI_EMP = P.CODI_EMP AND G.ESTA_EMP = 'PR' AND NOT ( P.REST_PAR IN ( 2, 4 ) AND P.CENTRAL_PAR = 2 AND A.TRANSRECBRUTA_ACU = 'S' ) AND A.TRANSFERENCIA_ACU = 'S' AND S.CODI_EMP = I.CODI_EMP AND S.CODI_SAI = I.CODI_SAI AND I.CODI_IMP = 1 AND I.VLOR_ISA > 0 GROUP BY 10, 'POR TRANSFERENCIA' UNION ALL SELECT 10 AS CODI, 'POR TRANSFERENCIA' AS NOME, SUM ( I.VLOR_ISA ) AS VLOR FROM BETHADBA.EFSAIDAS S, BETHADBA.EFIMPSAI I, BETHADBA.EFACUMULADORES A, BETHADBA.GEEMPRE G, LATERAL (SELECT COALESCE(MAX(RN_TRANSFERENCIA_ACU), 'N') AS RN_TRANSFERENCIA_ACU FROM BETHADBA.EFACUMULADOR_VIGENCIA AS AV WHERE AV.CODI_EMP = S.CODI_EMP AND AV.CODI_ACU = S.CODI_ACU AND AV.VIGENCIA_ACU = DSDBA.D_BUSCA_VIGENCIA_ACUMULADOR(S.CODI_EMP, S.CODI_ACU, S.DSAI_SAI)) AS TD_PARAM_VIGENCIA WHERE S.CODI_EMP = {cod_emp} AND S.DSAI_SAI >= '{data_inicio}' AND S.DSAI_SAI <= '{data_fim}' AND S.CODI_EMP = A.CODI_EMP AND S.CODI_ACU = A.CODI_ACU AND S.CODI_EMP = G.CODI_EMP AND (A.TRANSFERENCIA_ACU = 'S' OR (G.ESTA_EMP = 'RN' AND S.CODI_NAT = 5601 AND TD_PARAM_VIGENCIA.RN_TRANSFERENCIA_ACU = 'S')) AND G.ESTA_EMP <> 'PR' AND S.CODI_EMP = I.CODI_EMP AND S.CODI_SAI = I.CODI_SAI AND I.CODI_IMP = 1 AND NOT ( G.ESTA_EMP = 'RR' AND S.CODI_NAT = 5601 ) AND NOT (G.ESTA_EMP = 'MG' AND S.SITUACAO_SAI = 9 AND S.CODI_NAT = 5606) AND I.VLOR_ISA > 0 GROUP BY 10, 'POR TRANSFERENCIA' UNION ALL SELECT 10 AS CODI, 'POR TRANSFERENCIA' AS NOME, SUM (ESTADUAL_MG.UTILIZACAO_SALDO_CREDOR_ICMS_EXTINCAO_DEBITOS_FISCAIS) AS VLOR FROM BETHADBA.EFSDOIMP_ESTADUAL_MG AS ESTADUAL_MG INNER JOIN BETHADBA.GEEMPRE AS EMPRESA ON ESTADUAL_MG.CODI_EMP = EMPRESA.CODI_EMP WHERE ESTADUAL_MG.CODI_EMP = {cod_emp} AND ESTADUAL_MG.DATA_SIM BETWEEN '{data_inicio}' AND '{data_fim}' AND ESTADUAL_MG.PDIC_SIM = 6 AND ESTADUAL_MG.CODI_IMP = 1 AND EMPRESA.ESTA_EMP = 'MG' GROUP BY 10, 'POR TRANSFERENCIA' HAVING SUM(ESTADUAL_MG.UTILIZACAO_SALDO_CREDOR_ICMS_EXTINCAO_DEBITOS_FISCAIS) > 0 UNION ALL SELECT 10 AS CODI, 'TRANSFERÊNCIA DE CRÉDITO ACUMULADO' AS NOME, SUM ( S.VDI3_SIM ) AS VLOR FROM BETHADBA.EFSDOIMP S, BETHADBA.GEEMPRE G WHERE S.CODI_EMP = {cod_emp} AND S.CODI_EMP = G.CODI_EMP AND S.DATA_SIM >= '{data_inicio}' AND S.DATA_SIM <= '{data_fim}' AND G.ESTA_EMP = 'RR' AND S.CODI_IMP = 1 AND S.VDI3_SIM > 0 GROUP BY 10, 'TRANSFERÊNCIA DE CRÉDITO ACUMULADO' UNION ALL SELECT 20 AS CODI, 'Diferencial de alíquotas - Inciso II do Art. 117 do RICMS' AS NOME, SUM ( S.VDI2_SIM ) AS VLOR FROM BETHADBA.EFSDOIMP S, BETHADBA.GEEMPRE G WHERE G.CODI_EMP = {cod_emp} AND G.ESTA_EMP IN ('SP' ) AND G.CODI_EMP = S.CODI_EMP AND S.DATA_SIM = '{data_inicio}' AND S.CODI_IMP = 1 AND 'N' = 'N' AND S.VDI2_SIM > 0 GROUP BY 20, 'Diferencial de alíquotas - Inciso II do Art. 117 do RICMS'
"""

SQL_ESTORNOS_CREDITO_TEMPLATE = """
-- Consulta 47: Estornos de Crédito
SELECT 100 AS CODI, TDAUX2.NOME AS NOME, SUM ( M.VLOR_MAJ ) AS VLOR FROM BETHADBA.EFMOVAJU AS M INNER JOIN BETHADBA.EFAJUSTES AS A ON M.CODI_EMP = A.CODI_EMP AND M.CODI_AJU = A.CODI_AJU INNER JOIN BETHADBA.GEEMPRE AS G ON G.CODI_EMP = A.CODI_EMP, LATERAL(SELECT MAX(EFSPDET20.SUBITEM) AS SUB_ITEM, MAX(EFSPDET20.FLEGAL) AS FUNDAMENTACAO_LEGAL, MAX(1) AS TEM_OCORRENCIA FROM BETHADBA.EFSPDET20 AS EFSPDET20 WHERE EFSPDET20.CODI_EMP = M.CODI_EMP AND EFSPDET20.CODI_AJU = M.CODI_AJU AND EFSPDET20.DATA_MAJ = M.DATA_MAJ) AS TDOCORRENCIA, LATERAL(SELECT CASE WHEN COALESCE(TDOCORRENCIA.TEM_OCORRENCIA, 0) > 0 THEN LEFT(TRIM(CAST(TDOCORRENCIA.SUB_ITEM AS CHAR(10))), 1) || '.' || RIGHT(TRIM(CAST(TDOCORRENCIA.SUB_ITEM AS CHAR(10))), 2) || ' - ' || TDOCORRENCIA.FUNDAMENTACAO_LEGAL ELSE CAST(NULL AS VARCHAR(20)) END AS DESCRICAO_OCORRENCIA FROM DSDBA.DUMMY) AS TDAUX1, LATERAL(SELECT CASE COALESCE ( M.DESC_LIVRO_MAJ, 'N' ) WHEN 'N' THEN A.NOME_AJU WHEN 'F' THEN COALESCE(TDAUX1.DESCRICAO_OCORRENCIA, A.NOME_AJU) ELSE M.OBSE_MAJ END AS NOME FROM DSDBA.DUMMY) AS TDAUX2 WHERE M.CODI_EMP = {cod_emp} AND M.DATA_MAJ >= '{data_inicio}' AND M.DATA_MAJ <= '{data_fim}' AND M.REGISTRO_CONVERTIDO = 'N' AND G.ESTA_EMP IN ('RJ') AND A.CODI_IMP = 1 AND A.OPER_AJU = 4 GROUP BY 100, TDAUX2.NOME UNION ALL SELECT 1171 AS CODIGO, 'ESTORNO CRÉDITO PRESUMIDO TRANSPORTES - CT-E E/OU CT-EOS SUBSTITUTO' AS NOME, COALESCE(SUM(SALDO_IMPOSTO.ESTORNO_CREDITO_PRESUMIDO_TRANSPORTE_OPERACORES_CTE_SUBSTITUTO), 0) AS VALOR FROM BETHADBA.EFSDOIMP_ESTADUAL_SP AS SALDO_IMPOSTO INNER JOIN BETHADBA.GEEMPRE AS EMPRESA ON EMPRESA.CODI_EMP = SALDO_IMPOSTO.CODI_EMP WHERE SALDO_IMPOSTO.CODI_EMP = {cod_emp} AND SALDO_IMPOSTO.DATA_SIM BETWEEN '{data_inicio}' AND '{data_fim}' AND SALDO_IMPOSTO.CODI_IMP = 1 AND EMPRESA.ESTA_EMP = 'SP' HAVING SUM(SALDO_IMPOSTO.ESTORNO_CREDITO_PRESUMIDO_TRANSPORTE_OPERACORES_CTE_SUBSTITUTO) > 0 ORDER BY 1
"""

SQL_OUTROS_CREDITOS_TEMPLATE = """
-- Consulta 48: Outros Créditos
SELECT 100 AS CODI, 1 AS ORDEM, 'POR TRANSFERÊNCIA' AS NOME, SUM ( I.VLOR_IEN ) AS VLOR FROM BETHADBA.EFENTRADAS S, BETHADBA.EFIMPENT I, BETHADBA.EFACUMULADORES A, BETHADBA.GEEMPRE G WHERE S.CODI_EMP = {cod_emp} AND S.DENT_ENT >= '{data_inicio}' AND S.DENT_ENT <= '{data_fim}' AND S.CODI_EMP = A.CODI_EMP AND S.CODI_ACU = A.CODI_ACU AND A.TRANSFERENCIA_ACU = 'S' AND S.CODI_EMP = I.CODI_EMP AND S.CODI_ENT = I.CODI_ENT AND I.CODI_IMP = 1 AND G.CODI_EMP = S.CODI_EMP AND NOT ( G.ESTA_EMP = 'RR' AND S.CODI_NAT = 1601 ) AND I.VLOR_IEN > 0 AND NOT ( G.ESTA_EMP = 'RS' AND S.CODI_NAT = 1601 ) GROUP BY 100, 'POR TRANSFERÊNCIA' UNION ALL SELECT 3900 AS CODI, 1 AS ORDEM, 'Crédito Presumido Transporte, conforme Art. 62 e Art. 11, anexo III, do RICMS' AS NOME, SUM ( S.VDI18_SIM + CASE WHEN S.DATA_SIM >= DATE('2023-07-01') THEN S.VDI35_SIM ELSE 0 END ) AS VLOR FROM BETHADBA.EFSDOIMP AS S INNER JOIN BETHADBA.GEEMPRE AS G ON S.CODI_EMP = G.CODI_EMP WHERE S.CODI_EMP = {cod_emp} AND S.DATA_SIM BETWEEN '{data_inicio}' AND '{data_fim}' AND G.ESTA_EMP = 'SP' AND S.CODI_IMP = 1 AND (S.VDI18_SIM + CASE WHEN S.DATA_SIM >= DATE('2023-07-01') THEN S.VDI35_SIM ELSE 0 END) > 0 GROUP BY 3900, 'Crédito Presumido Transporte, conforme Art. 62 e Art. 11, anexo III, do RICMS' UNION ALL SELECT 980 AS CODI, 1 AS ORDEM, 'Diferencial de alíquotas - Inciso I do Art. 117 do RICMS' AS NOME, SUM(SALDO_IMPOSTO.VDI22_SIM) AS VLOR FROM BETHADBA.EFSDOIMP AS SALDO_IMPOSTO INNER JOIN BETHADBA.GEEMPRE AS EMPRESA ON EMPRESA.CODI_EMP = SALDO_IMPOSTO.CODI_EMP WHERE SALDO_IMPOSTO.CODI_EMP = {cod_emp} AND SALDO_IMPOSTO.DATA_SIM = '{data_inicio}' AND SALDO_IMPOSTO.CODI_IMP = 1 AND EMPRESA.ESTA_EMP = 'SP' AND SALDO_IMPOSTO.VDI22_SIM > 0 GROUP BY 980
"""

SQL_ESTORNOS_DEBITOS_TEMPLATE = """
-- Consulta 49: Estornos de Débito
SELECT 10 AS CODI, TDAUX2.NOME AS NOME, SUM ( MOVIMENTO_SP.VALOR ) AS VLOR FROM BETHADBA.EFMOVIMENTO_AJUSTE_ESTADUAL_SP AS MOVIMENTO_SP INNER JOIN BETHADBA.EFAJUSTES AS A ON MOVIMENTO_SP.CODI_EMP = A.CODI_EMP AND MOVIMENTO_SP.CODI_AJU = A.CODI_AJU INNER JOIN BETHADBA.GEEMPRE AS G ON G.CODI_EMP = A.CODI_EMP, LATERAL(SELECT MAX(EFMOVIMENTO_AJUSTE_ESTADUAL_SP_DETALHAMENTO_02_OCORRENCIA.SUBITEM) AS SUB_ITEM, MAX(EFMOVIMENTO_AJUSTE_ESTADUAL_SP_DETALHAMENTO_02_OCORRENCIA.FUNDAMENTACAO_LEGAL) AS FUNDAMENTACAO_LEGAL, MAX(1) AS TEM_OCORRENCIA FROM BETHADBA.EFMOVIMENTO_AJUSTE_ESTADUAL_SP_DETALHAMENTO_02_OCORRENCIA AS EFMOVIMENTO_AJUSTE_ESTADUAL_SP_DETALHAMENTO_02_OCORRENCIA WHERE EFMOVIMENTO_AJUSTE_ESTADUAL_SP_DETALHAMENTO_02_OCORRENCIA.CODI_EMP = MOVIMENTO_SP.CODI_EMP AND EFMOVIMENTO_AJUSTE_ESTADUAL_SP_DETALHAMENTO_02_OCORRENCIA.I_AJUSTE = MOVIMENTO_SP.I_AJUSTE) AS TDOCORRENCIA, LATERAL(SELECT CASE WHEN COALESCE(TDOCORRENCIA.TEM_OCORRENCIA, 0) > 0 THEN LEFT(TRIM(CAST(TDOCORRENCIA.SUB_ITEM AS CHAR(10))), 1) || '.' || RIGHT(TRIM(CAST(TDOCORRENCIA.SUB_ITEM AS CHAR(10))), 2) || ' - ' || TDOCORRENCIA.FUNDAMENTACAO_LEGAL ELSE CAST(NULL AS VARCHAR(20)) END AS DESCRICAO_OCORRENCIA FROM DSDBA.DUMMY) AS TDAUX1, LATERAL(SELECT CASE COALESCE ( MOVIMENTO_SP.DESCRICAO_LIVRO_TIPO, 'N' ) WHEN 'N' THEN A.NOME_AJU WHEN 'F' THEN COALESCE(TDAUX1.DESCRICAO_OCORRENCIA, A.NOME_AJU) ELSE MOVIMENTO_SP.OBSERVACAO END AS NOME FROM DSDBA.DUMMY) AS TDAUX2 WHERE MOVIMENTO_SP.CODI_EMP = {cod_emp} AND MOVIMENTO_SP.DATA_AJUSTE >= '{data_inicio}' AND MOVIMENTO_SP.DATA_AJUSTE <= '{data_fim}' AND G.ESTA_EMP = 'SP' AND A.CODI_IMP = 1 AND A.OPER_AJU = 2 GROUP BY 10, TDAUX2.NOME UNION ALL SELECT 942 AS CODI, 'ESTORNO DE DÉBITO NAS OPERAÇÕES COM CT-e E/OU CT-eOS SUBSTITUTO' AS NOME, SUM(SALDO_IMPOSTO.ESTORNO_DEBITO_OPERACOES_CTE_SUBSTITUTO) AS VLOR FROM BETHADBA.EFSDOIMP_ESTADUAL_SP AS SALDO_IMPOSTO WHERE SALDO_IMPOSTO.CODI_EMP = {cod_emp} AND SALDO_IMPOSTO.DATA_SIM BETWEEN '{data_inicio}' AND '{data_fim}' AND SALDO_IMPOSTO.CODI_IMP = 1 HAVING SUM(SALDO_IMPOSTO.ESTORNO_DEBITO_OPERACOES_CTE_SUBSTITUTO) > 0 ORDER BY 1
"""
SQL_RESUMO_SUBSTITUICAO_TRIBUTARIA_TEMPLATE = """
SELECT COALESCE(MAX(TDDADOS.ANOMES), 0) AS ANOMES, COALESCE(SUM(TDDADOS.SAIDAS), 0) AS SAIDAS, COALESCE(SUM(TDDADOS.OUTROSD), 0) AS OUTROSD, COALESCE(SUM(TDDADOS.ESTCRE), 0) AS ESTCRE, COALESCE(SUM(TDDADOS.SUBTOTALD), 0) AS SUBTOTALD, COALESCE(SUM(TDDADOS.ENTRADAS), 0) AS ENTRADAS, COALESCE(SUM(TDDADOS.ANTERIOR), 0) AS ANTERIOR, COALESCE(SUM(TDDADOS.OUTROSC), 0) AS OUTROSC, COALESCE(SUM(TDDADOS.ESTDEB), 0) AS ESTDEB, COALESCE(SUM(TDDADOS.SUBTOTALC), 0) AS SUBTOTALC, COALESCE(SUM(TDDADOS.TOTAL), 0) AS TOTAL, COALESCE(SUM(TDDADOS.DEVEDOR), 0) AS DEVEDOR, COALESCE(SUM(TDDADOS.DEDUCOES), 0) AS DEDUCOES, COALESCE(SUM(TDDADOS.RECOLHER), 0) AS RECOLHER, COALESCE(SUM(TDDADOS.CREDOR), 0) AS CREDOR, COALESCE(SUM(TDDADOS.DEBITO_FECOP_ICMS_PR_ST), 0) AS DEBITO_FECOP_ICMS_PR_ST, COALESCE(SUM(TDDADOS.DEVOLUCAO_FECOP_ICMS_PR_ST), 0) AS DEVOLUCAO_FECOP_ICMS_PR_ST FROM ( SELECT YEAR(T.DATA_SIM) * 100 + MONTH(T.DATA_SIM) AS ANOMES, TDAUX.SAIDAS AS SAIDAS, TDAUX.OUTROSD AS OUTROSD, TDAUX.ESTC AS ESTCRE, TDAUX.SAIDAS + TDAUX.OUTROSD + TDAUX.ESTC AS SUBTOTALD, TDAUX.ENTRADAS AS ENTRADAS, TDAUX.ANTERIOR AS ANTERIOR, TDAUX.OUTROSC AS OUTROSC, TDAUX.ESTD AS ESTDEB, TDAUX.ENTRADAS + TDAUX.OUTROSC + TDAUX.ESTD AS SUBTOTALC, TDAUX.ENTRADAS + TDAUX.ANTERIOR + TDAUX.OUTROSC + TDAUX.ESTD AS TOTAL, TDAUX.DEVEDOR AS DEVEDOR, TDAUX.DEDUCOES AS DEDUCOES, TDAUX.RECOLHER AS RECOLHER, T.SCRE_SST AS CREDOR, TDSALDO_PR_ICMS_FECOP_ST.DEBITO_FECOP_ICMS_PR_ST AS DEBITO_FECOP_ICMS_PR_ST, TDSALDO_PR_ICMS_FECOP_ST.DEVOLUCAO_FECOP_ICMS_PR_sT AS DEVOLUCAO_FECOP_ICMS_PR_sT FROM BETHADBA.EFSDOSUBTRI AS T INNER JOIN BETHADBA.GEEMPRE AS G ON T.SIGL_EST = G.ESTA_EMP AND T.CODI_EMP = G.CODI_EMP INNER JOIN BETHADBA.EFPARAMETRO_VIGENCIA AS P ON T.CODI_EMP = P.CODI_EMP INNER JOIN BETHADBA.EFSDOIMP AS S ON T.CODI_EMP = S.CODI_EMP AND T.CODI_IMP = S.CODI_IMP AND T.DATA_SIM = S.DATA_SIM AND T.PDIC_SIM = S.PDIC_SIM, LATERAL(SELECT (CASE WHEN P.SIMPLESN_OPTANTE_PAR = 'S' AND P.SIMPLESN_ULTRAPASSOU_PAR = 'N' AND P.SIMPLESN_ICMS_NORMAL_PAR = 'N' THEN 'S' ELSE 'N' END) AS OPTANTE FROM DSDBA.DUMMY) AS TDSIMPLES, LATERAL(SELECT COALESCE(SUM(S31.SDEV_SIM), 0) AS SDEV FROM BETHADBA.EFSDOIMP S31 WHERE S31.CODI_EMP = T.CODI_EMP AND S31.DATA_SIM = T.DATA_SIM AND S31.PDIC_SIM = T.PDIC_SIM AND S31.CODI_IMP = 69) AS TD_IMP_69, LATERAL(SELECT SUM(CASE WHEN A.OPER_AJU = 3 THEN M.VLOR_MAJ ELSE 0 END) AS OUTD, SUM(CASE WHEN A.OPER_AJU = 4 THEN M.VLOR_MAJ ELSE 0 END) AS ESTC, SUM(CASE WHEN A.OPER_AJU = 1 THEN M.VLOR_MAJ ELSE 0 END) AS OUTC, SUM(CASE WHEN A.OPER_AJU = 2 THEN M.VLOR_MAJ ELSE 0 END) AS ESTD, SUM(CASE WHEN A.OPER_AJU IN (5,7) THEN M.VLOR_MAJ ELSE 0 END) AS ODED FROM BETHADBA.EFMOVAJU AS M INNER JOIN BETHADBA.EFAJUSTES AS A ON M.CODI_EMP = A.CODI_EMP AND M.CODI_AJU = A.CODI_AJU INNER JOIN BETHADBA.GEESTADO AS E ON E.CODIGO_UF = M.CODIGO_UF WHERE M.CODI_EMP = {cod_emp} AND MONTH(M.DATA_MAJ) = MONTH({data_inicio}) AND YEAR(M.DATA_MAJ) = YEAR({data_inicio}) AND M.REGISTRO_CONVERTIDO = 'N' AND A.CODI_IMP = 9 AND A.OPER_AJU IN (1, 2, 3, 4, 5, 7) AND E.SIGLA_UF = G.ESTA_EMP) AS TDAJUSTES, LATERAL(SELECT SUM(CASE WHEN AJUSTE.OPER_AJU = 3 THEN MOVIMENTO_AJUSTE.VALOR ELSE 0 END) AS OUTD, SUM(CASE WHEN AJUSTE.OPER_AJU = 4 THEN MOVIMENTO_AJUSTE.VALOR ELSE 0 END) AS ESTC, SUM(CASE WHEN AJUSTE.OPER_AJU = 1 THEN MOVIMENTO_AJUSTE.VALOR ELSE 0 END) AS OUTC, SUM(CASE WHEN AJUSTE.OPER_AJU = 2 THEN MOVIMENTO_AJUSTE.VALOR ELSE 0 END) AS ESTD, SUM(CASE WHEN AJUSTE.OPER_AJU IN (5,7) THEN MOVIMENTO_AJUSTE.VALOR ELSE 0 END) AS ODED FROM BETHADBA.EFMOVIMENTO_AJUSTE_ESTADUAL_AL AS MOVIMENTO_AJUSTE INNER JOIN BETHADBA.EFAJUSTES AS AJUSTE ON AJUSTE.CODI_EMP = MOVIMENTO_AJUSTE.CODI_EMP AND AJUSTE.CODI_AJU = MOVIMENTO_AJUSTE.CODI_AJU INNER JOIN BETHADBA.GEESTADO AS ESTADO ON ESTADO.CODIGO_UF = MOVIMENTO_AJUSTE.CODIGO_UF WHERE MOVIMENTO_AJUSTE.CODI_EMP = {cod_emp} AND MONTH(MOVIMENTO_AJUSTE.DATA_AJUSTE) = MONTH({data_inicio}) AND YEAR(MOVIMENTO_AJUSTE.DATA_AJUSTE) = YEAR({data_inicio}) AND AJUSTE.CODI_IMP = 9 AND AJUSTE.OPER_AJU IN (1, 2, 3, 4, 5, 7) AND ESTADO.SIGLA_UF = G.ESTA_EMP) AS TDAJUSTES_AL, LATERAL(SELECT SUM(CASE WHEN AJUSTE.OPER_AJU = 3 THEN MOVIMENTO_AJUSTE.VALOR ELSE 0 END) AS OUTD, SUM(CASE WHEN AJUSTE.OPER_AJU = 4 THEN MOVIMENTO_AJUSTE.VALOR ELSE 0 END) AS ESTC, SUM(CASE WHEN AJUSTE.OPER_AJU = 1 THEN MOVIMENTO_AJUSTE.VALOR ELSE 0 END) AS OUTC, SUM(CASE WHEN AJUSTE.OPER_AJU = 2 THEN MOVIMENTO_AJUSTE.VALOR ELSE 0 END) AS ESTD, SUM(CASE WHEN AJUSTE.OPER_AJU IN (5,7) THEN MOVIMENTO_AJUSTE.VALOR ELSE 0 END) AS ODED FROM BETHADBA.EFMOVIMENTO_AJUSTE_ESTADUAL_CE AS MOVIMENTO_AJUSTE INNER JOIN BETHADBA.EFAJUSTES AS AJUSTE ON AJUSTE.CODI_EMP = MOVIMENTO_AJUSTE.CODI_EMP AND AJUSTE.CODI_AJU = MOVIMENTO_AJUSTE.CODI_AJU INNER JOIN BETHADBA.GEESTADO AS ESTADO ON ESTADO.CODIGO_UF = MOVIMENTO_AJUSTE.CODIGO_UF WHERE MOVIMENTO_AJUSTE.CODI_EMP = {cod_emp} AND MONTH(MOVIMENTO_AJUSTE.DATA_AJUSTE) = MONTH({data_inicio}) AND YEAR(MOVIMENTO_AJUSTE.DATA_AJUSTE) = YEAR({data_inicio}) AND AJUSTE.CODI_IMP = 9 AND AJUSTE.OPER_AJU IN (1, 2, 3, 4, 5, 7) AND ESTADO.SIGLA_UF = G.ESTA_EMP) AS TDAJUSTES_CE, LATERAL(SELECT SUM(CASE WHEN A.OPER_AJU = 3 THEN M.VALOR ELSE 0 END) AS OUTD, SUM(CASE WHEN A.OPER_AJU = 4 THEN M.VALOR ELSE 0 END) AS ESTC, SUM(CASE WHEN A.OPER_AJU = 1 THEN M.VALOR ELSE 0 END) AS OUTC, SUM(CASE WHEN A.OPER_AJU = 2 THEN M.VALOR ELSE 0 END) AS ESTD, SUM(CASE WHEN A.OPER_AJU IN (5,7) THEN M.VALOR ELSE 0 END) AS ODED FROM BETHADBA.EFMOVIMENTO_AJUSTE_ESTADUAL_AM AS M INNER JOIN BETHADBA.EFAJUSTES AS A ON M.CODI_EMP = A.CODI_EMP AND M.CODI_AJU = A.CODI_AJU INNER JOIN BETHADBA.GEESTADO AS E ON E.CODIGO_UF = M.CODIGO_UF WHERE M.CODI_EMP = {cod_emp} AND MONTH(M.DATA_AJUSTE) = MONTH({data_inicio}) AND YEAR(M.DATA_AJUSTE) = YEAR({data_inicio}) AND A.CODI_IMP = 9 AND A.OPER_AJU IN (1, 2, 3, 4, 5, 7) AND E.SIGLA_UF = G.ESTA_EMP) AS TDAJUSTES_AM, LATERAL(SELECT SUM(CASE WHEN A.OPER_AJU = 3 THEN M.VALOR ELSE 0 END) AS OUTD, SUM(CASE WHEN A.OPER_AJU = 4 THEN M.VALOR ELSE 0 END) AS ESTC, SUM(CASE WHEN A.OPER_AJU = 1 THEN M.VALOR ELSE 0 END) AS OUTC, SUM(CASE WHEN A.OPER_AJU = 2 THEN M.VALOR ELSE 0 END) AS ESTD, SUM(CASE WHEN A.OPER_AJU IN (5,7) THEN M.VALOR ELSE 0 END) AS ODED FROM BETHADBA.EFMOVIMENTO_AJUSTE_ESTADUAL_RJ AS M INNER JOIN BETHADBA.EFAJUSTES AS A ON M.CODI_EMP = A.CODI_EMP AND M.CODI_AJU = A.CODI_AJU INNER JOIN BETHADBA.GEESTADO AS E ON E.CODIGO_UF = M.CODIGO_UF WHERE M.CODI_EMP = {cod_emp} AND MONTH(M.DATA_AJUSTE) = MONTH({data_inicio}) AND YEAR(M.DATA_AJUSTE) = YEAR({data_inicio}) AND A.CODI_IMP = 9 AND A.OPER_AJU IN (1, 2, 3, 4, 5, 7) AND E.SIGLA_UF = G.ESTA_EMP) AS TDAJUSTES_RJ, LATERAL(SELECT SUM(CASE WHEN A.OPER_AJU = 3 THEN M.VALOR ELSE 0 END) AS OUTD, SUM(CASE WHEN A.OPER_AJU = 4 THEN M.VALOR ELSE 0 END) AS ESTC, SUM(CASE WHEN A.OPER_AJU = 1 THEN M.VALOR ELSE 0 END) AS OUTC, SUM(CASE WHEN A.OPER_AJU = 2 THEN M.VALOR ELSE 0 END) AS ESTD, SUM(CASE WHEN A.OPER_AJU IN (5,7) THEN M.VALOR ELSE 0 END) AS ODED FROM BETHADBA.EFMOVIMENTO_AJUSTE_ESTADUAL_MT AS M INNER JOIN BETHADBA.EFAJUSTES AS A ON M.CODI_EMP = A.CODI_EMP AND M.CODI_AJU = A.CODI_AJU INNER JOIN BETHADBA.GEESTADO AS E ON E.CODIGO_UF = M.CODIGO_UF WHERE M.CODI_EMP = {cod_emp} AND MONTH(M.DATA_AJUSTE) = MONTH({data_inicio}) AND YEAR(M.DATA_AJUSTE) = YEAR({data_inicio}) AND A.CODI_IMP = 9 AND A.OPER_AJU IN (1, 2, 3, 4, 5, 7) AND E.SIGLA_UF = G.ESTA_EMP) AS TDAJUSTES_MT, LATERAL(SELECT SUM(CASE WHEN A.OPER_AJU = 3 THEN M.VALOR ELSE 0 END) AS OUTD, SUM(CASE WHEN A.OPER_AJU = 4 THEN M.VALOR ELSE 0 END) AS ESTC, SUM(CASE WHEN A.OPER_AJU = 1 THEN M.VALOR ELSE 0 END) AS OUTC, SUM(CASE WHEN A.OPER_AJU = 2 THEN M.VALOR ELSE 0 END) AS ESTD, SUM(CASE WHEN A.OPER_AJU IN (5,7) THEN M.VALOR ELSE 0 END) AS ODED FROM BETHADBA.EFMOVIMENTO_AJUSTE_ESTADUAL_PA AS M INNER JOIN BETHADBA.EFAJUSTES AS A ON M.CODI_EMP = A.CODI_EMP AND M.CODI_AJU = A.CODI_AJU INNER JOIN BETHADBA.GEESTADO AS E ON E.CODIGO_UF = M.CODIGO_UF WHERE M.CODI_EMP = {cod_emp} AND MONTH(M.DATA_AJUSTE) = MONTH({data_inicio}) AND YEAR(M.DATA_AJUSTE) = YEAR({data_inicio}) AND A.CODI_IMP = 9 AND A.OPER_AJU IN (1, 2, 3, 4, 5, 7) AND E.SIGLA_UF = G.ESTA_EMP) AS TDAJUSTES_PA, LATERAL(SELECT SUM(CASE WHEN A.OPER_AJU = 3 THEN M.VALOR ELSE 0 END) AS OUTD, SUM(CASE WHEN A.OPER_AJU = 4 THEN M.VALOR ELSE 0 END) AS ESTC, SUM(CASE WHEN A.OPER_AJU = 1 THEN M.VALOR ELSE 0 END) AS OUTC, SUM(CASE WHEN A.OPER_AJU = 2 THEN M.VALOR ELSE 0 END) AS ESTD, SUM(CASE WHEN A.OPER_AJU IN (5,7) THEN M.VALOR ELSE 0 END) AS ODED FROM BETHADBA.EFMOVIMENTO_AJUSTE_ESTADUAL_PB AS M INNER JOIN BETHADBA.EFAJUSTES AS A ON M.CODI_EMP = A.CODI_EMP AND M.CODI_AJU = A.CODI_AJU INNER JOIN BETHADBA.GEESTADO AS E ON E.CODIGO_UF = M.CODIGO_UF WHERE M.CODI_EMP = {cod_emp} AND MONTH(M.DATA_AJUSTE) = MONTH({data_inicio}) AND YEAR(M.DATA_AJUSTE) = YEAR({data_inicio}) AND A.CODI_IMP = 9 AND A.OPER_AJU IN (1, 2, 3, 4, 5, 7) AND E.SIGLA_UF = G.ESTA_EMP) AS TDAJUSTES_PB, LATERAL(SELECT SUM(CASE WHEN A.OPER_AJU = 3 THEN M.VALOR ELSE 0 END) AS OUTD, SUM(CASE WHEN A.OPER_AJU = 4 THEN M.VALOR ELSE 0 END) AS ESTC, SUM(CASE WHEN A.OPER_AJU = 1 THEN M.VALOR ELSE 0 END) AS OUTC, SUM(CASE WHEN A.OPER_AJU = 2 THEN M.VALOR ELSE 0 END) AS ESTD, SUM(CASE WHEN A.OPER_AJU IN (5,7) THEN M.VALOR ELSE 0 END) AS ODED FROM BETHADBA.EFMOVIMENTO_AJUSTE_ESTADUAL_ES AS M INNER JOIN BETHADBA.EFAJUSTES AS A ON M.CODI_EMP = A.CODI_EMP AND M.CODI_AJU = A.CODI_AJU INNER JOIN BETHADBA.GEESTADO AS E ON E.CODIGO_UF = M.CODIGO_UF WHERE M.CODI_EMP = {cod_emp} AND MONTH(M.DATA_AJUSTE) = MONTH({data_inicio}) AND YEAR(M.DATA_AJUSTE) = YEAR({data_inicio}) AND A.CODI_IMP = 9 AND A.OPER_AJU IN (1, 2, 3, 4, 5, 7) AND E.SIGLA_UF = G.ESTA_EMP) AS TDAJUSTES_ES, LATERAL(SELECT SUM(CASE WHEN A.OPER_AJU = 3 THEN M.VALOR ELSE 0 END) AS OUTD, SUM(CASE WHEN A.OPER_AJU = 4 THEN M.VALOR ELSE 0 END) AS ESTC, SUM(CASE WHEN A.OPER_AJU = 1 THEN M.VALOR ELSE 0 END) AS OUTC, SUM(CASE WHEN A.OPER_AJU = 2 THEN M.VALOR ELSE 0 END) AS ESTD, SUM(CASE WHEN A.OPER_AJU IN (5, 7) THEN M.VALOR ELSE 0 END) AS ODED FROM BETHADBA.EFMOVIMENTO_AJUSTE_ESTADUAL_RR AS M INNER JOIN BETHADBA.EFAJUSTES AS A ON M.CODI_EMP = A.CODI_EMP AND M.CODI_AJU = A.CODI_AJU INNER JOIN BETHADBA.GEESTADO AS E ON E.CODIGO_UF = M.CODIGO_UF WHERE M.CODI_EMP = {cod_emp} AND MONTH(M.DATA_AJUSTE) = MONTH({data_inicio}) AND YEAR(M.DATA_AJUSTE) = YEAR({data_inicio}) AND A.CODI_IMP = 9 AND A.OPER_AJU IN (1, 2, 3, 4, 5, 7) AND E.SIGLA_UF = G.ESTA_EMP) AS TDAJUSTES_RR, LATERAL(SELECT SUM(CASE WHEN A.OPER_AJU = 3 THEN M.VALOR ELSE 0 END) AS OUTD, SUM(CASE WHEN A.OPER_AJU = 4 THEN M.VALOR ELSE 0 END) AS ESTC, SUM(CASE WHEN A.OPER_AJU = 1 THEN M.VALOR ELSE 0 END) AS OUTC, SUM(CASE WHEN A.OPER_AJU = 2 THEN M.VALOR ELSE 0 END) AS ESTD, SUM(CASE WHEN A.OPER_AJU IN (5,7) THEN M.VALOR ELSE 0 END) AS ODED FROM BETHADBA.EFMOVIMENTO_AJUSTE_ESTADUAL_MS AS M INNER JOIN BETHADBA.EFAJUSTES AS A ON M.CODI_EMP = A.CODI_EMP AND M.CODI_AJU = A.CODI_AJU INNER JOIN BETHADBA.GEESTADO AS E ON E.CODIGO_UF = M.CODIGO_UF WHERE M.CODI_EMP = {cod_emp} AND MONTH(M.DATA_AJUSTE) = MONTH({data_inicio}) AND YEAR(M.DATA_AJUSTE) = YEAR({data_inicio}) AND A.CODI_IMP = 9 AND A.OPER_AJU IN (1, 2, 3, 4, 5, 7) AND E.SIGLA_UF = G.ESTA_EMP) AS TDAJUSTES_MS, LATERAL(SELECT SUM(CASE WHEN A.OPER_AJU = 3 THEN M.VALOR ELSE 0 END) AS OUTD, SUM(CASE WHEN A.OPER_AJU = 4 THEN M.VALOR ELSE 0 END) AS ESTC, SUM(CASE WHEN A.OPER_AJU = 1 THEN M.VALOR ELSE 0 END) AS OUTC, SUM(CASE WHEN A.OPER_AJU = 2 THEN M.VALOR ELSE 0 END) AS ESTD, SUM(CASE WHEN A.OPER_AJU IN (5,7) THEN M.VALOR ELSE 0 END) AS ODED FROM BETHADBA.EFMOVIMENTO_AJUSTE_ESTADUAL_TO AS M INNER JOIN BETHADBA.EFAJUSTES AS A ON M.CODI_EMP = A.CODI_EMP AND M.CODI_AJU = A.CODI_AJU INNER JOIN BETHADBA.GEESTADO AS E ON E.CODIGO_UF = M.CODIGO_UF WHERE M.CODI_EMP = {cod_emp} AND MONTH(M.DATA_AJUSTE) = MONTH({data_inicio}) AND YEAR(M.DATA_AJUSTE) = YEAR({data_inicio}) AND A.CODI_IMP = 9 AND A.OPER_AJU IN (1, 2, 3, 4, 5, 7) AND E.SIGLA_UF = G.ESTA_EMP) AS TDAJUSTES_TO, LATERAL(SELECT SUM(CASE WHEN A.OPER_AJU = 3 THEN M.VALOR ELSE 0 END) AS OUTD, SUM(CASE WHEN A.OPER_AJU = 4 THEN M.VALOR ELSE 0 END) AS ESTC, SUM(CASE WHEN A.OPER_AJU = 1 THEN M.VALOR ELSE 0 END) AS OUTC, SUM(CASE WHEN A.OPER_AJU = 2 THEN M.VALOR ELSE 0 END) AS ESTD, SUM(CASE WHEN A.OPER_AJU IN (5,7) THEN M.VALOR ELSE 0 END) AS ODED FROM BETHADBA.EFMOVIMENTO_AJUSTE_ESTADUAL_RS AS M INNER JOIN BETHADBA.EFAJUSTES AS A ON M.CODI_EMP = A.CODI_EMP AND M.CODI_AJU = A.CODI_AJU INNER JOIN BETHADBA.GEESTADO AS E ON E.CODIGO_UF = M.CODIGO_UF WHERE M.CODI_EMP = {cod_emp} AND MONTH(M.DATA_AJUSTE) = MONTH({data_inicio}) AND YEAR(M.DATA_AJUSTE) = YEAR({data_inicio}) AND A.CODI_IMP = 9 AND A.OPER_AJU IN (1, 2, 3, 4, 5, 7) AND E.SIGLA_UF = G.ESTA_EMP) AS TDAJUSTES_RS, LATERAL(SELECT SUM(CASE WHEN AJUSTE.OPER_AJU = 3 THEN MOVIMENTO_AJUSTE.VALOR ELSE 0 END) AS OUTD, SUM(CASE WHEN AJUSTE.OPER_AJU = 4 THEN MOVIMENTO_AJUSTE.VALOR ELSE 0 END) AS ESTC, SUM(CASE WHEN AJUSTE.OPER_AJU = 1 THEN MOVIMENTO_AJUSTE.VALOR ELSE 0 END) AS OUTC, SUM(CASE WHEN AJUSTE.OPER_AJU = 2 THEN MOVIMENTO_AJUSTE.VALOR ELSE 0 END) AS ESTD, SUM(CASE WHEN AJUSTE.OPER_AJU IN (5,7) THEN MOVIMENTO_AJUSTE.VALOR ELSE 0 END) AS ODED FROM BETHADBA.EFMOVIMENTO_AJUSTE_ESTADUAL_RN AS MOVIMENTO_AJUSTE INNER JOIN BETHADBA.EFAJUSTES AS AJUSTE ON MOVIMENTO_AJUSTE.CODI_EMP = AJUSTE.CODI_EMP AND MOVIMENTO_AJUSTE.CODI_AJU = AJUSTE.CODI_AJU INNER JOIN BETHADBA.GEESTADO AS ESTADO ON ESTADO.CODIGO_UF = MOVIMENTO_AJUSTE.CODIGO_UF WHERE MOVIMENTO_AJUSTE.CODI_EMP = {cod_emp} AND MONTH(MOVIMENTO_AJUSTE.DATA_AJUSTE) = MONTH({data_inicio}) AND YEAR(MOVIMENTO_AJUSTE.DATA_AJUSTE) = YEAR({data_inicio}) AND AJUSTE.CODI_IMP = 9 AND AJUSTE.OPER_AJU IN (1, 2, 3, 4, 5, 7) AND ESTADO.SIGLA_UF = G.ESTA_EMP) AS TDAJUSTES_RN, LATERAL(SELECT SUM(CASE WHEN AJUSTE.OPER_AJU = 3 THEN MOVIMENTO_AJUSTE.VALOR ELSE 0 END) AS OUTD, SUM(CASE WHEN AJUSTE.OPER_AJU = 4 THEN MOVIMENTO_AJUSTE.VALOR ELSE 0 END) AS ESTC, SUM(CASE WHEN AJUSTE.OPER_AJU = 1 THEN MOVIMENTO_AJUSTE.VALOR ELSE 0 END) AS OUTC, SUM(CASE WHEN AJUSTE.OPER_AJU = 2 THEN MOVIMENTO_AJUSTE.VALOR ELSE 0 END) AS ESTD, SUM(CASE WHEN AJUSTE.OPER_AJU IN (5,7) THEN MOVIMENTO_AJUSTE.VALOR ELSE 0 END) AS ODED FROM BETHADBA.EFMOVIMENTO_AJUSTE_ESTADUAL_SP AS MOVIMENTO_AJUSTE INNER JOIN BETHADBA.EFAJUSTES AS AJUSTE ON MOVIMENTO_AJUSTE.CODI_EMP = AJUSTE.CODI_EMP AND MOVIMENTO_AJUSTE.CODI_AJU = AJUSTE.CODI_AJU INNER JOIN BETHADBA.GEESTADO AS ESTADO ON ESTADO.CODIGO_UF = MOVIMENTO_AJUSTE.CODIGO_UF WHERE MOVIMENTO_AJUSTE.CODI_EMP = {cod_emp} AND MONTH(MOVIMENTO_AJUSTE.DATA_AJUSTE) = MONTH({data_inicio}) AND YEAR(MOVIMENTO_AJUSTE.DATA_AJUSTE) = YEAR({data_inicio}) AND AJUSTE.CODI_IMP = 9 AND AJUSTE.OPER_AJU IN (1, 2, 3, 4, 5, 7) AND ESTADO.SIGLA_UF = G.ESTA_EMP) AS TDAJUSTES_SP, LATERAL(SELECT COALESCE(SUM(S31.SDEV_SIM), 0) AS SDEV FROM BETHADBA.EFSDOIMP S31 WHERE S31.CODI_EMP = T.CODI_EMP AND S31.DATA_SIM = T.DATA_SIM AND S31.PDIC_SIM = T.PDIC_SIM AND G.ESTA_EMP <> 'ES' AND S31.CODI_IMP = 31) AS TD_IMP_31_NORMAL, LATERAL(SELECT COALESCE(SUM(SALDO_POR_RECOLHIMENTO.SALDO_DEVEDOR), 0) AS SDEV FROM BETHADBA.EFSDOIMP_POR_RECOLHIMENTO AS SALDO_POR_RECOLHIMENTO WHERE SALDO_POR_RECOLHIMENTO.CODI_EMP = T.CODI_EMP AND SALDO_POR_RECOLHIMENTO.DATA_SIM = T.DATA_SIM AND SALDO_POR_RECOLHIMENTO.PDIC_SIM = T.PDIC_SIM AND G.ESTA_EMP = 'ES' AND SALDO_POR_RECOLHIMENTO.CODI_IMP = 31) AS TD_IMP_31_POR_REC, LATERAL(SELECT TD_IMP_31_POR_REC.SDEV + TD_IMP_31_NORMAL.SDEV AS SDEV FROM DSDBA.DUMMY) AS TD_IMP_31, LATERAL(SELECT COALESCE(SUM(SALDO_IMPOSTO.VIMS_SIM), 0) AS SALDO_SAIDA, COALESCE(SUM(SALDO_IMPOSTO.VIME_SIM), 0) AS SALDO_ENTRADA, COALESCE(SUM(SALDO_IMPOSTO.SDEV_SIM), 0) AS SALDO_DEVEDOR FROM BETHADBA.EFSDOIMP AS SALDO_IMPOSTO WHERE SALDO_IMPOSTO.CODI_EMP = T.CODI_EMP AND SALDO_IMPOSTO.DATA_SIM = T.DATA_SIM AND SALDO_IMPOSTO.PDIC_SIM = T.PDIC_SIM AND SALDO_IMPOSTO.CODI_IMP = 129) AS TD_IMP_129, LATERAL( SELECT COALESCE(SUM(P.VALOR), 0) AS VALOR FROM BETHADBA.EFDETALHAMENTO_CREDITO_PRESUMIDO AS C INNER JOIN BETHADBA.EFDETALHAMENTO_CREDITO_PRESUMIDO_PROCESSOS AS P ON P.CODI_EMP = C.CODI_EMP AND P.COMPETENCIA = C.COMPETENCIA AND P.TIPO = C.TIPO WHERE C.CODI_EMP = S.CODI_EMP AND C.COMPETENCIA = S.DATA_SIM AND C.TIPO = 7 AND C.COMPETENCIA >= '2013-08-01') AS TD_DETALHAMENTO_CREDITO_ST, LATERAL(SELECT COALESCE(SUM(TDEFIMPENT.VLOR_IEN), 0) AS VLOR FROM BETHADBA.EFENTRADAS AS EFENTRADAS INNER JOIN BETHADBA.GEEMPRE AS GEEMPRE ON GEEMPRE.CODI_EMP = EFENTRADAS.CODI_EMP INNER JOIN BETHADBA.EFACUMULADOR_VIGENCIA AS EFACUMULADOR ON EFACUMULADOR.CODI_EMP = EFENTRADAS.CODI_EMP AND EFACUMULADOR.CODI_ACU = EFENTRADAS.CODI_ACU, LATERAL(SELECT COALESCE(SUM(EFIMPENT.VLOR_IEN), 0) AS VLOR_IEN FROM BETHADBA.EFIMPENT AS EFIMPENT WHERE EFIMPENT.CODI_EMP = EFENTRADAS.CODI_EMP AND EFIMPENT.CODI_ENT = EFENTRADAS.CODI_ENT AND EFIMPENT.CODI_IMP = 31) AS TDEFIMPENT WHERE EFENTRADAS.CODI_EMP = T.CODI_EMP AND MONTH(EFENTRADAS.DENT_ENT) = MONTH({data_inicio}) AND YEAR(EFENTRADAS.DENT_ENT) = YEAR({data_inicio}) AND GEEMPRE.ESTA_EMP IN ('RS') AND GEEMPRE.ESTA_EMP = 'RS' AND EFACUMULADOR.LANCTO_DEB_REF_ANT_ACU = 'S' AND EFACUMULADOR.VIGENCIA_ACU = DSDBA.D_BUSCA_VIGENCIA_ACUMULADOR(EFENTRADAS.CODI_EMP, EFENTRADAS.CODI_ACU, EFENTRADAS.DENT_ENT)) AS TDEFENTRADAS, LATERAL(SELECT COALESCE(SUM(S01.VDI21_SIM), 0) AS VDI21_SIM FROM BETHADBA.EFSDOIMP S01 WHERE S01.CODI_EMP = T.CODI_EMP AND S01.DATA_SIM = T.DATA_SIM AND S01.PDIC_SIM = T.PDIC_SIM AND S01.CODI_IMP = 01) AS TD_IMP_01, LATERAL(SELECT COALESCE(SUM(SALDO_NOTA.VALOR_IMPOSTOS_SAIDA + SALDO_NOTA.VALOR_DEBITO_ICMSA_TR_PREST_SERV_TRANSPORTE), 0) AS SDEV FROM BETHADBA.EFSDOIMP_POR_NOTA_SAIDA AS SALDO_NOTA INNER JOIN BETHADBA.GEEMPRE AS GEEMPRE ON GEEMPRE.CODI_EMP = SALDO_NOTA.CODI_EMP WHERE SALDO_NOTA.CODI_EMP = T.CODI_EMP AND SALDO_NOTA.DATA_SIM = T.DATA_SIM AND SALDO_NOTA.CODI_IMP = 98 AND GEEMPRE.ESTA_EMP = 'RS') AS TD_IMP_98, LATERAL(SELECT COALESCE(SUM(SALDO_IMPOSTO_RS.SALDO_CREDOR_ANT_UTIL_PARA_COMP_DEB_ICMS_PROPRIO), 0) AS SALDO_CREDOR_ANT_UTIL_PARA_COMP_DEB_ICMS_PROPRIO FROM BETHADBA.EFSDOIMP_ESTADUAL_RS AS SALDO_IMPOSTO_RS WHERE SALDO_IMPOSTO_RS.CODI_EMP = T.CODI_EMP AND SALDO_IMPOSTO_RS.CODI_IMP = T.CODI_IMP AND SALDO_IMPOSTO_RS.DATA_SIM = T.DATA_SIM AND SALDO_IMPOSTO_RS.PDIC_SIM = T.PDIC_SIM) AS TD_SALDO_IMPOSTO_RS, LATERAL(SELECT T.VIMS_SST + CASE G.ESTA_EMP WHEN 'MT' THEN TD_IMP_129.SALDO_SAIDA ELSE 0 END AS SAIDAS, COALESCE(TDAJUSTES.OUTD, 0) + COALESCE(TDAJUSTES_AM.OUTD, 0) + COALESCE(TDAJUSTES_AM.OUTD, 0) + COALESCE(TDAJUSTES_RJ.OUTD, 0) + COALESCE(TDAJUSTES_MT.OUTD, 0) + COALESCE(TDAJUSTES_ES.OUTD, 0) + COALESCE(TDAJUSTES_RR.OUTD, 0) + COALESCE(TDAJUSTES_TO.OUTD, 0) + COALESCE(TDAJUSTES_MS.OUTD, 0) + COALESCE(TDAJUSTES_PA.OUTD, 0) + COALESCE(TDAJUSTES_PB.OUTD, 0) + COALESCE(TDAJUSTES_RS.OUTD, 0) + COALESCE(TDAJUSTES_RN.OUTD, 0) + COALESCE(TDAJUSTES_CE.OUTD, 0) + COALESCE(TDAJUSTES_SP.OUTD, 0) + COALESCE(TDAJUSTES_AL.OUTD, 0) + (CASE G.ESTA_EMP WHEN 'TO' THEN TD_IMP_31.SDEV WHEN 'MG' THEN TD_IMP_69.SDEV WHEN 'RS' THEN (TDEFENTRADAS.VLOR + TD_IMP_98.SDEV) + TD_SALDO_IMPOSTO_RS.SALDO_CREDOR_ANT_UTIL_PARA_COMP_DEB_ICMS_PROPRIO WHEN 'RJ' THEN S.VDI93_SIM ELSE 0 END) AS OUTROSD, COALESCE(TDAJUSTES.ESTC, 0) + COALESCE(TDAJUSTES_AM.ESTC, 0) + COALESCE(TDAJUSTES_RJ.ESTC, 0) + COALESCE(TDAJUSTES_MT.ESTC, 0) + COALESCE(TDAJUSTES_ES.ESTC, 0) + COALESCE(TDAJUSTES_RR.ESTC, 0) + COALESCE(TDAJUSTES_TO.ESTC, 0) + COALESCE(TDAJUSTES_MS.ESTC, 0) + COALESCE(TDAJUSTES_PA.ESTC, 0) + COALESCE(TDAJUSTES_PB.ESTC, 0) + COALESCE(TDAJUSTES_RS.ESTC, 0) + COALESCE(TDAJUSTES_RN.ESTC, 0) + COALESCE(TDAJUSTES_CE.ESTC, 0) + COALESCE(TDAJUSTES_SP.ESTC, 0) + COALESCE(TDAJUSTES_AL.ESTC, 0)AS ESTC, T.VIME_SST + (CASE G.ESTA_EMP WHEN 'MT' THEN TD_IMP_129.SALDO_ENTRADA ELSE 0 END) AS ENTRADAS, COALESCE((SELECT SUM(S1.SCRE_SST) FROM BETHADBA.EFSDOSUBTRI AS S1 WHERE S1.CODI_EMP = T.CODI_EMP AND S1.DATA_SIM = DSDBA.D_YMD(YEAR(T.DATA_SIM), MONTH(T.DATA_SIM) - 1, 1) AND S1.CODI_IMP = T.CODI_IMP AND S1.SIGL_EST = T.SIGL_EST AND S1.PDIC_SIM = T.PDIC_SIM), 0) AS ANTERIOR, COALESCE(TDAJUSTES.OUTC, 0) + COALESCE(TDAJUSTES_AM.OUTC, 0) + COALESCE(TDAJUSTES_RJ.OUTC, 0) + COALESCE(TDAJUSTES_MT.OUTC, 0) + COALESCE(TDAJUSTES_ES.OUTC, 0) + COALESCE(TDAJUSTES_RR.OUTC, 0) + COALESCE(TDAJUSTES_TO.OUTC, 0) + COALESCE(TDAJUSTES_MS.OUTC, 0) + COALESCE(TDAJUSTES_PA.OUTC, 0) + COALESCE(TDAJUSTES_PB.OUTC, 0) + COALESCE(TDAJUSTES_RS.OUTC, 0) + COALESCE(TDAJUSTES_RN.OUTC, 0) + COALESCE(TDAJUSTES_CE.OUTC, 0) + COALESCE(TDAJUSTES_SP.OUTC, 0) + COALESCE(TDAJUSTES_AL.OUTC, 0) + COALESCE( T.RESSARCIMENTO_ICMS_SST + T.RESSARCIMENTO_SST, 0) AS OUTROSC, COALESCE(TDAJUSTES.ESTD, 0) + COALESCE(TDAJUSTES_AM.ESTD, 0) + COALESCE(TDAJUSTES_RJ.ESTD, 0) + COALESCE(TDAJUSTES_MT.ESTD, 0) + COALESCE(TDAJUSTES_ES.ESTD, 0) + COALESCE(TDAJUSTES_RR.ESTD, 0) + COALESCE(TDAJUSTES_TO.ESTD, 0) + COALESCE(TDAJUSTES_MS.ESTD, 0) + COALESCE(TDAJUSTES_PA.ESTD, 0) + COALESCE(TDAJUSTES_PB.ESTD, 0) + COALESCE(TDAJUSTES_RS.ESTD, 0) + COALESCE(TDAJUSTES_RN.ESTD, 0) + COALESCE(TDAJUSTES_CE.ESTD, 0) + COALESCE(TDAJUSTES_SP.ESTD, 0) + COALESCE(TDAJUSTES_AL.ESTD, 0) + (CASE G.ESTA_EMP WHEN 'MG' THEN S.VDI87_SIM ELSE 0 END) AS ESTD, COALESCE(TDAJUSTES.ODED, 0) + COALESCE(TDAJUSTES_AM.ODED, 0) + COALESCE(TDAJUSTES_RJ.ODED, 0) + COALESCE(TDAJUSTES_ES.ODED, 0) + COALESCE(TDAJUSTES_MT.ODED, 0) + COALESCE(TDAJUSTES_RR.ODED, 0) + COALESCE(TDAJUSTES_TO.ODED, 0) + COALESCE(TDAJUSTES_MS.ODED, 0) + COALESCE(TDAJUSTES_PA.ODED, 0) + COALESCE(TDAJUSTES_PB.ODED, 0) + COALESCE(TDAJUSTES_RS.ODED, 0) + COALESCE(TDAJUSTES_RN.ODED, 0) + COALESCE(TDAJUSTES_CE.ODED, 0) + COALESCE(TDAJUSTES_SP.ODED, 0) + COALESCE(TDAJUSTES_AL.ODED, 0) + (CASE G.ESTA_EMP WHEN 'AL' THEN S.VDI8_SIM WHEN 'RJ' THEN S.VDI2_SIM + S.VDI17_SIM WHEN 'ES' THEN S.VDI7_SIM WHEN 'PB' THEN S.VDI9_SIM ELSE 0 END) AS DEDUCOES, T.SDEV_SST + CASE WHEN G.ESTA_EMP = 'RS' THEN TDEFENTRADAS.VLOR + TD_IMP_98.SDEV WHEN G.ESTA_EMP = 'MG' THEN TD_IMP_69.SDEV WHEN G.ESTA_EMP = 'PA' THEN TD_IMP_31.SDEV WHEN G.ESTA_EMP = 'RJ' THEN 0.00 ELSE TD_IMP_31.SDEV END + COALESCE(TDAJUSTES.ODED, 0) + COALESCE(TDAJUSTES_AM.ODED, 0) + COALESCE(TDAJUSTES_RJ.ODED, 0) + COALESCE(TDAJUSTES_ES.ODED, 0) + COALESCE(TDAJUSTES_MT.ODED, 0) + COALESCE(TDAJUSTES_RR.ODED, 0) + COALESCE(TDAJUSTES_TO.ODED, 0) + COALESCE(TDAJUSTES_MS.ODED, 0) + COALESCE(TDAJUSTES_PA.ODED, 0) + COALESCE(TDAJUSTES_PB.ODED, 0) + COALESCE(TDAJUSTES_RS.ODED, 0) + COALESCE(TDAJUSTES_RN.ODED, 0) + COALESCE(TDAJUSTES_CE.ODED, 0) + COALESCE(TDAJUSTES_SP.ODED, 0) + COALESCE(TDAJUSTES_AL.ODED, 0) + (CASE G.ESTA_EMP WHEN 'RJ' THEN S.VDI17_SIM + S.VDI93_SIM WHEN 'MT' THEN TD_IMP_129.SALDO_DEVEDOR ELSE 0 END) AS DEVEDOR, T.SDEV_SST + (CASE G.ESTA_EMP WHEN 'RS' THEN TDEFENTRADAS.VLOR + TD_IMP_98.SDEV WHEN 'RJ' THEN S.VDI93_SIM WHEN 'MG' THEN TD_IMP_69.SDEV WHEN 'PA' THEN TD_IMP_31.SDEV WHEN 'MT' THEN TD_IMP_129.SALDO_DEVEDOR ELSE TD_IMP_31.SDEV END) - (CASE G.ESTA_EMP WHEN 'AL' THEN S.VDI8_SIM WHEN 'ES' THEN S.VDI7_SIM WHEN 'PB' THEN S.VDI9_SIM ELSE 0 END) AS RECOLHER FROM DSDBA.DUMMY) AS TDAUX, LATERAL(SELECT COALESCE(MAX(1), 0) AS EXISTE FROM BETHADBA.EFSDOIMP_SUBTRI_POR_UF AS NOVA_APURACAO WHERE NOVA_APURACAO.CODI_EMP = T.CODI_EMP AND NOVA_APURACAO.DATA_SIM = T.DATA_SIM AND NOVA_APURACAO.CODI_IMP = T.CODI_IMP AND NOVA_APURACAO.PDIC_SIM = T.PDIC_SIM) AS TDNOVA_APURACAO, LATERAL(SELECT COALESCE(SUM(IMPOSTO.DEBITO_FECOP_ICMS_ST), 0) AS DEBITO_FECOP_ICMS_PR_ST, COALESCE(SUM(IMPOSTO.DEVOLUCAO_FECOP_ICMS_ST), 0) AS DEVOLUCAO_FECOP_ICMS_PR_ST FROM BETHADBA.EFSDOIMP_SUBTRI_POR_UF_PR AS IMPOSTO WHERE IMPOSTO.CODI_EMP = T.CODI_EMP AND IMPOSTO.DATA_SIM = T.DATA_SIM AND IMPOSTO.PDIC_SIM = T.PDIC_SIM AND IMPOSTO.CODI_IMP = T.CODI_IMP) AS TDSALDO_PR_ICMS_FECOP_ST WHERE T.CODI_EMP = {cod_emp} AND T.DATA_SIM = {data_inicio} AND T.CODI_IMP = 9 AND T.PDIC_SIM = 6 AND TDNOVA_APURACAO.EXISTE = 0 AND P.VIGENCIA_PAR = DSDBA.D_BUSCA_VIGENCIA_PARAMETRO(T.CODI_EMP, DATE(T.DATA_SIM)) UNION ALL SELECT COALESCE(MAX(TDAUX.ANOMES), 0) AS ANOMES, COALESCE(SUM(TDAUX.SAIDAS + COALESCE(TD_SUBTRI_5667.VALOR, 0)), 0) AS SAIDAS, COALESCE(SUM(TDAUX.OUTROSD), 0) AS OUTROSD, COALESCE(SUM(TDAUX.ESTC), 0) AS ESTCRE, COALESCE(SUM(TDAUX.SAIDAS + TDAUX.OUTROSD + TDAUX.ESTC + COALESCE(TD_SUBTRI_5667.VALOR, 0)), 0) AS SUBTOTALD, COALESCE(SUM(TDAUX.NOTA), 0) AS NOTA, COALESCE(SUM(TDAUX.ANTERIOR), 0) AS ANTERIOR, COALESCE(SUM(TDAUX.OUTROSC), 0) AS OUTROSC, COALESCE(SUM(TDAUX.ESTD), 0) AS ESTDEB, COALESCE(SUM(TDAUX.NOTA + TDAUX.OUTROSC + TDAUX.ESTD), 0) AS SUBTOTALC, COALESCE(SUM(TDAUX.NOTA + TDAUX.ANTERIOR + TDAUX.OUTROSC + TDAUX.ESTD), 0) AS TOTAL, COALESCE(SUM(TDAUX.DEVEDOR + COALESCE(TD_SUBTRI_5667.VALOR, 0)), 0) AS DEVEDOR, COALESCE(SUM(TDAUX.DEDUCOES), 0) AS DEDUCOES, COALESCE(SUM(TDAUX.SALDO_POR_RECOLHIMENTO + COALESCE(TD_SUBTRI_5667.VALOR, 0)), 0) AS SALDO_POR_RECOLHIMENTO, COALESCE(SUM(SUBTRI.SALDO_CREDOR), 0) AS CREDOR, COALESCE(SUM(TDSALDO_PR_ICMS_FECOP_ST.DEBITO_FECOP_ICMS_PR_ST), 0) AS DEBITO_FECOP_ICMS_PR_ST, COALESCE(SUM(TDSALDO_PR_ICMS_FECOP_ST.DEVOLUCAO_FECOP_ICMS_PR_ST), 0) AS DEVOLUCAO_FECOP_ICMS_PR_ST FROM BETHADBA.EFSDOIMP_SUBTRI_POR_UF AS SUBTRI INNER JOIN BETHADBA.GEEMPRE AS EMPRESA ON SUBTRI.SIGLA_UF = EMPRESA.ESTA_EMP AND SUBTRI.CODI_EMP = EMPRESA.CODI_EMP INNER JOIN BETHADBA.EFPARAMETRO_VIGENCIA AS PARAMETRO ON SUBTRI.CODI_EMP = PARAMETRO.CODI_EMP AND PARAMETRO.VIGENCIA_PAR = DSDBA.D_BUSCA_VIGENCIA_PARAMETRO(PARAMETRO.CODI_EMP, SUBTRI.DATA_SIM) INNER JOIN BETHADBA.EFSDOIMP AS SALDO ON SUBTRI.CODI_EMP = SALDO.CODI_EMP AND SUBTRI.CODI_IMP = SALDO.CODI_IMP AND SUBTRI.DATA_SIM = SALDO.DATA_SIM AND SUBTRI.PDIC_SIM = SALDO.PDIC_SIM INNER JOIN BETHADBA.GEIMPOSTO_VIGENCIA AS IMPOSTO_VIGENCIA ON IMPOSTO_VIGENCIA.CODI_EMP = SUBTRI.CODI_EMP AND IMPOSTO_VIGENCIA.CODI_IMP = SUBTRI.CODI_IMP AND IMPOSTO_VIGENCIA.VIGENCIA_IMP = DSDBA.D_BUSCA_VIGENCIA_IMPOSTO(IMPOSTO_VIGENCIA.CODI_EMP, IMPOSTO_VIGENCIA.CODI_IMP, SUBTRI.DATA_SIM), LATERAL(SELECT (CASE WHEN PARAMETRO.SIMPLESN_OPTANTE_PAR = 'S' AND PARAMETRO.SIMPLESN_ULTRAPASSOU_PAR = 'N' AND PARAMETRO.SIMPLESN_ICMS_NORMAL_PAR = 'N' THEN 'S' ELSE 'N' END) AS OPTANTE FROM DSDBA.DUMMY) AS TDSIMPLES, LATERAL(SELECT COALESCE(SUM(TDDADOS.VALOR), 0) AS VALOR FROM ( SELECT SUM(IMPOSTO.VLOR_ISA) AS VALOR FROM BETHADBA.EFIMPSAI AS IMPOSTO INNER JOIN BETHADBA.EFSAIDAS AS SAIDAS ON SAIDAS.CODI_EMP = IMPOSTO.CODI_EMP AND SAIDAS.CODI_SAI = IMPOSTO.CODI_SAI INNER JOIN BETHADBA.GEEMPRE AS EMPRESA_NOTA ON EMPRESA_NOTA.CODI_EMP = SAIDAS.CODI_EMP WHERE SAIDAS.CODI_EMP = SUBTRI.CODI_EMP AND SAIDAS.DSAI_SAI BETWEEN DSDBA.D_PRIMEIRO_DIA_MES(SALDO.DATA_SIM) AND DSDBA.D_ULTIMO_DIA_MES(SALDO.DATA_SIM) AND SAIDAS.CODI_NAT = 5667 AND IMPOSTO.CODI_IMP = SUBTRI.CODI_IMP AND EMPRESA_NOTA.ESTA_EMP = 'SP' AND IMPOSTO_VIGENCIA.TCAL_IMP = 'L' UNION ALL SELECT SUM(ESTOQUE.VALOR_SUBTRI_MSP) AS VALOR FROM BETHADBA.EFMVSPRO AS ESTOQUE INNER JOIN BETHADBA.EFSAIDAS AS SAIDAS ON SAIDAS.CODI_EMP = ESTOQUE.CODI_EMP AND SAIDAS.CODI_SAI = ESTOQUE.CODI_SAI INNER JOIN BETHADBA.GEEMPRE AS EMPRESA_NOTA ON EMPRESA_NOTA.CODI_EMP = SAIDAS.CODI_EMP INNER JOIN BETHADBA.EFACUMULADOR_VIGENCIA_IMPOSTOS AS ACUMULADOR_VIGENCIA_IMPOSTOS ON ACUMULADOR_VIGENCIA_IMPOSTOS.CODI_EMP = SAIDAS.CODI_EMP AND ACUMULADOR_VIGENCIA_IMPOSTOS.CODI_ACU = SAIDAS.CODI_ACU AND ACUMULADOR_VIGENCIA_IMPOSTOS.CODI_IMP = SUBTRI.CODI_IMP AND ACUMULADOR_VIGENCIA_IMPOSTOS.VIGENCIA_ACU = DSDBA.D_BUSCA_VIGENCIA_ACUMULADOR(ACUMULADOR_VIGENCIA_IMPOSTOS.CODI_EMP, ACUMULADOR_VIGENCIA_IMPOSTOS.CODI_ACU, SAIDAS.DSAI_SAI) WHERE SAIDAS.CODI_EMP = SUBTRI.CODI_EMP AND SAIDAS.DSAI_SAI BETWEEN DSDBA.D_PRIMEIRO_DIA_MES(SALDO.DATA_SIM) AND DSDBA.D_ULTIMO_DIA_MES(SALDO.DATA_SIM) AND SAIDAS.CODI_NAT = 5667 AND EMPRESA_NOTA.ESTA_EMP = 'SP' AND IMPOSTO_VIGENCIA.TCAL_IMP = 'P') AS TDDADOS) AS TD_SUBTRI_5667, LATERAL(SELECT COALESCE(SUM(MOVIMENTO_AJUSTE.VLOR_MAJ), 0) AS ESTD FROM BETHADBA.EFMOVAJU AS MOVIMENTO_AJUSTE INNER JOIN BETHADBA.EFAJUSTES AS AJUSTE ON MOVIMENTO_AJUSTE.CODI_EMP = AJUSTE.CODI_EMP AND MOVIMENTO_AJUSTE.CODI_AJU = AJUSTE.CODI_AJU INNER JOIN BETHADBA.GEESTADO AS EMPRESA_AJUSTE ON EMPRESA_AJUSTE.CODIGO_UF = MOVIMENTO_AJUSTE.CODIGO_UF WHERE MOVIMENTO_AJUSTE.CODI_EMP = {cod_emp} AND MONTH(MOVIMENTO_AJUSTE.DATA_MAJ) = MONTH({data_inicio}) AND YEAR(MOVIMENTO_AJUSTE.DATA_MAJ) = YEAR({data_inicio}) AND MOVIMENTO_AJUSTE.REGISTRO_CONVERTIDO = 'N' AND AJUSTE.CODI_IMP = 9 AND AJUSTE.OPER_AJU = 2 AND EMPRESA_AJUSTE.SIGLA_UF = EMPRESA.ESTA_EMP) AS TDAJUSTES, LATERAL(SELECT COALESCE(SUM(MOVIMENTO_AJUSTE.VALOR), 0) AS ESTD FROM BETHADBA.EFMOVIMENTO_AJUSTE_ESTADUAL_CE AS MOVIMENTO_AJUSTE INNER JOIN BETHADBA.EFAJUSTES AS AJUSTE ON AJUSTE.CODI_EMP = MOVIMENTO_AJUSTE.CODI_EMP AND AJUSTE.CODI_AJU = MOVIMENTO_AJUSTE.CODI_AJU INNER JOIN BETHADBA.GEESTADO AS ESTADO ON ESTADO.CODIGO_UF = MOVIMENTO_AJUSTE.CODIGO_UF WHERE MOVIMENTO_AJUSTE.CODI_EMP = {cod_emp} AND MONTH(MOVIMENTO_AJUSTE.DATA_AJUSTE) = MONTH({data_inicio}) AND YEAR(MOVIMENTO_AJUSTE.DATA_AJUSTE) = YEAR({data_inicio}) AND AJUSTE.CODI_IMP = 9 AND AJUSTE.OPER_AJU = 2 AND ESTADO.SIGLA_UF = EMPRESA.ESTA_EMP) AS TDAJUSTES_CE, LATERAL(SELECT COALESCE(SUM(MOVIMENTO_AJUSTE.VALOR), 0) AS ESTD FROM BETHADBA.EFMOVIMENTO_AJUSTE_ESTADUAL_AL AS MOVIMENTO_AJUSTE INNER JOIN BETHADBA.EFAJUSTES AS AJUSTE ON MOVIMENTO_AJUSTE.CODI_EMP = AJUSTE.CODI_EMP AND MOVIMENTO_AJUSTE.CODI_AJU = AJUSTE.CODI_AJU INNER JOIN BETHADBA.GEESTADO AS EMPRESA_AJUSTE ON EMPRESA_AJUSTE.CODIGO_UF = MOVIMENTO_AJUSTE.CODIGO_UF WHERE MOVIMENTO_AJUSTE.CODI_EMP = {cod_emp} AND MONTH(MOVIMENTO_AJUSTE.DATA_AJUSTE) = MONTH({data_inicio}) AND YEAR(MOVIMENTO_AJUSTE.DATA_AJUSTE) = YEAR({data_inicio}) AND AJUSTE.CODI_IMP = 9 AND AJUSTE.OPER_AJU = 2 AND EMPRESA_AJUSTE.SIGLA_UF = EMPRESA.ESTA_EMP) AS TDAJUSTES_AL, LATERAL(SELECT COALESCE(SUM(MOVIMENTO_AJUSTE.VALOR), 0) AS ESTD FROM BETHADBA.EFMOVIMENTO_AJUSTE_ESTADUAL_AM AS MOVIMENTO_AJUSTE INNER JOIN BETHADBA.EFAJUSTES AS AJUSTE ON MOVIMENTO_AJUSTE.CODI_EMP = AJUSTE.CODI_EMP AND MOVIMENTO_AJUSTE.CODI_AJU = AJUSTE.CODI_AJU INNER JOIN BETHADBA.GEESTADO AS EMPRESA_AJUSTE ON EMPRESA_AJUSTE.CODIGO_UF = MOVIMENTO_AJUSTE.CODIGO_UF WHERE MOVIMENTO_AJUSTE.CODI_EMP = {cod_emp} AND MONTH(MOVIMENTO_AJUSTE.DATA_AJUSTE) = MONTH({data_inicio}) AND YEAR(MOVIMENTO_AJUSTE.DATA_AJUSTE) = YEAR({data_inicio}) AND AJUSTE.CODI_IMP = 9 AND AJUSTE.OPER_AJU = 2 AND EMPRESA_AJUSTE.SIGLA_UF = EMPRESA.ESTA_EMP) AS TDAJUSTES_AM, LATERAL(SELECT SUM(SUBTRI_POR_UF_MG.ESTORNO_FEM) AS ESTORNO_FEM, SUM(COMPLEMENTO_ICMS_ST_ART_31_ANEXO_XV_RICMS) AS COMPLEMENTO_ICMS_ST_ART_31_ANEXO_XV_RICMS, SUM(COMPLEMENTO_FEM_ART_31_ANEXO_XV_RICMS) AS COMPLEMENTO_FEM_ART_31_ANEXO_XV_RICMS, SUM(RESTITUICAO_ICMS_ST_ART_31_ANEXO_XV_RICMS) AS RESTITUICAO_ICMS_ST_ART_31_ANEXO_XV_RICMS, SUM(RESTITUICAO_FEM_ART_31_ANEXO_XV_RICMS) AS RESTITUICAO_FEM_ART_31_ANEXO_XV_RICMS, SUM(PARCELA_CORRESPONDENTE_RESTITUICAO_FEM_ART_31_ANEXO_XV_RICMS) AS PARCELA_CORRESPONDENTE_RESTITUICAO_FEM_ART_31_ANEXO_XV_RICMS, SUM(COMPLEMENTO_FEM_ADICIONADO_ICMS_ST_ART_31_ANEXO_XV_RICMS) AS COMPLEMENTO_FEM_ADICIONADO_ICMS_ST_ART_31_ANEXO_XV_RICMS, SUM(SUBTRI_POR_UF_MG.RESTITUICAO_ICMS_ST_ART_23) AS RESTITUICAO_ICMS_ST_ART_23 FROM BETHADBA.EFSDOIMP_SUBTRI_POR_UF_MG AS SUBTRI_POR_UF_MG WHERE SUBTRI_POR_UF_MG.CODI_EMP = SUBTRI.CODI_EMP AND SUBTRI_POR_UF_MG.CODI_IMP = SUBTRI.CODI_IMP AND SUBTRI_POR_UF_MG.PDIC_SIM = SUBTRI.PDIC_SIM AND SUBTRI_POR_UF_MG.DATA_SIM = SUBTRI.DATA_SIM AND COALESCE(SUBTRI_POR_UF_MG.I_RECOLHIMENTO, 0) = COALESCE(SUBTRI.I_RECOLHIMENTO, 0)) AS TDSUBTRI_POR_UF_MG, LATERAL(SELECT SUM(SUBTRI_SP.DEBITO_ICMS_SOBRE_ESTOQUE) AS DEBITO_ICMS_SOBRE_ESTOQUE, SUM(SUBTRI_SP.OUTRO_CREDITO_TRANSF_ICMS_ST_FECOEP) AS OUTRO_CREDITO_TRANSF_ICMS_ST_FECOEP FROM BETHADBA.EFSDOIMP_SUBTRI_POR_UF_SP AS SUBTRI_SP WHERE SUBTRI_SP.CODI_EMP = SUBTRI.CODI_EMP AND SUBTRI_SP.CODI_IMP = SUBTRI.CODI_IMP AND SUBTRI_SP.PDIC_SIM = SUBTRI.PDIC_SIM AND SUBTRI_SP.DATA_SIM = SUBTRI.DATA_SIM AND COALESCE(SUBTRI_SP.I_RECOLHIMENTO, 0) = COALESCE(SUBTRI.I_RECOLHIMENTO, 0)) AS TDSUBTRI_POR_UF_SP, LATERAL(SELECT SUM(SUBTRI_RS.SALDO_CREDOR_ANT_UTIL_PARA_COMP_DEB_ICMS_PROPRIO) AS SALDO_CREDOR_ANT_UTIL_PARA_COMP_DEB_ICMS_PROPRIO, SUM(SUBTRI_RS.ESTORNO_DEBITO_ADIC_ALIQ_AMPARA) AS ESTORNO_DEBITO_ADIC_ALIQ_AMPARA, SUM(SUBTRI_RS.OUTROS_DEBITOS_COMP_ICMS) AS OUTROS_DEBITOS_COMP_ICMS, SUM(SUBTRI_RS.OUTROS_CREDITOS_RESSARC_ICMS) AS OUTROS_CREDITOS_RESSARC_ICMS, SUM(SUBTRI_RS.OUTROS_DEBITOS_COMPENSACAO_RESSARC_ICMS) AS OUTROS_DEBITOS_COMPENSACAO_RESSARC_ICMS, SUM(SUBTRI_RS.OUTROS_CREDITOS_COMPENSACAO_COMP_ICMS) AS OUTROS_CREDITOS_COMPENSACAO_COMP_ICMS, SUM(SUBTRI_RS.CREDITO_PELAS_DEVOLUCOES_RETORNO_AMPARA) AS CREDITO_PELAS_DEVOLUCOES_RETORNO_AMPARA, SUM(SUBTRI_RS.OUTROS_DEBITOS_DEVOLUCAO_ICMS_ST_VALOR_RESSARCIDO) AS OUTROS_DEBITOS_DEVOLUCAO_ICMS_ST_VALOR_RESSARCIDO, SUM(SUBTRI_RS.SALDO_CREDOR_ICMS_COMPENSAR_SUBTRI) AS SALDO_CREDOR_ICMS_COMPENSAR_SUBTRI FROM BETHADBA.EFSDOIMP_SUBTRI_POR_UF_RS AS SUBTRI_RS WHERE SUBTRI_RS.CODI_EMP = SUBTRI.CODI_EMP AND SUBTRI_RS.CODI_IMP = SUBTRI.CODI_IMP AND SUBTRI_RS.PDIC_SIM = SUBTRI.PDIC_SIM AND SUBTRI_RS.DATA_SIM = SUBTRI.DATA_SIM AND COALESCE(SUBTRI_RS.I_RECOLHIMENTO, 0) = COALESCE(SUBTRI.I_RECOLHIMENTO, 0)) AS TDSUBTRI_POR_UF_RS, LATERAL(SELECT SUM(SUBTRI_POR_UF_SC.VALOR_ICMS_SOBRE_FRETE) AS VALOR_ICMS_SOBRE_FRETE, SUM(SUBTRI_POR_UF_SC.VALOR_ICMS_ST_SOBRE_ESTOQUE) AS VALOR_ICMS_ST_SOBRE_ESTOQUE, SUM(SUBTRI_POR_UF_SC.VALOR_ICMS_ST_SOBRE_ESTOQUE_NAO_DEMONSTRADA) AS VALOR_ICMS_ST_SOBRE_ESTOQUE_NAO_DEMONSTRADA, SUM(SUBTRI_POR_UF_SC.DEBITO_ICMS_SOBRE_ESTOQUE) AS DEBITO_ICMS_SOBRE_ESTOQUE, SUM(SUBTRI_POR_UF_SC.ESTORNO_CREDITO_RESSARCIMENTO_ST_VENDAS_SIMPLES_NACIONAL) AS ESTORNO_CREDITO_RESSARCIMENTO_ST_VENDAS_SIMPLES_NACIONAL, SUM(SUBTRI_POR_UF_SC.ST_ANTECIPADA_COMBUSTIVEIS) AS ST_ANTECIPADA_COMBUSTIVEIS, SUM(SUBTRI_POR_UF_SC.VALOR_FUNDOSOCIAL_ST) AS VALOR_FUNDOSOCIAL_ST, SUM(SUBTRI_POR_UF_SC.CREDITO_ADICIONAL_FUNDOSOCIAL_ST) AS CREDITO_ADICIONAL_FUNDOSOCIAL_ST, SUM(SUBTRI_POR_UF_SC.RESSARCIMENTO_ICMS_ST_VENDAS_SIMPLES_NACIONAL) AS RESSARCIMENTO_ICMS_ST_VENDAS_SIMPLES_NACIONAL, SUM(SUBTRI_POR_UF_SC.RESSARCIMENTO_ICMS_ST_VENDAS_OUTRAS_UF) AS RESSARCIMENTO_ICMS_ST_VENDAS_OUTRAS_UF, SUM(SUBTRI_POR_UF_SC.VALOR_ICMS_SOBRE_ESTOQUE_PRODUTOS_EXCLUIDOS_SUBTRI) AS VALOR_ICMS_SOBRE_ESTOQUE_PRODUTOS_EXCLUIDOS_SUBTRI, SUM(SUBTRI_POR_UF_SC.RESSARCIMENTO_ICMS_ST_ACOBERTADO_NFE) AS RESSARCIMENTO_ICMS_ST_ACOBERTADO_NFE FROM BETHADBA.EFSDOIMP_SUBTRI_POR_UF_SC AS SUBTRI_POR_UF_SC WHERE SUBTRI_POR_UF_SC.CODI_EMP = SUBTRI.CODI_EMP AND SUBTRI_POR_UF_SC.CODI_IMP = SUBTRI.CODI_IMP AND SUBTRI_POR_UF_SC.PDIC_SIM = SUBTRI.PDIC_SIM AND SUBTRI_POR_UF_SC.DATA_SIM = SUBTRI.DATA_SIM AND COALESCE(SUBTRI_POR_UF_SC.I_RECOLHIMENTO, 0) = COALESCE(SUBTRI.I_RECOLHIMENTO, 0)) AS TDSUBTRI_POR_UF_SC, LATERAL(SELECT SUM(CASE WHEN AJUSTE.OPER_AJU IN (5,7) THEN MOVIMENTO_AJUSTE.VALOR ELSE 0 END) AS ODED FROM BETHADBA.EFMOVIMENTO_AJUSTE_ESTADUAL_MS AS MOVIMENTO_AJUSTE INNER JOIN BETHADBA.EFAJUSTES AS AJUSTE ON MOVIMENTO_AJUSTE.CODI_EMP = AJUSTE.CODI_EMP AND MOVIMENTO_AJUSTE.CODI_AJU = AJUSTE.CODI_AJU INNER JOIN BETHADBA.GEESTADO AS EMPRESA_AJUSTE ON EMPRESA_AJUSTE.CODIGO_UF = MOVIMENTO_AJUSTE.CODIGO_UF WHERE MOVIMENTO_AJUSTE.CODI_EMP = {cod_emp} AND MONTH(MOVIMENTO_AJUSTE.DATA_AJUSTE) = MONTH({data_inicio}) AND YEAR(MOVIMENTO_AJUSTE.DATA_AJUSTE) = YEAR({data_inicio}) AND AJUSTE.CODI_IMP = 9 AND AJUSTE.OPER_AJU IN (5, 7) AND EMPRESA_AJUSTE.SIGLA_UF = EMPRESA.ESTA_EMP) AS TDAJUSTES_MS, LATERAL(SELECT SUM(CASE WHEN AJUSTE.OPER_AJU = 3 THEN MOVIMENTO_AJUSTE.VALOR ELSE 0 END) AS OUTD, SUM(CASE WHEN AJUSTE.OPER_AJU = 4 THEN MOVIMENTO_AJUSTE.VALOR ELSE 0 END) AS ESTC, SUM(CASE WHEN AJUSTE.OPER_AJU = 1 THEN MOVIMENTO_AJUSTE.VALOR ELSE 0 END) AS OUTC, SUM(CASE WHEN AJUSTE.OPER_AJU = 2 THEN MOVIMENTO_AJUSTE.VALOR ELSE 0 END) AS ESTD, SUM(CASE WHEN AJUSTE.OPER_AJU IN (5,7) THEN MOVIMENTO_AJUSTE.VALOR ELSE 0 END) AS ODED FROM BETHADBA.EFMOVIMENTO_AJUSTE_ESTADUAL_TO AS MOVIMENTO_AJUSTE INNER JOIN BETHADBA.EFAJUSTES AS AJUSTE ON MOVIMENTO_AJUSTE.CODI_EMP = AJUSTE.CODI_EMP AND MOVIMENTO_AJUSTE.CODI_AJU = AJUSTE.CODI_AJU INNER JOIN BETHADBA.GEESTADO AS EMPRESA_AJUSTE ON EMPRESA_AJUSTE.CODIGO_UF = MOVIMENTO_AJUSTE.CODIGO_UF WHERE MOVIMENTO_AJUSTE.CODI_EMP = {cod_emp} AND MONTH(MOVIMENTO_AJUSTE.DATA_AJUSTE) = MONTH({data_inicio}) AND YEAR(MOVIMENTO_AJUSTE.DATA_AJUSTE) = YEAR({data_inicio}) AND AJUSTE.CODI_IMP = 9 AND AJUSTE.OPER_AJU IN (1, 2, 3, 4, 5, 7) AND EMPRESA_AJUSTE.SIGLA_UF = EMPRESA.ESTA_EMP) AS TDAJUSTES_TO, LATERAL(SELECT SUM(CASE WHEN AJUSTE.OPER_AJU = 3 THEN MOVIMENTO_AJUSTE.VALOR ELSE 0 END) AS OUTD, SUM(CASE WHEN AJUSTE.OPER_AJU = 4 THEN MOVIMENTO_AJUSTE.VALOR ELSE 0 END) AS ESTC, SUM(CASE WHEN AJUSTE.OPER_AJU = 1 THEN MOVIMENTO_AJUSTE.VALOR ELSE 0 END) AS OUTC, SUM(CASE WHEN AJUSTE.OPER_AJU = 2 THEN MOVIMENTO_AJUSTE.VALOR ELSE 0 END) AS ESTD, SUM(CASE WHEN AJUSTE.OPER_AJU IN (5,7) THEN MOVIMENTO_AJUSTE.VALOR ELSE 0 END) AS ODED FROM BETHADBA.EFMOVIMENTO_AJUSTE_ESTADUAL_ES AS MOVIMENTO_AJUSTE INNER JOIN BETHADBA.EFAJUSTES AS AJUSTE ON MOVIMENTO_AJUSTE.CODI_EMP = AJUSTE.CODI_EMP AND MOVIMENTO_AJUSTE.CODI_AJU = AJUSTE.CODI_AJU INNER JOIN BETHADBA.GEESTADO AS EMPRESA_AJUSTE ON EMPRESA_AJUSTE.CODIGO_UF = MOVIMENTO_AJUSTE.CODIGO_UF WHERE MOVIMENTO_AJUSTE.CODI_EMP = {cod_emp} AND MONTH(MOVIMENTO_AJUSTE.DATA_AJUSTE) = MONTH({data_inicio}) AND YEAR(MOVIMENTO_AJUSTE.DATA_AJUSTE) = YEAR({data_inicio}) AND AJUSTE.CODI_IMP = 9 AND AJUSTE.OPER_AJU IN (1, 2, 3, 4, 5, 7) AND EMPRESA_AJUSTE.SIGLA_UF = EMPRESA.ESTA_EMP) AS TDAJUSTES_ES, LATERAL(SELECT SUM(CASE WHEN AJUSTE.OPER_AJU = 3 THEN MOVIMENTO_AJUSTE.VALOR ELSE 0 END) AS OUTD, SUM(CASE WHEN AJUSTE.OPER_AJU = 4 THEN MOVIMENTO_AJUSTE.VALOR ELSE 0 END) AS ESTC, SUM(CASE WHEN AJUSTE.OPER_AJU = 1 THEN MOVIMENTO_AJUSTE.VALOR ELSE 0 END) AS OUTC, SUM(CASE WHEN AJUSTE.OPER_AJU = 2 THEN MOVIMENTO_AJUSTE.VALOR ELSE 0 END) AS ESTD, SUM(CASE WHEN AJUSTE.OPER_AJU IN (5,7) THEN MOVIMENTO_AJUSTE.VALOR ELSE 0 END) AS ODED FROM BETHADBA.EFMOVIMENTO_AJUSTE_ESTADUAL_MT AS MOVIMENTO_AJUSTE INNER JOIN BETHADBA.EFAJUSTES AS AJUSTE ON MOVIMENTO_AJUSTE.CODI_EMP = AJUSTE.CODI_EMP AND MOVIMENTO_AJUSTE.CODI_AJU = AJUSTE.CODI_AJU INNER JOIN BETHADBA.GEESTADO AS EMPRESA_AJUSTE ON EMPRESA_AJUSTE.CODIGO_UF = MOVIMENTO_AJUSTE.CODIGO_UF WHERE MOVIMENTO_AJUSTE.CODI_EMP = {cod_emp} AND MONTH(MOVIMENTO_AJUSTE.DATA_AJUSTE) = MONTH({data_inicio}) AND YEAR(MOVIMENTO_AJUSTE.DATA_AJUSTE) = YEAR({data_inicio}) AND AJUSTE.CODI_IMP = 9 AND AJUSTE.OPER_AJU IN (1, 2, 3, 4, 5, 7) AND EMPRESA_AJUSTE.SIGLA_UF = EMPRESA.ESTA_EMP) AS TDAJUSTES_MT, LATERAL(SELECT SUM(CASE WHEN AJUSTE.OPER_AJU = 3 THEN MOVIMENTO_AJUSTE.VALOR ELSE 0 END) AS OUTD, SUM(CASE WHEN AJUSTE.OPER_AJU = 4 THEN MOVIMENTO_AJUSTE.VALOR ELSE 0 END) AS ESTC, SUM(CASE WHEN AJUSTE.OPER_AJU = 1 THEN MOVIMENTO_AJUSTE.VALOR ELSE 0 END) AS OUTC, SUM(CASE WHEN AJUSTE.OPER_AJU = 2 THEN MOVIMENTO_AJUSTE.VALOR ELSE 0 END) AS ESTD, SUM(CASE WHEN AJUSTE.OPER_AJU IN (5,7) THEN MOVIMENTO_AJUSTE.VALOR ELSE 0 END) AS ODED FROM BETHADBA.EFMOVIMENTO_AJUSTE_ESTADUAL_PA AS MOVIMENTO_AJUSTE INNER JOIN BETHADBA.EFAJUSTES AS AJUSTE ON MOVIMENTO_AJUSTE.CODI_EMP = AJUSTE.CODI_EMP AND MOVIMENTO_AJUSTE.CODI_AJU = AJUSTE.CODI_AJU INNER JOIN BETHADBA.GEESTADO AS EMPRESA_AJUSTE ON EMPRESA_AJUSTE.CODIGO_UF = MOVIMENTO_AJUSTE.CODIGO_UF WHERE MOVIMENTO_AJUSTE.CODI_EMP = {cod_emp} AND MONTH(MOVIMENTO_AJUSTE.DATA_AJUSTE) = MONTH({data_inicio}) AND YEAR(MOVIMENTO_AJUSTE.DATA_AJUSTE) = YEAR({data_inicio}) AND AJUSTE.CODI_IMP = 9 AND AJUSTE.OPER_AJU IN (1, 2, 3, 4, 5, 7) AND EMPRESA_AJUSTE.SIGLA_UF = EMPRESA.ESTA_EMP) AS TDAJUSTES_PA, LATERAL(SELECT COALESCE(SUM(MOVIMENTO_AJUSTE.VALOR), 0) AS ESTD FROM BETHADBA.EFMOVIMENTO_AJUSTE_ESTADUAL_PB AS MOVIMENTO_AJUSTE INNER JOIN BETHADBA.EFAJUSTES AS AJUSTE ON AJUSTE.CODI_EMP = MOVIMENTO_AJUSTE.CODI_EMP AND AJUSTE.CODI_AJU = MOVIMENTO_AJUSTE.CODI_AJU INNER JOIN BETHADBA.GEESTADO AS ESTADO ON ESTADO.CODIGO_UF = MOVIMENTO_AJUSTE.CODIGO_UF WHERE MOVIMENTO_AJUSTE.CODI_EMP = {cod_emp} AND MONTH(MOVIMENTO_AJUSTE.DATA_AJUSTE) = MONTH({data_inicio}) AND YEAR(MOVIMENTO_AJUSTE.DATA_AJUSTE) = YEAR({data_inicio}) AND AJUSTE.CODI_IMP = 9 AND AJUSTE.OPER_AJU = 2 AND ESTADO.SIGLA_UF = EMPRESA.ESTA_EMP) AS TDAJUSTES_PB, LATERAL(SELECT SUM(CASE WHEN AJUSTE.OPER_AJU = 3 THEN MOVIMENTO_AJUSTE.VALOR ELSE 0 END) AS OUTD, SUM(CASE WHEN AJUSTE.OPER_AJU = 4 THEN MOVIMENTO_AJUSTE.VALOR ELSE 0 END) AS ESTC, SUM(CASE WHEN AJUSTE.OPER_AJU = 1 THEN MOVIMENTO_AJUSTE.VALOR ELSE 0 END) AS OUTC, SUM(CASE WHEN AJUSTE.OPER_AJU = 2 THEN MOVIMENTO_AJUSTE.VALOR ELSE 0 END) AS ESTD, SUM(CASE WHEN AJUSTE.OPER_AJU IN (5, 7) THEN MOVIMENTO_AJUSTE.VALOR ELSE 0 END) AS ODED FROM BETHADBA.EFMOVIMENTO_AJUSTE_ESTADUAL_RR AS MOVIMENTO_AJUSTE INNER JOIN BETHADBA.EFAJUSTES AS AJUSTE ON MOVIMENTO_AJUSTE.CODI_EMP = AJUSTE.CODI_EMP AND MOVIMENTO_AJUSTE.CODI_AJU = AJUSTE.CODI_AJU INNER JOIN BETHADBA.GEESTADO AS EMPRESA_AJUSTE ON EMPRESA_AJUSTE.CODIGO_UF = MOVIMENTO_AJUSTE.CODIGO_UF WHERE MOVIMENTO_AJUSTE.CODI_EMP = {cod_emp} AND MONTH(MOVIMENTO_AJUSTE.DATA_AJUSTE) = MONTH({data_inicio}) AND YEAR(MOVIMENTO_AJUSTE.DATA_AJUSTE) = YEAR({data_inicio}) AND AJUSTE.CODI_IMP = 9 AND AJUSTE.OPER_AJU IN (1, 2, 3, 4, 5, 7) AND EMPRESA_AJUSTE.SIGLA_UF = EMPRESA.ESTA_EMP) AS TDAJUSTES_RR, LATERAL(SELECT SUM(CASE WHEN AJUSTE.OPER_AJU = 3 THEN MOVIMENTO_AJUSTE.VALOR ELSE 0 END) AS OUTD, SUM(CASE WHEN AJUSTE.OPER_AJU = 4 THEN MOVIMENTO_AJUSTE.VALOR ELSE 0 END) AS ESTC, SUM(CASE WHEN AJUSTE.OPER_AJU = 1 THEN MOVIMENTO_AJUSTE.VALOR ELSE 0 END) AS OUTC, SUM(CASE WHEN AJUSTE.OPER_AJU = 2 THEN MOVIMENTO_AJUSTE.VALOR ELSE 0 END) AS ESTD, SUM(CASE WHEN AJUSTE.OPER_AJU IN (5,7) THEN MOVIMENTO_AJUSTE.VALOR ELSE 0 END) AS ODED FROM BETHADBA.EFMOVIMENTO_AJUSTE_ESTADUAL_RN AS MOVIMENTO_AJUSTE INNER JOIN BETHADBA.EFAJUSTES AS AJUSTE ON MOVIMENTO_AJUSTE.CODI_EMP = AJUSTE.CODI_EMP AND MOVIMENTO_AJUSTE.CODI_AJU = AJUSTE.CODI_AJU INNER JOIN BETHADBA.GEESTADO AS EMPRESA_AJUSTE ON EMPRESA_AJUSTE.CODIGO_UF = MOVIMENTO_AJUSTE.CODIGO_UF WHERE MOVIMENTO_AJUSTE.CODI_EMP = {cod_emp} AND MONTH(MOVIMENTO_AJUSTE.DATA_AJUSTE) = MONTH({data_inicio}) AND YEAR(MOVIMENTO_AJUSTE.DATA_AJUSTE) = YEAR({data_inicio}) AND AJUSTE.CODI_IMP = 9 AND AJUSTE.OPER_AJU IN (1, 2, 3, 4, 5, 7) AND EMPRESA_AJUSTE.SIGLA_UF = EMPRESA.ESTA_EMP) AS TDAJUSTES_RN, LATERAL(SELECT COALESCE(SUM(MOVIMENTO_AJUSTE.VALOR), 0) AS ESTD FROM BETHADBA.EFMOVIMENTO_AJUSTE_ESTADUAL_SP AS MOVIMENTO_AJUSTE INNER JOIN BETHADBA.EFAJUSTES AS AJUSTE ON AJUSTE.CODI_EMP = MOVIMENTO_AJUSTE.CODI_EMP AND AJUSTE.CODI_AJU = MOVIMENTO_AJUSTE.CODI_AJU INNER JOIN BETHADBA.GEESTADO AS ESTADO ON ESTADO.CODIGO_UF = MOVIMENTO_AJUSTE.CODIGO_UF WHERE MOVIMENTO_AJUSTE.CODI_EMP = {cod_emp} AND MONTH(MOVIMENTO_AJUSTE.DATA_AJUSTE) = MONTH({data_inicio}) AND YEAR(MOVIMENTO_AJUSTE.DATA_AJUSTE) = YEAR({data_inicio}) AND AJUSTE.CODI_IMP = 9 AND AJUSTE.OPER_AJU = 2 AND ESTADO.SIGLA_UF = EMPRESA.ESTA_EMP) AS TDAJUSTES_SP, LATERAL(SELECT COALESCE(SUM(SALDO_IMPOSTO.SDEV_SIM), 0) AS SDEV FROM BETHADBA.EFSDOIMP AS SALDO_IMPOSTO WHERE SALDO_IMPOSTO.CODI_EMP = SUBTRI.CODI_EMP AND SALDO_IMPOSTO.DATA_SIM = SUBTRI.DATA_SIM AND SALDO_IMPOSTO.PDIC_SIM = SUBTRI.PDIC_SIM AND SALDO_IMPOSTO.CODI_IMP = 31) AS TD_IMP_31, LATERAL(SELECT COALESCE(SUM(SALDO_IMPOSTO.VIMS_SIM), 0) AS SALDO_SAIDA, COALESCE(SUM(SALDO_IMPOSTO.VIME_SIM), 0) AS SALDO_ENTRADA, COALESCE(SUM(SALDO_IMPOSTO.SDEV_SIM), 0) AS SALDO_DEVEDOR FROM BETHADBA.EFSDOIMP AS SALDO_IMPOSTO WHERE SALDO_IMPOSTO.CODI_EMP = SUBTRI.CODI_EMP AND SALDO_IMPOSTO.DATA_SIM = SUBTRI.DATA_SIM AND SALDO_IMPOSTO.PDIC_SIM = SUBTRI.PDIC_SIM AND SALDO_IMPOSTO.CODI_IMP = 129) AS TD_IMP_129, LATERAL(SELECT COALESCE(SUM(SALDO_POR_RECOLHIMENTO.VALOR_CREDITO_PRESUMIDO), 0) AS CREDITO_PRESUMIDO, COALESCE(SUM(SALDO_POR_RECOLHIMENTO.VALOR_REGIME_ESPECIAL), 0) AS REGIME_ESPECIAL, COALESCE(SUM(SALDO_POR_RECOLHIMENTO.VALOR_ESTORNO_CREDITO_PRESUMIDO), 0) AS ESTORNO_CREDITO_PRESUMIDO, COALESCE(SUM(SALDO_POR_RECOLHIMENTO.VALOR_ESTORNO_REGIME_ESPECIAL), 0) AS ESTORNO_REGIME_ESPECIAL FROM BETHADBA.EFSDOIMP_POR_RECOLHIMENTO AS SALDO_POR_RECOLHIMENTO WHERE SALDO_POR_RECOLHIMENTO.CODI_EMP = SALDO.CODI_EMP AND SALDO_POR_RECOLHIMENTO.DATA_SIM = SALDO.DATA_SIM AND EMPRESA.ESTA_EMP = 'SC' AND SALDO_POR_RECOLHIMENTO.CODI_IMP = 31 AND (SALDO_POR_RECOLHIMENTO.DATA_SIM < '2013-08-01' OR SALDO_POR_RECOLHIMENTO.PDIC_SIM <> 6) AND SALDO_POR_RECOLHIMENTO.VALOR_CREDITO_PRESUMIDO + SALDO_POR_RECOLHIMENTO.VALOR_REGIME_ESPECIAL + SALDO_POR_RECOLHIMENTO.VALOR_ESTORNO_CREDITO_PRESUMIDO + SALDO_POR_RECOLHIMENTO.VALOR_ESTORNO_REGIME_ESPECIAL > 0) AS TD_RECOLHIMENTO_31, LATERAL( SELECT COALESCE(SUM(DETALHAMENTO_CREDITO_PRESUMIDO_PROCESSOS.VALOR), 0) AS VALOR FROM BETHADBA.EFDETALHAMENTO_CREDITO_PRESUMIDO AS DETALHAMENTO_CREDITO_PRESUMIDO INNER JOIN BETHADBA.EFDETALHAMENTO_CREDITO_PRESUMIDO_PROCESSOS AS DETALHAMENTO_CREDITO_PRESUMIDO_PROCESSOS ON DETALHAMENTO_CREDITO_PRESUMIDO_PROCESSOS.CODI_EMP = DETALHAMENTO_CREDITO_PRESUMIDO.CODI_EMP AND DETALHAMENTO_CREDITO_PRESUMIDO_PROCESSOS.COMPETENCIA = DETALHAMENTO_CREDITO_PRESUMIDO.COMPETENCIA AND DETALHAMENTO_CREDITO_PRESUMIDO_PROCESSOS.TIPO = DETALHAMENTO_CREDITO_PRESUMIDO.TIPO WHERE DETALHAMENTO_CREDITO_PRESUMIDO.CODI_EMP = SALDO.CODI_EMP AND DETALHAMENTO_CREDITO_PRESUMIDO.COMPETENCIA = SALDO.DATA_SIM AND DETALHAMENTO_CREDITO_PRESUMIDO.TIPO = 7 AND DETALHAMENTO_CREDITO_PRESUMIDO.COMPETENCIA >= '2013-08-01') AS TD_DETALHAMENTO_CREDITO_ST, LATERAL(SELECT COALESCE(SUM(SALDO_IMPOSTO.SDEV_SIM), 0) AS SDEV FROM BETHADBA.EFSDOIMP AS SALDO_IMPOSTO WHERE SALDO_IMPOSTO.CODI_EMP = SUBTRI.CODI_EMP AND SALDO_IMPOSTO.DATA_SIM = SUBTRI.DATA_SIM AND SALDO_IMPOSTO.PDIC_SIM = SUBTRI.PDIC_SIM AND SALDO_IMPOSTO.CODI_IMP = 69) AS TD_IMP_69, LATERAL(SELECT COALESCE(SUM(TDEFIMPENT.VLOR_IEN), 0) AS VLOR FROM BETHADBA.EFENTRADAS AS NOTA INNER JOIN BETHADBA.GEEMPRE AS EMPRESA_NOTA ON EMPRESA_NOTA.CODI_EMP = NOTA.CODI_EMP INNER JOIN BETHADBA.EFACUMULADOR_VIGENCIA AS ACUMULADOR ON ACUMULADOR.CODI_EMP = NOTA.CODI_EMP AND ACUMULADOR.CODI_ACU = NOTA.CODI_ACU AND ACUMULADOR.VIGENCIA_ACU = DSDBA.D_BUSCA_VIGENCIA_ACUMULADOR(ACUMULADOR.CODI_EMP, ACUMULADOR.CODI_ACU, NOTA.DENT_ENT) INNER JOIN BETHADBA.EFESPECIES AS ESPECIE ON ESPECIE.CODI_ESP = NOTA.CODI_ESP INNER JOIN BETHADBA.GEIMPOSTO_VIGENCIA AS IMPOSTO ON IMPOSTO.CODI_EMP = NOTA.CODI_EMP AND IMPOSTO.VIGENCIA_IMP = DSDBA.D_BUSCA_VIGENCIA_IMPOSTO(IMPOSTO.CODI_EMP, IMPOSTO.CODI_IMP, NOTA.DENT_ENT), LATERAL(SELECT COALESCE(SUM(IMPOSTO_NOTA.VLOR_IEN), 0) AS VLOR_IEN FROM BETHADBA.EFIMPENT AS IMPOSTO_NOTA WHERE IMPOSTO_NOTA.CODI_EMP = NOTA.CODI_EMP AND IMPOSTO_NOTA.CODI_ENT = NOTA.CODI_ENT AND IMPOSTO_NOTA.CODI_IMP = 31) AS TDEFIMPENT, LATERAL (SELECT (CASE WHEN PARAMETRO.TIPO_ATIVIDADE_SP = 1 THEN (CASE WHEN (IMPOSTO.TCAL_IMP = 'L') THEN 1 WHEN (IMPOSTO.TCAL_IMP = 'P' AND ESPECIE.CODIGO_MODELO IN ('07', '08', '8B', '09', '10', '11', '26', '27', '57', '67')) THEN 1 ELSE 0 END) ELSE 1 END) AS GERA FROM DSDBA.DUMMY) AS TDAUX WHERE NOTA.CODI_EMP = SUBTRI.CODI_EMP AND MONTH(NOTA.DENT_ENT) = MONTH({data_inicio}) AND YEAR(NOTA.DENT_ENT) = YEAR({data_inicio}) AND EMPRESA_NOTA.ESTA_EMP IN ('RS', 'SP') AND IMPOSTO.CODI_IMP = 31 AND ((EMPRESA_NOTA.ESTA_EMP = 'RS' AND ACUMULADOR.LANCTO_DEB_REF_ANT_ACU = 'S') OR (EMPRESA_NOTA.ESTA_EMP = 'SP' AND COALESCE(PARAMETRO.TIPO_ATIVIDADE_SP, 0) <> 0) AND TDAUX.GERA > 0 )) AS TDEFENTRADAS_POR_NOTA, LATERAL(SELECT COALESCE(SUM(IMPOSTO_PRODUTO.VALOR_IMPOSTO), 0) AS VLOR FROM BETHADBA.EFENTRADAS AS NOTA INNER JOIN BETHADBA.EFMVEPRO_ICMS_STAT AS IMPOSTO_PRODUTO ON IMPOSTO_PRODUTO.CODI_EMP = NOTA.CODI_EMP AND IMPOSTO_PRODUTO.CODI_ENT = NOTA.CODI_ENT INNER JOIN BETHADBA.GEEMPRE AS EMPRESA_NOTA ON EMPRESA_NOTA.CODI_EMP = NOTA.CODI_EMP INNER JOIN BETHADBA.EFACUMULADOR_VIGENCIA AS ACUMULADOR ON ACUMULADOR.CODI_EMP = NOTA.CODI_EMP AND ACUMULADOR.CODI_ACU = NOTA.CODI_ACU AND ACUMULADOR.VIGENCIA_ACU = DSDBA.D_BUSCA_VIGENCIA_ACUMULADOR(ACUMULADOR.CODI_EMP, ACUMULADOR.CODI_ACU, NOTA.DENT_ENT) INNER JOIN BETHADBA.EFESPECIES AS ESPECIE ON ESPECIE.CODI_ESP = NOTA.CODI_ESP INNER JOIN BETHADBA.GEIMPOSTO_VIGENCIA AS IMPOSTO ON IMPOSTO.CODI_EMP = NOTA.CODI_EMP AND IMPOSTO.VIGENCIA_IMP = DSDBA.D_BUSCA_VIGENCIA_IMPOSTO(IMPOSTO.CODI_EMP, IMPOSTO.CODI_IMP, NOTA.DENT_ENT), LATERAL (SELECT (CASE WHEN PARAMETRO.TIPO_ATIVIDADE_SP = 1 THEN (CASE WHEN (IMPOSTO.TCAL_IMP = 'P' AND NOT(ESPECIE.CODIGO_MODELO IN ('07', '08', '8B', '09', '10', '11', '26', '27', '57', '67'))) THEN 1 ELSE 0 END) ELSE 1 END) AS GERA FROM DSDBA.DUMMY) AS TDAUX WHERE NOTA.CODI_EMP = SUBTRI.CODI_EMP AND MONTH(NOTA.DENT_ENT) = MONTH({data_inicio}) AND YEAR(NOTA.DENT_ENT) = YEAR({data_inicio}) AND IMPOSTO.CODI_IMP = 31 AND EMPRESA_NOTA.ESTA_EMP = 'SP' AND COALESCE(PARAMETRO.TIPO_ATIVIDADE_SP, 0) <> 0 AND TDAUX.GERA > 0) AS TDEFENTRADAS_POR_PRODUTO, LATERAL(SELECT COALESCE(TDEFENTRADAS_POR_NOTA.VLOR + TDEFENTRADAS_POR_PRODUTO.VLOR, 0) AS VLOR FROM DSDBA.DUMMY) AS TDEFENTRADAS, LATERAL(SELECT COALESCE(SUM(SALDO_IMPOSTO.VDI21_SIM), 0) AS VDI21_SIM FROM BETHADBA.EFSDOIMP AS SALDO_IMPOSTO WHERE SALDO_IMPOSTO.CODI_EMP = SUBTRI.CODI_EMP AND SALDO_IMPOSTO.DATA_SIM = SUBTRI.DATA_SIM AND SALDO_IMPOSTO.PDIC_SIM = SUBTRI.PDIC_SIM AND SALDO_IMPOSTO.CODI_IMP = 01) AS TD_IMP_01, LATERAL(SELECT COALESCE(SUM(SALDO_NOTA.VALOR_IMPOSTOS_SAIDA + SALDO_NOTA.VALOR_DEBITO_ICMSA_TR_PREST_SERV_TRANSPORTE), 0) AS SDEV FROM BETHADBA.EFSDOIMP_POR_NOTA_SAIDA AS SALDO_NOTA INNER JOIN BETHADBA.GEEMPRE AS EMPRESA_SALDO ON EMPRESA_SALDO.CODI_EMP = SALDO_NOTA.CODI_EMP WHERE SALDO_NOTA.CODI_EMP = SUBTRI.CODI_EMP AND SALDO_NOTA.DATA_SIM = SUBTRI.DATA_SIM AND SALDO_NOTA.CODI_IMP = 98 AND EMPRESA_SALDO.ESTA_EMP = 'RS') AS TD_IMP_98, LATERAL(SELECT COALESCE(SUM(IMPOSTO.VALOR_ICMS_ST_SOBRE_ESTOQUE), 0) AS VALOR_ICMS_ST_SOBRE_ESTOQUE, COALESCE(SUM(IMPOSTO.VALOR_DEDUCAO_ICMS_ST_ESTOQUE), 0) AS VALOR_DEDUCAO_ICMS_ST_ESTOQUE, COALESCE(SUM(IMPOSTO.VALOR_ADICIONAL_FECOMP_ICMS_ST), 0) AS VALOR_ADICIONAL_FECOMP_ICMS_ST FROM BETHADBA.EFSDOIMP_SUBTRI_POR_UF_MS AS IMPOSTO WHERE IMPOSTO.CODI_EMP = SUBTRI.CODI_EMP AND IMPOSTO.DATA_SIM = SUBTRI.DATA_SIM AND IMPOSTO.PDIC_SIM = SUBTRI.PDIC_SIM AND IMPOSTO.CODI_IMP = SUBTRI.CODI_IMP AND COALESCE(IMPOSTO.I_RECOLHIMENTO, 0) = COALESCE(SUBTRI.I_RECOLHIMENTO, 0)) AS TDSUBTRI_POR_UF_MS, LATERAL(SELECT COALESCE(SUM(SALDO_IMPOSTO.DEBITO_ICMS_SOBRE_ESTOQUE), 0) AS DEBITO_ICMS_SOBRE_ESTOQUE, COALESCE(SUM(SALDO_IMPOSTO.VALOR_FECP_ST_APROVEITADO), 0) AS VALOR_FECP_ST_APROVEITADO, COALESCE(SUM(SALDO_IMPOSTO.COMPLEMENTO_SUBTRI), 0) AS COMPLEMENTO_SUBTRI FROM BETHADBA.EFSDOIMP_SUBTRI_POR_UF_RJ AS SALDO_IMPOSTO WHERE SALDO_IMPOSTO.CODI_EMP = SUBTRI.CODI_EMP AND SALDO_IMPOSTO.DATA_SIM = SUBTRI.DATA_SIM AND SALDO_IMPOSTO.PDIC_SIM = SUBTRI.PDIC_SIM AND SALDO_IMPOSTO.CODI_IMP = SUBTRI.CODI_IMP AND COALESCE(SALDO_IMPOSTO.I_RECOLHIMENTO, 0) = COALESCE(SUBTRI.I_RECOLHIMENTO, 0)) AS TDSUBTRI_POR_UF_RJ, LATERAL(SELECT SUBTRI.VALOR_IMPOSTO_SAIDAS + CASE EMPRESA.ESTA_EMP WHEN 'SP' THEN (CASE WHEN TDSIMPLES.OPTANTE = 'N' THEN COALESCE(TDEFENTRADAS.VLOR, 0) - TD_IMP_01.VDI21_SIM ELSE 0 END) WHEN 'MT' THEN TD_IMP_129.SALDO_SAIDA ELSE 0 END AS SAIDAS, COALESCE(SUBTRI.OUTROS_DEBITOS, 0) + COALESCE(TDAJUSTES_ES.OUTD, 0) + COALESCE(TDAJUSTES_MT.OUTD, 0) + COALESCE(TDAJUSTES_RR.OUTD, 0) + COALESCE(TDAJUSTES_RN.OUTD, 0) + (CASE EMPRESA.ESTA_EMP WHEN 'MG' THEN TD_IMP_69.SDEV + TDSUBTRI_POR_UF_MG.COMPLEMENTO_ICMS_ST_ART_31_ANEXO_XV_RICMS + TDSUBTRI_POR_UF_MG.COMPLEMENTO_FEM_ART_31_ANEXO_XV_RICMS WHEN 'MS' THEN TDSUBTRI_POR_UF_MS.VALOR_ICMS_ST_SOBRE_ESTOQUE WHEN 'RJ' THEN TDSUBTRI_POR_UF_RJ.DEBITO_ICMS_SOBRE_ESTOQUE WHEN 'RS' THEN (TDEFENTRADAS.VLOR + TD_IMP_98.SDEV) + TDSUBTRI_POR_UF_RS.SALDO_CREDOR_ANT_UTIL_PARA_COMP_DEB_ICMS_PROPRIO + TDSUBTRI_POR_UF_RS.OUTROS_DEBITOS_COMP_ICMS + TDSUBTRI_POR_UF_RS.OUTROS_DEBITOS_COMPENSACAO_RESSARC_ICMS + TDSUBTRI_POR_UF_RS.OUTROS_DEBITOS_DEVOLUCAO_ICMS_ST_VALOR_RESSARCIDO WHEN 'SC' THEN (TD_RECOLHIMENTO_31.REGIME_ESPECIAL + TDSUBTRI_POR_UF_SC.DEBITO_ICMS_SOBRE_ESTOQUE) WHEN 'SP' THEN TDSUBTRI_POR_UF_SP.DEBITO_ICMS_SOBRE_ESTOQUE WHEN 'TO' THEN TD_IMP_31.SDEV ELSE 0 END) AS OUTROSD, COALESCE(SUBTRI.ESTORNO_CREDITOS, 0) + COALESCE(TDAJUSTES_ES.ESTC, 0) + COALESCE(TDAJUSTES_MT.ESTC, 0) + COALESCE(TDAJUSTES_RR.ESTC, 0) + COALESCE(TDAJUSTES_RN.ESTC, 0) + (CASE EMPRESA.ESTA_EMP WHEN 'MG' THEN TDSUBTRI_POR_UF_MG.PARCELA_CORRESPONDENTE_RESTITUICAO_FEM_ART_31_ANEXO_XV_RICMS WHEN 'SC' THEN TD_RECOLHIMENTO_31.ESTORNO_CREDITO_PRESUMIDO + COALESCE(TDSUBTRI_POR_UF_SC.ESTORNO_CREDITO_RESSARCIMENTO_ST_VENDAS_SIMPLES_NACIONAL, 0) ELSE 0 END) AS ESTC, SUBTRI.VALOR_IMPOSTO_ENTRADAS + (CASE EMPRESA.ESTA_EMP WHEN 'MT' THEN TD_IMP_129.SALDO_ENTRADA ELSE 0 END) AS NOTA, COALESCE(SUBTRI.SALDO_CREDOR_ANTERIOR, 0) AS ANTERIOR, COALESCE(SUBTRI.OUTROS_CREDITOS, 0) + COALESCE(TDAJUSTES_ES.OUTC, 0) + COALESCE(TDAJUSTES_MT.OUTC, 0) + COALESCE(TDAJUSTES_RR.OUTC, 0) + COALESCE(TDAJUSTES_RN.OUTC, 0) + (CASE EMPRESA.ESTA_EMP WHEN 'MS' THEN TDSUBTRI_POR_UF_MS.VALOR_DEDUCAO_ICMS_ST_ESTOQUE WHEN 'RS' THEN TDSUBTRI_POR_UF_RS.OUTROS_CREDITOS_RESSARC_ICMS + TDSUBTRI_POR_UF_RS.OUTROS_CREDITOS_COMPENSACAO_COMP_ICMS + TDSUBTRI_POR_UF_RS.CREDITO_PELAS_DEVOLUCOES_RETORNO_AMPARA + TDSUBTRI_POR_UF_RS.SALDO_CREDOR_ICMS_COMPENSAR_SUBTRI WHEN 'SC' THEN (TDSUBTRI_POR_UF_SC.ST_ANTECIPADA_COMBUSTIVEIS + TDSUBTRI_POR_UF_SC.VALOR_FUNDOSOCIAL_ST + TDSUBTRI_POR_UF_SC.CREDITO_ADICIONAL_FUNDOSOCIAL_ST + TD_RECOLHIMENTO_31.CREDITO_PRESUMIDO + TDSUBTRI_POR_UF_SC.RESSARCIMENTO_ICMS_ST_ACOBERTADO_NFE + TD_DETALHAMENTO_CREDITO_ST.VALOR) + (CASE WHEN SUBTRI.DATA_SIM < DATE('2013-08-01') THEN TDSUBTRI_POR_UF_SC.RESSARCIMENTO_ICMS_ST_VENDAS_SIMPLES_NACIONAL + TDSUBTRI_POR_UF_SC.RESSARCIMENTO_ICMS_ST_VENDAS_OUTRAS_UF ELSE 0 END) WHEN 'SP' THEN (CASE WHEN TDSIMPLES.OPTANTE = 'N' THEN COALESCE(TDEFENTRADAS.VLOR, 0) - TD_IMP_01.VDI21_SIM ELSE 0 END) ELSE 0 END) + COALESCE(TDSUBTRI_POR_UF_SP.OUTRO_CREDITO_TRANSF_ICMS_ST_FECOEP, 0) + (CASE WHEN EMPRESA.ESTA_EMP <> 'SC' OR SUBTRI.DATA_SIM < '2013-08-01' THEN COALESCE(SUBTRI.RESSARCIMENTO_CFOP_1603_2603 + SUBTRI.RESSARCIMENTO_CFOP_5603_6603, 0) ELSE 0 END) + (CASE EMPRESA.ESTA_EMP WHEN 'MG' THEN TDSUBTRI_POR_UF_MG.RESTITUICAO_ICMS_ST_ART_31_ANEXO_XV_RICMS + TDSUBTRI_POR_UF_MG.RESTITUICAO_FEM_ART_31_ANEXO_XV_RICMS + TDSUBTRI_POR_UF_MG.RESTITUICAO_ICMS_ST_ART_23 ELSE 0 END) AS OUTROSC, COALESCE(TDAJUSTES.ESTD, 0) + COALESCE(SUBTRI.ESTORNO_DEBITOS, 0) + COALESCE(TDAJUSTES_AM.ESTD, 0) + COALESCE(TDAJUSTES_ES.ESTD, 0) + COALESCE(TDAJUSTES_MT.ESTD, 0) + COALESCE(TDAJUSTES_RR.ESTD, 0) + COALESCE(TDAJUSTES_PB.ESTD, 0) + COALESCE(TDAJUSTES_RN.ESTD, 0) + COALESCE(TDAJUSTES_CE.ESTD, 0) + (CASE EMPRESA.ESTA_EMP WHEN 'MG' THEN TDSUBTRI_POR_UF_MG.ESTORNO_FEM + TDSUBTRI_POR_UF_MG.COMPLEMENTO_FEM_ADICIONADO_ICMS_ST_ART_31_ANEXO_XV_RICMS WHEN 'RS' THEN TDSUBTRI_POR_UF_RS.ESTORNO_DEBITO_ADIC_ALIQ_AMPARA WHEN 'SC' THEN TD_RECOLHIMENTO_31.ESTORNO_REGIME_ESPECIAL ELSE 0 END) AS ESTD, COALESCE(SUBTRI.DEDUCOES, 0) + COALESCE(SUBTRI.OUTROS_RECOLHIMENTOS, 0) + COALESCE(TDAJUSTES_ES.ODED, 0) + COALESCE(TDAJUSTES_MT.ODED, 0) + COALESCE(TDAJUSTES_RR.ODED, 0) + COALESCE(TDAJUSTES_MS.ODED, 0) + COALESCE(TDAJUSTES_RN.ODED, 0) + (CASE EMPRESA.ESTA_EMP WHEN 'RJ' THEN TDSUBTRI_POR_UF_RJ.VALOR_FECP_ST_APROVEITADO WHEN 'MS' THEN TDSUBTRI_POR_UF_MS.VALOR_ADICIONAL_FECOMP_ICMS_ST ELSE 0 END) AS DEDUCOES, SUBTRI.SALDO_DEVEDOR + CASE WHEN EMPRESA.ESTA_EMP = 'RS' THEN TDEFENTRADAS.VLOR + TD_IMP_98.SDEV WHEN EMPRESA.ESTA_EMP = 'MG' THEN TD_IMP_69.SDEV WHEN EMPRESA.ESTA_EMP = 'SP' THEN 0.00 WHEN EMPRESA.ESTA_EMP = 'SC' THEN TDSUBTRI_POR_UF_SC.DEBITO_ICMS_SOBRE_ESTOQUE + TD_IMP_31.SDEV + TDSUBTRI_POR_UF_SC.VALOR_ICMS_SOBRE_ESTOQUE_PRODUTOS_EXCLUIDOS_SUBTRI - TDSUBTRI_POR_UF_SC.VALOR_ICMS_ST_SOBRE_ESTOQUE_NAO_DEMONSTRADA WHEN EMPRESA.ESTA_EMP = 'PA' THEN TD_IMP_31.SDEV ELSE TD_IMP_31.SDEV END + COALESCE(SUBTRI.DEDUCOES, 0) + COALESCE(SUBTRI.OUTROS_RECOLHIMENTOS, 0) + COALESCE(TDAJUSTES_ES.ODED, 0) + COALESCE(TDAJUSTES_MT.ODED, 0) + COALESCE(TDAJUSTES_RR.ODED, 0) + COALESCE(TDAJUSTES_MS.ODED, 0) + COALESCE(TDAJUSTES_RN.ODED, 0) + (CASE EMPRESA.ESTA_EMP WHEN 'RJ' THEN TDSUBTRI_POR_UF_RJ.VALOR_FECP_ST_APROVEITADO + TDSUBTRI_POR_UF_RJ.DEBITO_ICMS_SOBRE_ESTOQUE WHEN 'MT' THEN TD_IMP_129.SALDO_DEVEDOR ELSE 0 END) AS DEVEDOR, SUBTRI.SALDO_DEVEDOR + (CASE EMPRESA.ESTA_EMP WHEN 'RS' THEN TDEFENTRADAS.VLOR + TD_IMP_98.SDEV WHEN 'MG' THEN TD_IMP_69.SDEV WHEN 'RJ' THEN TD_IMP_31.SDEV + TDSUBTRI_POR_UF_RJ.DEBITO_ICMS_SOBRE_ESTOQUE + TDSUBTRI_POR_UF_RJ.COMPLEMENTO_SUBTRI WHEN 'SC' THEN TDSUBTRI_POR_UF_SC.DEBITO_ICMS_SOBRE_ESTOQUE + TD_IMP_31.SDEV + TDSUBTRI_POR_UF_SC.VALOR_ICMS_SOBRE_ESTOQUE_PRODUTOS_EXCLUIDOS_SUBTRI - TDSUBTRI_POR_UF_SC.VALOR_ICMS_ST_SOBRE_ESTOQUE_NAO_DEMONSTRADA WHEN 'SP' THEN 0.00 WHEN 'PA' THEN TD_IMP_31.SDEV WHEN 'MT' THEN TD_IMP_129.SALDO_DEVEDOR ELSE TD_IMP_31.SDEV END) AS SALDO_POR_RECOLHIMENTO, YEAR(SUBTRI.DATA_SIM) * 100 + MONTH(SUBTRI.DATA_SIM) AS ANOMES FROM DSDBA.DUMMY) AS TDAUX, LATERAL(SELECT COALESCE(SUM(IMPOSTO.DEBITO_FECOP_ICMS_ST), 0) AS DEBITO_FECOP_ICMS_PR_ST, COALESCE(SUM(IMPOSTO.DEVOLUCAO_FECOP_ICMS_ST), 0) AS DEVOLUCAO_FECOP_ICMS_PR_ST FROM BETHADBA.EFSDOIMP_SUBTRI_POR_UF_PR AS IMPOSTO WHERE IMPOSTO.CODI_EMP = SUBTRI.CODI_EMP AND IMPOSTO.DATA_SIM = SUBTRI.DATA_SIM AND IMPOSTO.PDIC_SIM = SUBTRI.PDIC_SIM AND IMPOSTO.CODI_IMP = SUBTRI.CODI_IMP AND COALESCE(IMPOSTO.I_RECOLHIMENTO, 0) = COALESCE(SUBTRI.I_RECOLHIMENTO, 0)) AS TDSALDO_PR_ICMS_FECOP_ST, LATERAL(SELECT COALESCE(MAX(1), 0) AS EXISTE FROM BETHADBA.EFSDOIMP_SUBTRI_POR_UF_POR_NOTA AS IMPOSTO WHERE IMPOSTO.CODI_EMP = SUBTRI.CODI_EMP AND IMPOSTO.DATA_SIM = SUBTRI.DATA_SIM AND IMPOSTO.PDIC_SIM = SUBTRI.PDIC_SIM AND IMPOSTO.CODI_IMP = SUBTRI.CODI_IMP AND IMPOSTO.SIGLA_UF = SUBTRI.SIGLA_UF AND IMPOSTO.I_RECOLHIMENTO = SUBTRI.I_RECOLHIMENTO) AS TDSUBTRI WHERE SUBTRI.CODI_EMP = {cod_emp} AND SUBTRI.DATA_SIM = {data_inicio} AND SUBTRI.CODI_IMP = 9 AND SUBTRI.PDIC_SIM = 6 AND ((EMPRESA.ESTA_EMP <> 'RS') OR (TDSUBTRI.EXISTE = 0 AND EMPRESA.ESTA_EMP = 'RS')) UNION ALL SELECT COALESCE(MAX(YEAR(SUBTRI_POR_NOTA.DATA_SIM) * 100 + MONTH(SUBTRI_POR_NOTA.DATA_SIM)), 0) AS ANOMES, COALESCE(SUM(SUBTRI_POR_NOTA.VALOR_IMPOSTO_SAIDAS), 0) AS SAIDAS, 0 AS OUTROSD, 0 AS ESTCRE, COALESCE(SUM(SUBTRI_POR_NOTA.VALOR_IMPOSTO_SAIDAS), 0) AS SUBTOTALD, 0 AS NOTA, 0 AS ANTERIOR, 0 AS OUTROSC, 0 AS ESTDEB, 0 AS SUBTOTALC, 0 AS TOTAL, COALESCE(SUM(SUBTRI_POR_NOTA.SALDO_DEVEDOR), 0) AS DEVEDOR, 0 AS DEDUCOES, COALESCE(SUM(SUBTRI_POR_NOTA.SALDO_DEVEDOR), 0) AS SALDO_POR_RECOLHIMENTO, 0 AS CREDOR, 0 AS DEBITO_FECOP_ICMS_PR_ST, 0 AS DEVOLUCAO_FECOP_ICMS_PR_ST FROM BETHADBA.EFSDOIMP_SUBTRI_POR_UF_POR_NOTA AS SUBTRI_POR_NOTA INNER JOIN BETHADBA.EFSDOIMP_SUBTRI_POR_UF AS SUBTRI ON SUBTRI_POR_NOTA.CODI_EMP = SUBTRI.CODI_EMP AND SUBTRI_POR_NOTA.DATA_SIM = SUBTRI.DATA_SIM AND SUBTRI_POR_NOTA.PDIC_SIM = SUBTRI.PDIC_SIM AND SUBTRI_POR_NOTA.CODI_IMP = SUBTRI.CODI_IMP AND SUBTRI_POR_NOTA.SIGLA_UF = SUBTRI.SIGLA_UF AND SUBTRI_POR_NOTA.I_RECOLHIMENTO = SUBTRI.I_RECOLHIMENTO INNER JOIN BETHADBA.GEEMPRE AS EMPRESA ON SUBTRI.SIGLA_UF = EMPRESA.ESTA_EMP AND SUBTRI.CODI_EMP = EMPRESA.CODI_EMP WHERE SUBTRI.CODI_EMP = {cod_emp} AND SUBTRI.DATA_SIM = {data_inicio} AND SUBTRI.CODI_IMP = 9 AND (SUBTRI.PDIC_SIM = 16 AND 6 = 6) AND EMPRESA.ESTA_EMP = 'RS' HAVING SUM(SUBTRI_POR_NOTA.VALOR_IMPOSTO_SAIDAS + SUBTRI_POR_NOTA.SALDO_DEVEDOR) > 0 UNION ALL SELECT YEAR(S.DATA_SIM) * 100 + MONTH(S.DATA_SIM) AS ANOMES, 0 AS SAIDAS, TDAUX.OUTROSD AS OUTROSD, 0 AS ESTCRE, TDAUX.OUTROSD AS SUBTOTALD, 0 AS ENTRADAS, 0 AS ANTERIOR, 0 AS OUTROSC, 0 AS ESTDEB, 0 AS SUBTOTALC, 0 AS TOTAL, TDAUX.OUTROSD AS DEVEDOR, 0 AS DEDUCOES, TDAUX.OUTROSD AS RECOLHER, 0 AS CREDOR, TDSALDO_PR_ICMS_FECOP_ST.DEBITO_FECOP_ICMS_PR_ST AS DEBITO_FECOP_ICMS_PR_ST, TDSALDO_PR_ICMS_FECOP_ST.DEVOLUCAO_FECOP_ICMS_PR_ST AS DEVOLUCAO_FECOP_ICMS_PR_ST FROM BETHADBA.GEEMPRE AS G INNER JOIN BETHADBA.EFPARAMETRO_VIGENCIA AS P ON G.CODI_EMP = P.CODI_EMP INNER JOIN BETHADBA.EFSDOIMP AS S ON G.CODI_EMP = S.CODI_EMP, LATERAL(SELECT COALESCE(SUM(S31.SDEV_SIM), 0) AS SDEV FROM BETHADBA.EFSDOIMP S31 WHERE S31.CODI_EMP = S.CODI_EMP AND S31.DATA_SIM = S.DATA_SIM AND S31.PDIC_SIM = S.PDIC_SIM AND S31.CODI_IMP = 31) AS TD_IMP_31, LATERAL(SELECT COALESCE(SUM(S31.SDEV_SIM), 0) AS SDEV FROM BETHADBA.EFSDOIMP S31 WHERE S31.CODI_EMP = S.CODI_EMP AND S31.DATA_SIM = S.DATA_SIM AND S31.PDIC_SIM = S.PDIC_SIM AND S31.CODI_IMP = 69) AS TD_IMP_69, LATERAL(SELECT COALESCE(SUM(TDEFIMPENT.VLOR_IEN), 0) AS VLOR FROM BETHADBA.EFENTRADAS AS EFENTRADAS INNER JOIN BETHADBA.GEEMPRE AS GEEMPRE ON GEEMPRE.CODI_EMP = EFENTRADAS.CODI_EMP INNER JOIN BETHADBA.EFACUMULADOR_VIGENCIA AS EFACUMULADOR ON EFACUMULADOR.CODI_EMP = EFENTRADAS.CODI_EMP AND EFACUMULADOR.CODI_ACU = EFENTRADAS.CODI_ACU, LATERAL(SELECT COALESCE(SUM(EFIMPENT.VLOR_IEN), 0) AS VLOR_IEN FROM BETHADBA.EFIMPENT AS EFIMPENT WHERE EFIMPENT.CODI_EMP = EFENTRADAS.CODI_EMP AND EFIMPENT.CODI_ENT = EFENTRADAS.CODI_ENT AND EFIMPENT.CODI_IMP = 31) AS TDEFIMPENT WHERE EFENTRADAS.CODI_EMP = S.CODI_EMP AND MONTH(EFENTRADAS.DENT_ENT) = MONTH({data_inicio}) AND YEAR(EFENTRADAS.DENT_ENT) = YEAR({data_inicio}) AND GEEMPRE.ESTA_EMP = 'RS' AND EFACUMULADOR.LANCTO_DEB_REF_ANT_ACU = 'S' AND EFACUMULADOR.VIGENCIA_ACU = DSDBA.D_BUSCA_VIGENCIA_ACUMULADOR(EFENTRADAS.CODI_EMP, EFENTRADAS.CODI_ACU, EFENTRADAS.DENT_ENT)) AS TDEFENTRADAS, LATERAL(SELECT (CASE WHEN G.ESTA_EMP = 'SC' THEN (S.VDI8_SIM + S.VDI11_SIM + S.VDI13_SIM) WHEN G.ESTA_EMP IN ('TO') THEN TD_IMP_31.SDEV WHEN G.ESTA_EMP IN ('MG') THEN TD_IMP_69.SDEV WHEN G.ESTA_EMP IN ('RS') THEN TDEFENTRADAS.VLOR ELSE 0 END) AS OUTROSD FROM DSDBA.DUMMY) AS TDAUX, LATERAL(SELECT COALESCE(SUM(IMPOSTO.DEBITO_FECOP_ICMS_ST), 0) AS DEBITO_FECOP_ICMS_PR_ST, COALESCE(SUM(IMPOSTO.DEVOLUCAO_FECOP_ICMS_ST), 0) AS DEVOLUCAO_FECOP_ICMS_PR_ST FROM BETHADBA.EFSDOIMP_SUBTRI_POR_UF_PR AS IMPOSTO WHERE IMPOSTO.CODI_EMP = S.CODI_EMP AND IMPOSTO.DATA_SIM = S.DATA_SIM AND IMPOSTO.PDIC_SIM = S.PDIC_SIM AND IMPOSTO.CODI_IMP = S.CODI_IMP) AS TDSALDO_PR_ICMS_FECOP_ST WHERE S.CODI_EMP = {cod_emp} AND S.DATA_SIM = {data_inicio} AND S.CODI_IMP = 9 AND S.PDIC_SIM = 6 AND TDAUX.OUTROSD > 0 AND P.VIGENCIA_PAR = DSDBA.D_BUSCA_VIGENCIA_PARAMETRO(S.CODI_EMP, DATE(S.DATA_SIM)) AND NOT EXISTS(SELECT 1 FROM BETHADBA.EFSDOSUBTRI AS T WHERE T.CODI_EMP = S.CODI_EMP AND T.CODI_IMP = S.CODI_IMP AND T.DATA_SIM = S.DATA_SIM AND T.PDIC_SIM = S.PDIC_SIM) AND NOT EXISTS(SELECT 1 FROM BETHADBA.EFSDOIMP_SUBTRI_POR_UF AS T WHERE T.CODI_EMP = S.CODI_EMP AND T.CODI_IMP = S.CODI_IMP AND T.DATA_SIM = S.DATA_SIM AND T.PDIC_SIM = S.PDIC_SIM)) AS TDDADOS
"""

SQL_RESUMO_ST_INTERESTADUAL_TEMPLATE = """

SELECT TDTABELA.QUADRO AS QUADRO, TDAUX.DESCRICAO AS DESCRICAO, TDTABELA.CODIGO_ESTADO AS CODIGO_ESTADO, TDGEESTADO.SIGLA_ESTADO AS SIGLA_ESTADO, TDGEESTADO.NOME_ESTADO AS NOME_ESTADO, SUM(TDTABELA.BASE_CALCULO) - SUM(COALESCE(TD_SUBTRI_5667.BASE_CALCULO, 0)) AS BASE_CALCULO, SUM(TDTABELA.VALOR) - SUM(COALESCE(TD_SUBTRI_5667.VALOR, 0)) AS VALOR FROM ( SELECT CAST(1 AS INTEGER) AS QUADRO, '' AS DESCRICAO, TDGEESTADO.CODIGO_UF AS CODIGO_ESTADO, EFSDOSUBTRI.BCAS_SST AS BASE_CALCULO, EFSDOSUBTRI.VIMS_SST AS VALOR FROM BETHADBA.EFSDOSUBTRI AS EFSDOSUBTRI INNER JOIN BETHADBA.GEEMPRE AS GEEMPRE ON GEEMPRE.CODI_EMP = EFSDOSUBTRI.CODI_EMP, LATERAL(SELECT COALESCE(MAX(GEESTADO.CODIGO_UF), 0) AS CODIGO_UF FROM BETHADBA.GEESTADO AS GEESTADO WHERE GEESTADO.SIGLA_UF = EFSDOSUBTRI.SIGL_EST) AS TDGEESTADO WHERE EFSDOSUBTRI.CODI_EMP = {cod_emp} AND MONTH(EFSDOSUBTRI.DATA_SIM) = MONTH(DATE({data_inicio})) AND YEAR(EFSDOSUBTRI.DATA_SIM) = YEAR(DATE({data_inicio})) AND EFSDOSUBTRI.PDIC_SIM = 6 AND EFSDOSUBTRI.CODI_IMP = 9 AND EFSDOSUBTRI.SIGL_EST NOT IN ('EX', GEEMPRE.ESTA_EMP) AND (EFSDOSUBTRI.BCAS_SST + EFSDOSUBTRI.VIMS_SST) > 0 UNION ALL SELECT CAST(1 AS INTEGER) AS QUADRO, '' AS DESCRICAO, TDESTADO.CODIGO_UF AS CODIGO_ESTADO, SUBTRI.BASE_CALCULO_SAIDAS AS BASE_CALCULO, SUBTRI.VALOR_IMPOSTO_SAIDAS AS VALOR FROM BETHADBA.EFSDOIMP_SUBTRI_POR_UF AS SUBTRI INNER JOIN BETHADBA.GEEMPRE AS EMPRESA ON EMPRESA.CODI_EMP = SUBTRI.CODI_EMP, LATERAL(SELECT COALESCE(MAX(ESTADO.CODIGO_UF), 0) AS CODIGO_UF FROM BETHADBA.GEESTADO AS ESTADO WHERE ESTADO.SIGLA_UF = SUBTRI.SIGLA_UF) AS TDESTADO WHERE SUBTRI.CODI_EMP = {cod_emp} AND MONTH(SUBTRI.DATA_SIM) = MONTH(DATE({data_inicio})) AND YEAR(SUBTRI.DATA_SIM) = YEAR(DATE({data_inicio})) AND (SUBTRI.PDIC_SIM = 6 OR (EMPRESA.ESTA_EMP IN ('MS', 'RS') AND SUBTRI.PDIC_SIM <> 16)) AND SUBTRI.CODI_IMP = 9 AND SUBTRI.SIGLA_UF NOT IN ('EX', EMPRESA.ESTA_EMP) AND (SUBTRI.BASE_CALCULO_SAIDAS + SUBTRI.VALOR_IMPOSTO_SAIDAS) > 0 UNION ALL SELECT CAST(1 AS INTEGER) AS QUADRO, TDAUX.DESCRICAO AS DESCRICAO, TDESTADO.CODIGO_UF AS CODIGO_ESTADO, SUBTRI.BASE_CALCULO_SAIDAS AS BASE_CALCULO, SUBTRI.VALOR_IMPOSTO_SAIDAS AS VALOR FROM BETHADBA.EFSDOIMP_SUBTRI_POR_UF_POR_NOTA AS SUBTRI INNER JOIN BETHADBA.GEEMPRE AS EMPRESA ON EMPRESA.CODI_EMP = SUBTRI.CODI_EMP, LATERAL(SELECT COALESCE(MAX(ESTADO.CODIGO_UF), 0) AS CODIGO_UF FROM BETHADBA.GEESTADO AS ESTADO WHERE ESTADO.SIGLA_UF = SUBTRI.SIGLA_UF) AS TDESTADO, LATERAL(SELECT SUBTRI.SIGLA_UF AS DESCRICAO FROM DSDBA.DUMMY) AS TDAUX WHERE SUBTRI.CODI_EMP = {cod_emp} AND SUBTRI.DATA_SIM BETWEEN {data_inicio} AND {data_fim} AND SUBTRI.CODI_IMP = 9 AND SUBTRI.SIGLA_UF NOT IN ('EX', EMPRESA.ESTA_EMP) AND (SUBTRI.BASE_CALCULO_SAIDAS + SUBTRI.VALOR_IMPOSTO_SAIDAS) > 0 UNION ALL SELECT CAST(2 AS INTEGER) AS QUADRO, TDAUX.DESCRICAO AS DESCRICAO, EFMOVAJU.CODIGO_UF AS CODIGO_ESTADO, 0 AS BASE_CALCULO, EFMOVAJU.VLOR_MAJ AS VALOR FROM BETHADBA.EFMOVAJU AS EFMOVAJU INNER JOIN BETHADBA.GEEMPRE AS GEEMPRE ON GEEMPRE.CODI_EMP = EFMOVAJU.CODI_EMP INNER JOIN BETHADBA.EFAJUSTES AS EFAJUSTES ON EFAJUSTES.CODI_EMP = EFMOVAJU.CODI_EMP AND EFAJUSTES.CODI_AJU = EFMOVAJU.CODI_AJU INNER JOIN BETHADBA.GEESTADO AS GEESTADO ON GEESTADO.CODIGO_UF = EFMOVAJU.CODIGO_UF, LATERAL(SELECT GEESTADO.SIGLA_UF || ' - ' || EFAJUSTES.NOME_AJU AS DESCRICAO FROM DSDBA.DUMMY) AS TDAUX WHERE EFMOVAJU.CODI_EMP = {cod_emp} AND EFMOVAJU.DATA_MAJ >= {data_inicio} AND EFMOVAJU.DATA_MAJ <= {data_fim} AND EFMOVAJU.REGISTRO_CONVERTIDO = 'N' AND EFAJUSTES.OPER_AJU = 3 AND EFAJUSTES.CODI_IMP = 9 AND GEESTADO.SIGLA_UF NOT IN ('EX', GEEMPRE.ESTA_EMP) UNION ALL SELECT CAST(2 AS INTEGER) AS QUADRO, TDAUX.DESCRICAO AS DESCRICAO, MOVIMENTO_AJUSTE.CODIGO_UF AS CODIGO_ESTADO, 0 AS BASE_CALCULO, MOVIMENTO_AJUSTE.VALOR AS VALOR FROM BETHADBA.EFMOVIMENTO_AJUSTE_ESTADUAL_SE AS MOVIMENTO_AJUSTE INNER JOIN BETHADBA.GEEMPRE AS EMPRESA ON EMPRESA.CODI_EMP = MOVIMENTO_AJUSTE.CODI_EMP INNER JOIN BETHADBA.EFAJUSTES AS AJUSTES ON AJUSTES.CODI_EMP = MOVIMENTO_AJUSTE.CODI_EMP AND AJUSTES.CODI_AJU = MOVIMENTO_AJUSTE.CODI_AJU INNER JOIN BETHADBA.GEESTADO AS ESTADO ON ESTADO.CODIGO_UF = MOVIMENTO_AJUSTE.CODIGO_UF, LATERAL(SELECT ESTADO.SIGLA_UF || ' - ' || AJUSTES.NOME_AJU AS DESCRICAO FROM DSDBA.DUMMY) AS TDAUX WHERE MOVIMENTO_AJUSTE.CODI_EMP = {cod_emp} AND MOVIMENTO_AJUSTE.DATA_AJUSTE BETWEEN {data_inicio} AND {data_fim} AND AJUSTES.OPER_AJU = 3 AND AJUSTES.CODI_IMP = 9 AND ESTADO.SIGLA_UF NOT IN ('EX', EMPRESA.ESTA_EMP) UNION ALL SELECT CAST(2 AS INTEGER) AS QUADRO, TDAUX.DESCRICAO AS DESCRICAO, MOVIMENTO_AJUSTE.CODIGO_UF AS CODIGO_ESTADO, 0 AS BASE_CALCULO, MOVIMENTO_AJUSTE.VALOR AS VALOR FROM BETHADBA.EFMOVIMENTO_AJUSTE_ESTADUAL_RN AS MOVIMENTO_AJUSTE INNER JOIN BETHADBA.GEEMPRE AS EMPRESA ON EMPRESA.CODI_EMP = MOVIMENTO_AJUSTE.CODI_EMP INNER JOIN BETHADBA.EFAJUSTES AS AJUSTES ON AJUSTES.CODI_EMP = MOVIMENTO_AJUSTE.CODI_EMP AND AJUSTES.CODI_AJU = MOVIMENTO_AJUSTE.CODI_AJU INNER JOIN BETHADBA.GEESTADO AS ESTADO ON ESTADO.CODIGO_UF = MOVIMENTO_AJUSTE.CODIGO_UF, LATERAL(SELECT ESTADO.SIGLA_UF || ' - ' || AJUSTES.NOME_AJU AS DESCRICAO FROM DSDBA.DUMMY) AS TDAUX WHERE MOVIMENTO_AJUSTE.CODI_EMP = {cod_emp} AND MOVIMENTO_AJUSTE.DATA_AJUSTE BETWEEN {data_inicio} AND {data_fim} AND AJUSTES.OPER_AJU = 3 AND AJUSTES.CODI_IMP = 9 AND ESTADO.SIGLA_UF NOT IN ('EX', EMPRESA.ESTA_EMP) UNION ALL SELECT CAST(2 AS INTEGER) AS QUADRO, TDAUX.DESCRICAO AS DESCRICAO, MOVIMENTO_AJUSTE.CODIGO_UF AS CODIGO_ESTADO, 0 AS BASE_CALCULO, MOVIMENTO_AJUSTE.VALOR AS VALOR FROM BETHADBA.EFMOVIMENTO_AJUSTE_ESTADUAL_CE AS MOVIMENTO_AJUSTE INNER JOIN BETHADBA.GEEMPRE AS EMPRESA ON EMPRESA.CODI_EMP = MOVIMENTO_AJUSTE.CODI_EMP INNER JOIN BETHADBA.EFAJUSTES AS AJUSTE ON AJUSTE.CODI_EMP = MOVIMENTO_AJUSTE.CODI_EMP AND AJUSTE.CODI_AJU = MOVIMENTO_AJUSTE.CODI_AJU INNER JOIN BETHADBA.GEESTADO AS ESTADO ON ESTADO.CODIGO_UF = MOVIMENTO_AJUSTE.CODIGO_UF, LATERAL(SELECT ESTADO.SIGLA_UF || ' - ' || AJUSTE.NOME_AJU AS DESCRICAO FROM DSDBA.DUMMY) AS TDAUX WHERE MOVIMENTO_AJUSTE.CODI_EMP = {cod_emp} AND MOVIMENTO_AJUSTE.DATA_AJUSTE BETWEEN {data_inicio} AND {data_fim} AND AJUSTE.OPER_AJU = 3 AND AJUSTE.CODI_IMP = 9 AND ESTADO.SIGLA_UF NOT IN ('EX', EMPRESA.ESTA_EMP) UNION ALL SELECT CAST(2 AS INTEGER) AS QUADRO, TDAUX.DESCRICAO AS DESCRICAO, MOVIMENTO_AJUSTE.CODIGO_UF AS CODIGO_ESTADO, 0 AS BASE_CALCULO, MOVIMENTO_AJUSTE.VALOR AS VALOR FROM BETHADBA.EFMOVIMENTO_AJUSTE_ESTADUAL_AM AS MOVIMENTO_AJUSTE INNER JOIN BETHADBA.GEEMPRE AS EMPRESA ON EMPRESA.CODI_EMP = MOVIMENTO_AJUSTE.CODI_EMP INNER JOIN BETHADBA.EFAJUSTES AS AJUSTES ON AJUSTES.CODI_EMP = MOVIMENTO_AJUSTE.CODI_EMP AND AJUSTES.CODI_AJU = MOVIMENTO_AJUSTE.CODI_AJU INNER JOIN BETHADBA.GEESTADO AS ESTADO ON ESTADO.CODIGO_UF = MOVIMENTO_AJUSTE.CODIGO_UF, LATERAL(SELECT ESTADO.SIGLA_UF || ' - ' || AJUSTES.NOME_AJU AS DESCRICAO FROM DSDBA.DUMMY) AS TDAUX WHERE MOVIMENTO_AJUSTE.CODI_EMP = {cod_emp} AND MOVIMENTO_AJUSTE.DATA_AJUSTE >= {data_inicio} AND MOVIMENTO_AJUSTE.DATA_AJUSTE <= {data_fim} AND AJUSTES.OPER_AJU = 3 AND AJUSTES.CODI_IMP = 9 AND ESTADO.SIGLA_UF NOT IN ('EX', EMPRESA.ESTA_EMP) UNION ALL SELECT CAST(2 AS INTEGER) AS QUADRO, TDAUX.DESCRICAO AS DESCRICAO, MOVIMENTO_AJUSTE.CODIGO_UF AS CODIGO_ESTADO, 0 AS BASE_CALCULO, MOVIMENTO_AJUSTE.VALOR AS VALOR FROM BETHADBA.EFMOVIMENTO_AJUSTE_ESTADUAL_AC AS MOVIMENTO_AJUSTE INNER JOIN BETHADBA.GEEMPRE AS EMPRESA ON EMPRESA.CODI_EMP = MOVIMENTO_AJUSTE.CODI_EMP INNER JOIN BETHADBA.EFAJUSTES AS AJUSTES ON AJUSTES.CODI_EMP = MOVIMENTO_AJUSTE.CODI_EMP AND AJUSTES.CODI_AJU = MOVIMENTO_AJUSTE.CODI_AJU INNER JOIN BETHADBA.GEESTADO AS ESTADO ON ESTADO.CODIGO_UF = MOVIMENTO_AJUSTE.CODIGO_UF, LATERAL(SELECT ESTADO.SIGLA_UF || ' - ' || AJUSTES.NOME_AJU AS DESCRICAO FROM DSDBA.DUMMY) AS TDAUX WHERE MOVIMENTO_AJUSTE.CODI_EMP = {cod_emp} AND MOVIMENTO_AJUSTE.DATA_AJUSTE >= {data_inicio} AND MOVIMENTO_AJUSTE.DATA_AJUSTE <= {data_fim} AND AJUSTES.OPER_AJU = 3 AND AJUSTES.CODI_IMP = 9 AND ESTADO.SIGLA_UF NOT IN ('EX', EMPRESA.ESTA_EMP) UNION ALL SELECT CAST(2 AS INTEGER) AS QUADRO, TDAUX.DESCRICAO AS DESCRICAO, MOVIMENTO_AJUSTE.CODIGO_UF AS CODIGO_ESTADO, 0 AS BASE_CALCULO, MOVIMENTO_AJUSTE.VALOR AS VALOR FROM BETHADBA.EFMOVIMENTO_AJUSTE_ESTADUAL_MG AS MOVIMENTO_AJUSTE INNER JOIN BETHADBA.GEEMPRE AS EMPRESA ON EMPRESA.CODI_EMP = MOVIMENTO_AJUSTE.CODI_EMP INNER JOIN BETHADBA.EFAJUSTES AS AJUSTES ON AJUSTES.CODI_EMP = MOVIMENTO_AJUSTE.CODI_EMP AND AJUSTES.CODI_AJU = MOVIMENTO_AJUSTE.CODI_AJU INNER JOIN BETHADBA.GEESTADO AS ESTADO ON ESTADO.CODIGO_UF = MOVIMENTO_AJUSTE.CODIGO_UF, LATERAL(SELECT ESTADO.SIGLA_UF || ' - ' || AJUSTES.NOME_AJU AS DESCRICAO FROM DSDBA.DUMMY) AS TDAUX WHERE MOVIMENTO_AJUSTE.CODI_EMP = {cod_emp} AND MOVIMENTO_AJUSTE.DATA_AJUSTE >= {data_inicio} AND MOVIMENTO_AJUSTE.DATA_AJUSTE <= {data_fim} AND AJUSTES.OPER_AJU = 3 AND AJUSTES.CODI_IMP = 9 AND ESTADO.SIGLA_UF NOT IN ('EX', EMPRESA.ESTA_EMP) UNION ALL SELECT CAST(2 AS INTEGER) AS QUADRO, TDAUX.DESCRICAO AS DESCRICAO, MOVIMENTO_AJUSTE.CODIGO_UF AS CODIGO_ESTADO, 0 AS BASE_CALCULO, MOVIMENTO_AJUSTE.VALOR AS VALOR FROM BETHADBA.EFMOVIMENTO_AJUSTE_ESTADUAL_MT AS MOVIMENTO_AJUSTE INNER JOIN BETHADBA.GEEMPRE AS EMPRESA ON EMPRESA.CODI_EMP = MOVIMENTO_AJUSTE.CODI_EMP INNER JOIN BETHADBA.EFAJUSTES AS AJUSTES ON AJUSTES.CODI_EMP = MOVIMENTO_AJUSTE.CODI_EMP AND AJUSTES.CODI_AJU = MOVIMENTO_AJUSTE.CODI_AJU INNER JOIN BETHADBA.GEESTADO AS ESTADO ON ESTADO.CODIGO_UF = MOVIMENTO_AJUSTE.CODIGO_UF, LATERAL(SELECT ESTADO.SIGLA_UF || ' - ' || AJUSTES.NOME_AJU AS DESCRICAO FROM DSDBA.DUMMY) AS TDAUX WHERE MOVIMENTO_AJUSTE.CODI_EMP = {cod_emp} AND MOVIMENTO_AJUSTE.DATA_AJUSTE >= {data_inicio} AND MOVIMENTO_AJUSTE.DATA_AJUSTE <= {data_fim} AND AJUSTES.OPER_AJU = 3 AND AJUSTES.CODI_IMP = 9 AND ESTADO.SIGLA_UF NOT IN ('EX', EMPRESA.ESTA_EMP) UNION ALL SELECT CAST(2 AS INTEGER) AS QUADRO, TDAUX.DESCRICAO AS DESCRICAO, MOVIMENTO_AJUSTE.CODIGO_UF AS CODIGO_ESTADO, 0 AS BASE_CALCULO, MOVIMENTO_AJUSTE.VALOR AS VALOR FROM BETHADBA.EFMOVIMENTO_AJUSTE_ESTADUAL_ES AS MOVIMENTO_AJUSTE INNER JOIN BETHADBA.GEEMPRE AS EMPRESA ON EMPRESA.CODI_EMP = MOVIMENTO_AJUSTE.CODI_EMP INNER JOIN BETHADBA.EFAJUSTES AS AJUSTES ON AJUSTES.CODI_EMP = MOVIMENTO_AJUSTE.CODI_EMP AND AJUSTES.CODI_AJU = MOVIMENTO_AJUSTE.CODI_AJU INNER JOIN BETHADBA.GEESTADO AS ESTADO ON ESTADO.CODIGO_UF = MOVIMENTO_AJUSTE.CODIGO_UF, LATERAL(SELECT ESTADO.SIGLA_UF || ' - ' || AJUSTES.NOME_AJU AS DESCRICAO FROM DSDBA.DUMMY) AS TDAUX WHERE MOVIMENTO_AJUSTE.CODI_EMP = {cod_emp} AND MOVIMENTO_AJUSTE.DATA_AJUSTE >= {data_inicio} AND MOVIMENTO_AJUSTE.DATA_AJUSTE <= {data_fim} AND AJUSTES.OPER_AJU = 3 AND AJUSTES.CODI_IMP = 9 AND ESTADO.SIGLA_UF NOT IN ('EX', EMPRESA.ESTA_EMP) UNION ALL SELECT CAST(2 AS INTEGER) AS QUADRO, TDAUX.DESCRICAO AS DESCRICAO, MOVIMENTO_AJUSTE.CODIGO_UF AS CODIGO_ESTADO, 0 AS BASE_CALCULO, MOVIMENTO_AJUSTE.VALOR AS VALOR FROM BETHADBA.EFMOVIMENTO_AJUSTE_ESTADUAL_MS AS MOVIMENTO_AJUSTE INNER JOIN BETHADBA.GEEMPRE AS EMPRESA ON EMPRESA.CODI_EMP = MOVIMENTO_AJUSTE.CODI_EMP INNER JOIN BETHADBA.EFAJUSTES AS AJUSTES ON AJUSTES.CODI_EMP = MOVIMENTO_AJUSTE.CODI_EMP AND AJUSTES.CODI_AJU = MOVIMENTO_AJUSTE.CODI_AJU INNER JOIN BETHADBA.GEESTADO AS ESTADO ON ESTADO.CODIGO_UF = MOVIMENTO_AJUSTE.CODIGO_UF, LATERAL(SELECT ESTADO.SIGLA_UF || ' - ' || AJUSTES.NOME_AJU AS DESCRICAO FROM DSDBA.DUMMY) AS TDAUX WHERE MOVIMENTO_AJUSTE.CODI_EMP = {cod_emp} AND MOVIMENTO_AJUSTE.DATA_AJUSTE >= {data_inicio} AND MOVIMENTO_AJUSTE.DATA_AJUSTE <= {data_fim} AND AJUSTES.OPER_AJU = 3 AND AJUSTES.CODI_IMP = 9 AND ESTADO.SIGLA_UF NOT IN ('EX', EMPRESA.ESTA_EMP) UNION ALL SELECT CAST(2 AS INTEGER) AS QUADRO, TDAUX.DESCRICAO AS DESCRICAO, MOVIMENTO_AJUSTE.CODIGO_UF AS CODIGO_ESTADO, 0 AS BASE_CALCULO, MOVIMENTO_AJUSTE.VALOR AS VALOR FROM BETHADBA.EFMOVIMENTO_AJUSTE_ESTADUAL_PA AS MOVIMENTO_AJUSTE INNER JOIN BETHADBA.GEEMPRE AS EMPRESA ON EMPRESA.CODI_EMP = MOVIMENTO_AJUSTE.CODI_EMP INNER JOIN BETHADBA.EFAJUSTES AS AJUSTES ON AJUSTES.CODI_EMP = MOVIMENTO_AJUSTE.CODI_EMP AND AJUSTES.CODI_AJU = MOVIMENTO_AJUSTE.CODI_AJU INNER JOIN BETHADBA.GEESTADO AS ESTADO ON ESTADO.CODIGO_UF = MOVIMENTO_AJUSTE.CODIGO_UF, LATERAL(SELECT ESTADO.SIGLA_UF || ' - ' || AJUSTES.NOME_AJU AS DESCRICAO FROM DSDBA.DUMMY) AS TDAUX WHERE MOVIMENTO_AJUSTE.CODI_EMP = {cod_emp} AND MOVIMENTO_AJUSTE.DATA_AJUSTE BETWEEN {data_inicio} AND {data_fim} AND AJUSTES.OPER_AJU = 3 AND AJUSTES.CODI_IMP = 9 AND ESTADO.SIGLA_UF NOT IN ('EX', EMPRESA.ESTA_EMP) UNION ALL SELECT CAST(2 AS INTEGER) AS QUADRO, TDAUX.DESCRICAO AS DESCRICAO, MOVIMENTO_AJUSTE.CODIGO_UF AS CODIGO_ESTADO, 0 AS BASE_CALCULO, MOVIMENTO_AJUSTE.VALOR AS VALOR FROM BETHADBA.EFMOVIMENTO_AJUSTE_ESTADUAL_PB AS MOVIMENTO_AJUSTE INNER JOIN BETHADBA.GEEMPRE AS EMPRESA ON EMPRESA.CODI_EMP = MOVIMENTO_AJUSTE.CODI_EMP INNER JOIN BETHADBA.EFAJUSTES AS AJUSTES ON AJUSTES.CODI_EMP = MOVIMENTO_AJUSTE.CODI_EMP AND AJUSTES.CODI_AJU = MOVIMENTO_AJUSTE.CODI_AJU INNER JOIN BETHADBA.GEESTADO AS ESTADO ON ESTADO.CODIGO_UF = MOVIMENTO_AJUSTE.CODIGO_UF, LATERAL(SELECT ESTADO.SIGLA_UF || ' - ' || AJUSTES.NOME_AJU AS DESCRICAO FROM DSDBA.DUMMY) AS TDAUX WHERE MOVIMENTO_AJUSTE.CODI_EMP = {cod_emp} AND MOVIMENTO_AJUSTE.DATA_AJUSTE BETWEEN {data_inicio} AND {data_fim} AND AJUSTES.OPER_AJU = 3 AND AJUSTES.CODI_IMP = 9 AND ESTADO.SIGLA_UF NOT IN ('EX', EMPRESA.ESTA_EMP) UNION ALL SELECT CAST(2 AS INTEGER) AS QUADRO, TDAUX.DESCRICAO AS DESCRICAO, MOVIMENTO_AJUSTE.CODIGO_UF AS CODIGO_ESTADO, 0 AS BASE_CALCULO, MOVIMENTO_AJUSTE.VALOR AS VALOR FROM BETHADBA.EFMOVIMENTO_AJUSTE_ESTADUAL_PE AS MOVIMENTO_AJUSTE INNER JOIN BETHADBA.GEEMPRE AS EMPRESA ON EMPRESA.CODI_EMP = MOVIMENTO_AJUSTE.CODI_EMP INNER JOIN BETHADBA.EFAJUSTES AS AJUSTES ON AJUSTES.CODI_EMP = MOVIMENTO_AJUSTE.CODI_EMP AND AJUSTES.CODI_AJU = MOVIMENTO_AJUSTE.CODI_AJU INNER JOIN BETHADBA.GEESTADO AS ESTADO ON ESTADO.CODIGO_UF = MOVIMENTO_AJUSTE.CODIGO_UF, LATERAL(SELECT ESTADO.SIGLA_UF || ' - ' || AJUSTES.NOME_AJU AS DESCRICAO FROM DSDBA.DUMMY) AS TDAUX WHERE MOVIMENTO_AJUSTE.CODI_EMP = {cod_emp} AND MOVIMENTO_AJUSTE.DATA_AJUSTE >= {data_inicio} AND MOVIMENTO_AJUSTE.DATA_AJUSTE <= {data_fim} AND AJUSTES.OPER_AJU = 3 AND AJUSTES.CODI_IMP = 9 AND ESTADO.SIGLA_UF NOT IN ('EX', EMPRESA.ESTA_EMP) UNION ALL SELECT CAST(2 AS INTEGER) AS QUADRO, TDAUX.DESCRICAO AS DESCRICAO, MOVIMENTO_AJUSTE.CODIGO_UF AS CODIGO_ESTADO, 0 AS BASE_CALCULO, MOVIMENTO_AJUSTE.VALOR AS VALOR FROM BETHADBA.EFMOVIMENTO_AJUSTE_ESTADUAL_PR AS MOVIMENTO_AJUSTE INNER JOIN BETHADBA.GEEMPRE AS EMPRESA ON EMPRESA.CODI_EMP = MOVIMENTO_AJUSTE.CODI_EMP INNER JOIN BETHADBA.EFAJUSTES AS AJUSTES ON AJUSTES.CODI_EMP = MOVIMENTO_AJUSTE.CODI_EMP AND AJUSTES.CODI_AJU = MOVIMENTO_AJUSTE.CODI_AJU INNER JOIN BETHADBA.GEESTADO AS ESTADO ON ESTADO.CODIGO_UF = MOVIMENTO_AJUSTE.CODIGO_UF, LATERAL(SELECT ESTADO.SIGLA_UF || ' - ' || AJUSTES.NOME_AJU AS DESCRICAO FROM DSDBA.DUMMY) AS TDAUX WHERE MOVIMENTO_AJUSTE.CODI_EMP = {cod_emp} AND MOVIMENTO_AJUSTE.DATA_AJUSTE >= {data_inicio} AND MOVIMENTO_AJUSTE.DATA_AJUSTE <= {data_fim} AND AJUSTES.OPER_AJU = 3 AND AJUSTES.CODI_IMP = 9 AND ESTADO.SIGLA_UF NOT IN ('EX', EMPRESA.ESTA_EMP) UNION ALL SELECT CAST(2 AS INTEGER) AS QUADRO, TDAUX.DESCRICAO AS DESCRICAO, MOVIMENTO_AJUSTE.CODIGO_UF AS CODIGO_ESTADO, 0 AS BASE_CALCULO, MOVIMENTO_AJUSTE.VALOR AS VALOR FROM BETHADBA.EFMOVIMENTO_AJUSTE_ESTADUAL_RO AS MOVIMENTO_AJUSTE INNER JOIN BETHADBA.GEEMPRE AS EMPRESA ON EMPRESA.CODI_EMP = MOVIMENTO_AJUSTE.CODI_EMP INNER JOIN BETHADBA.EFAJUSTES AS AJUSTES ON AJUSTES.CODI_EMP = MOVIMENTO_AJUSTE.CODI_EMP AND AJUSTES.CODI_AJU = MOVIMENTO_AJUSTE.CODI_AJU INNER JOIN BETHADBA.GEESTADO AS ESTADO ON ESTADO.CODIGO_UF = MOVIMENTO_AJUSTE.CODIGO_UF, LATERAL(SELECT ESTADO.SIGLA_UF || ' - ' || AJUSTES.NOME_AJU AS DESCRICAO FROM DSDBA.DUMMY) AS TDAUX WHERE MOVIMENTO_AJUSTE.CODI_EMP = {cod_emp} AND MOVIMENTO_AJUSTE.DATA_AJUSTE >= {data_inicio} AND MOVIMENTO_AJUSTE.DATA_AJUSTE <= {data_fim} AND AJUSTES.OPER_AJU = 3 AND AJUSTES.CODI_IMP = 9 AND ESTADO.SIGLA_UF NOT IN ('EX', EMPRESA.ESTA_EMP) UNION ALL SELECT CAST(2 AS INTEGER) AS QUADRO, TDAUX.DESCRICAO AS DESCRICAO, MOVIMENTO_AJUSTE.CODIGO_UF AS CODIGO_ESTADO, 0 AS BASE_CALCULO, MOVIMENTO_AJUSTE.VALOR AS VALOR FROM BETHADBA.EFMOVIMENTO_AJUSTE_ESTADUAL_RR AS MOVIMENTO_AJUSTE INNER JOIN BETHADBA.GEEMPRE AS EMPRESA ON EMPRESA.CODI_EMP = MOVIMENTO_AJUSTE.CODI_EMP INNER JOIN BETHADBA.EFAJUSTES AS AJUSTES ON AJUSTES.CODI_EMP = MOVIMENTO_AJUSTE.CODI_EMP AND AJUSTES.CODI_AJU = MOVIMENTO_AJUSTE.CODI_AJU INNER JOIN BETHADBA.GEESTADO AS ESTADO ON ESTADO.CODIGO_UF = MOVIMENTO_AJUSTE.CODIGO_UF, LATERAL(SELECT ESTADO.SIGLA_UF || ' - ' || AJUSTES.NOME_AJU AS DESCRICAO FROM DSDBA.DUMMY) AS TDAUX WHERE MOVIMENTO_AJUSTE.CODI_EMP = {cod_emp} AND MOVIMENTO_AJUSTE.DATA_AJUSTE >= {data_inicio} AND MOVIMENTO_AJUSTE.DATA_AJUSTE <= {data_fim} AND AJUSTES.OPER_AJU = 3 AND AJUSTES.CODI_IMP = 9 AND ESTADO.SIGLA_UF NOT IN ('EX', EMPRESA.ESTA_EMP) UNION ALL SELECT CAST(2 AS INTEGER) AS QUADRO, TDAUX.DESCRICAO AS DESCRICAO, MOVIMENTO_AJUSTE.CODIGO_UF AS CODIGO_ESTADO, 0 AS BASE_CALCULO, MOVIMENTO_AJUSTE.VALOR AS VALOR FROM BETHADBA.EFMOVIMENTO_AJUSTE_ESTADUAL_SC AS MOVIMENTO_AJUSTE INNER JOIN BETHADBA.GEEMPRE AS EMPRESA ON EMPRESA.CODI_EMP = MOVIMENTO_AJUSTE.CODI_EMP INNER JOIN BETHADBA.EFAJUSTES AS AJUSTES ON AJUSTES.CODI_EMP = MOVIMENTO_AJUSTE.CODI_EMP AND AJUSTES.CODI_AJU = MOVIMENTO_AJUSTE.CODI_AJU INNER JOIN BETHADBA.GEESTADO AS ESTADO ON ESTADO.CODIGO_UF = MOVIMENTO_AJUSTE.CODIGO_UF, LATERAL(SELECT ESTADO.SIGLA_UF || ' - ' || AJUSTES.NOME_AJU AS DESCRICAO FROM DSDBA.DUMMY) AS TDAUX WHERE MOVIMENTO_AJUSTE.CODI_EMP = {cod_emp} AND MOVIMENTO_AJUSTE.DATA_AJUSTE >= {data_inicio} AND MOVIMENTO_AJUSTE.DATA_AJUSTE <= {data_fim} AND AJUSTES.OPER_AJU = 3 AND AJUSTES.CODI_IMP = 9 AND ESTADO.SIGLA_UF NOT IN ('EX', EMPRESA.ESTA_EMP) UNION ALL SELECT CAST(2 AS INTEGER) AS QUADRO, TDAUX.DESCRICAO AS DESCRICAO, MOVIMENTO_AJUSTE.CODIGO_UF AS CODIGO_ESTADO, 0 AS BASE_CALCULO, MOVIMENTO_AJUSTE.VALOR AS VALOR FROM BETHADBA.EFMOVIMENTO_AJUSTE_ESTADUAL_RJ AS MOVIMENTO_AJUSTE INNER JOIN BETHADBA.GEEMPRE AS EMPRESA ON EMPRESA.CODI_EMP = MOVIMENTO_AJUSTE.CODI_EMP INNER JOIN BETHADBA.EFAJUSTES AS AJUSTES ON AJUSTES.CODI_EMP = MOVIMENTO_AJUSTE.CODI_EMP AND AJUSTES.CODI_AJU = MOVIMENTO_AJUSTE.CODI_AJU INNER JOIN BETHADBA.GEESTADO AS ESTADO ON ESTADO.CODIGO_UF = MOVIMENTO_AJUSTE.CODIGO_UF, LATERAL(SELECT ESTADO.SIGLA_UF || ' - ' || AJUSTES.NOME_AJU AS DESCRICAO FROM DSDBA.DUMMY) AS TDAUX WHERE MOVIMENTO_AJUSTE.CODI_EMP = {cod_emp} AND MOVIMENTO_AJUSTE.DATA_AJUSTE >= {data_inicio} AND MOVIMENTO_AJUSTE.DATA_AJUSTE <= {data_fim} AND AJUSTES.OPER_AJU = 3 AND AJUSTES.CODI_IMP = 9 AND ESTADO.SIGLA_UF NOT IN ('EX', EMPRESA.ESTA_EMP) UNION ALL SELECT CAST(2 AS INTEGER) AS QUADRO, TDAUX.DESCRICAO AS DESCRICAO, MOVIMENTO_AJUSTE.CODIGO_UF AS CODIGO_ESTADO, 0 AS BASE_CALCULO, MOVIMENTO_AJUSTE.VALOR AS VALOR FROM BETHADBA.EFMOVIMENTO_AJUSTE_ESTADUAL_TO AS MOVIMENTO_AJUSTE INNER JOIN BETHADBA.GEEMPRE AS EMPRESA ON EMPRESA.CODI_EMP = MOVIMENTO_AJUSTE.CODI_EMP INNER JOIN BETHADBA.EFAJUSTES AS AJUSTES ON AJUSTES.CODI_EMP = MOVIMENTO_AJUSTE.CODI_EMP AND AJUSTES.CODI_AJU = MOVIMENTO_AJUSTE.CODI_AJU INNER JOIN BETHADBA.GEESTADO AS ESTADO ON ESTADO.CODIGO_UF = MOVIMENTO_AJUSTE.CODIGO_UF, LATERAL(SELECT ESTADO.SIGLA_UF || ' - ' || AJUSTES.NOME_AJU AS DESCRICAO FROM DSDBA.DUMMY) AS TDAUX WHERE MOVIMENTO_AJUSTE.CODI_EMP = {cod_emp} AND MOVIMENTO_AJUSTE.DATA_AJUSTE >= {data_inicio} AND MOVIMENTO_AJUSTE.DATA_AJUSTE <= {data_fim} AND AJUSTES.OPER_AJU = 3 AND AJUSTES.CODI_IMP = 9 AND ESTADO.SIGLA_UF NOT IN ('EX', EMPRESA.ESTA_EMP) UNION ALL SELECT CAST(2 AS INTEGER) AS QUADRO, TDAUX.DESCRICAO AS DESCRICAO, MOVIMENTO_AJUSTE.CODIGO_UF AS CODIGO_ESTADO, 0 AS BASE_CALCULO, MOVIMENTO_AJUSTE.VALOR AS VALOR FROM BETHADBA.EFMOVIMENTO_AJUSTE_ESTADUAL_RS AS MOVIMENTO_AJUSTE INNER JOIN BETHADBA.GEEMPRE AS EMPRESA ON EMPRESA.CODI_EMP = MOVIMENTO_AJUSTE.CODI_EMP INNER JOIN BETHADBA.EFAJUSTES AS AJUSTES ON AJUSTES.CODI_EMP = MOVIMENTO_AJUSTE.CODI_EMP AND AJUSTES.CODI_AJU = MOVIMENTO_AJUSTE.CODI_AJU INNER JOIN BETHADBA.GEESTADO AS ESTADO ON ESTADO.CODIGO_UF = MOVIMENTO_AJUSTE.CODIGO_UF, LATERAL(SELECT ESTADO.SIGLA_UF || ' - ' || AJUSTES.NOME_AJU AS DESCRICAO FROM DSDBA.DUMMY) AS TDAUX WHERE MOVIMENTO_AJUSTE.CODI_EMP = {cod_emp} AND MOVIMENTO_AJUSTE.DATA_AJUSTE >= {data_inicio} AND MOVIMENTO_AJUSTE.DATA_AJUSTE <= {data_fim} AND AJUSTES.OPER_AJU = 3 AND AJUSTES.CODI_IMP = 9 AND ESTADO.SIGLA_UF NOT IN ('EX', EMPRESA.ESTA_EMP) UNION ALL SELECT CAST(2 AS INTEGER) AS QUADRO, TDAUX.DESCRICAO AS DESCRICAO, MOVIMENTO_AJUSTE.CODIGO_UF AS CODIGO_ESTADO, 0 AS BASE_CALCULO, MOVIMENTO_AJUSTE.VALOR AS VALOR FROM BETHADBA.EFMOVIMENTO_AJUSTE_ESTADUAL_SP AS MOVIMENTO_AJUSTE INNER JOIN BETHADBA.GEEMPRE AS EMPRESA ON EMPRESA.CODI_EMP = MOVIMENTO_AJUSTE.CODI_EMP INNER JOIN BETHADBA.EFAJUSTES AS AJUSTES ON AJUSTES.CODI_EMP = MOVIMENTO_AJUSTE.CODI_EMP AND AJUSTES.CODI_AJU = MOVIMENTO_AJUSTE.CODI_AJU INNER JOIN BETHADBA.GEESTADO AS ESTADO ON ESTADO.CODIGO_UF = MOVIMENTO_AJUSTE.CODIGO_UF, LATERAL(SELECT ESTADO.SIGLA_UF || ' - ' || AJUSTES.NOME_AJU AS DESCRICAO FROM DSDBA.DUMMY) AS TDAUX WHERE MOVIMENTO_AJUSTE.CODI_EMP = {cod_emp} AND MOVIMENTO_AJUSTE.DATA_AJUSTE >= {data_inicio} AND MOVIMENTO_AJUSTE.DATA_AJUSTE <= {data_fim} AND AJUSTES.OPER_AJU = 3 AND AJUSTES.CODI_IMP = 9 AND ESTADO.SIGLA_UF NOT IN ('EX', EMPRESA.ESTA_EMP) UNION ALL SELECT CAST(3 AS INTEGER) AS QUADRO, TDAUX.DESCRICAO AS DESCRICAO, EFMOVAJU.CODIGO_UF AS CODIGO_ESTADO, 0 AS BASE_CALCULO, EFMOVAJU.VLOR_MAJ AS VALOR FROM BETHADBA.EFMOVAJU AS EFMOVAJU INNER JOIN BETHADBA.GEEMPRE AS GEEMPRE ON GEEMPRE.CODI_EMP = EFMOVAJU.CODI_EMP INNER JOIN BETHADBA.EFAJUSTES AS EFAJUSTES ON EFAJUSTES.CODI_EMP = EFMOVAJU.CODI_EMP AND EFAJUSTES.CODI_AJU = EFMOVAJU.CODI_AJU INNER JOIN BETHADBA.GEESTADO AS GEESTADO ON GEESTADO.CODIGO_UF = EFMOVAJU.CODIGO_UF, LATERAL(SELECT GEESTADO.SIGLA_UF || ' - ' || EFAJUSTES.NOME_AJU AS DESCRICAO FROM DSDBA.DUMMY) AS TDAUX WHERE EFMOVAJU.CODI_EMP = {cod_emp} AND EFMOVAJU.DATA_MAJ >= {data_inicio} AND EFMOVAJU.DATA_MAJ <= {data_fim} AND EFMOVAJU.REGISTRO_CONVERTIDO = 'N' AND EFAJUSTES.OPER_AJU = 4 AND EFAJUSTES.CODI_IMP = 9 AND GEESTADO.SIGLA_UF NOT IN ('EX', GEEMPRE.ESTA_EMP) UNION ALL SELECT CAST(3 AS INTEGER) AS QUADRO, TDAUX.DESCRICAO AS DESCRICAO, MOVIMENTO_AJUSTE.CODIGO_UF AS CODIGO_ESTADO, 0 AS BASE_CALCULO, MOVIMENTO_AJUSTE.VALOR AS VALOR FROM BETHADBA.EFMOVIMENTO_AJUSTE_ESTADUAL_SE AS MOVIMENTO_AJUSTE INNER JOIN BETHADBA.GEEMPRE AS EMPRESA ON EMPRESA.CODI_EMP = MOVIMENTO_AJUSTE.CODI_EMP INNER JOIN BETHADBA.EFAJUSTES AS AJUSTES ON AJUSTES.CODI_EMP = MOVIMENTO_AJUSTE.CODI_EMP AND AJUSTES.CODI_AJU = MOVIMENTO_AJUSTE.CODI_AJU INNER JOIN BETHADBA.GEESTADO AS ESTADO ON ESTADO.CODIGO_UF = MOVIMENTO_AJUSTE.CODIGO_UF, LATERAL(SELECT ESTADO.SIGLA_UF || ' - ' || AJUSTES.NOME_AJU AS DESCRICAO FROM DSDBA.DUMMY) AS TDAUX WHERE MOVIMENTO_AJUSTE.CODI_EMP = {cod_emp} AND MOVIMENTO_AJUSTE.DATA_AJUSTE BETWEEN {data_inicio} AND {data_fim} AND AJUSTES.OPER_AJU = 4 AND AJUSTES.CODI_IMP = 9 AND ESTADO.SIGLA_UF NOT IN ('EX', EMPRESA.ESTA_EMP) UNION ALL SELECT CAST(3 AS INTEGER) AS QUADRO, TDAUX.DESCRICAO AS DESCRICAO, MOVIMENTO_AJUSTE.CODIGO_UF AS CODIGO_ESTADO, 0 AS BASE_CALCULO, MOVIMENTO_AJUSTE.VALOR AS VALOR FROM BETHADBA.EFMOVIMENTO_AJUSTE_ESTADUAL_RN AS MOVIMENTO_AJUSTE INNER JOIN BETHADBA.GEEMPRE AS EMPRESA ON EMPRESA.CODI_EMP = MOVIMENTO_AJUSTE.CODI_EMP INNER JOIN BETHADBA.EFAJUSTES AS AJUSTES ON AJUSTES.CODI_EMP = MOVIMENTO_AJUSTE.CODI_EMP AND AJUSTES.CODI_AJU = MOVIMENTO_AJUSTE.CODI_AJU INNER JOIN BETHADBA.GEESTADO AS ESTADO ON ESTADO.CODIGO_UF = MOVIMENTO_AJUSTE.CODIGO_UF, LATERAL(SELECT ESTADO.SIGLA_UF || ' - ' || AJUSTES.NOME_AJU AS DESCRICAO FROM DSDBA.DUMMY) AS TDAUX WHERE MOVIMENTO_AJUSTE.CODI_EMP = {cod_emp} AND MOVIMENTO_AJUSTE.DATA_AJUSTE BETWEEN {data_inicio} AND {data_fim} AND AJUSTES.OPER_AJU = 4 AND AJUSTES.CODI_IMP = 9 AND ESTADO.SIGLA_UF NOT IN ('EX', EMPRESA.ESTA_EMP) UNION ALL SELECT CAST(3 AS INTEGER) AS QUADRO, TDAUX.DESCRICAO AS DESCRICAO, MOVIMENTO_AJUSTE.CODIGO_UF AS CODIGO_ESTADO, 0 AS BASE_CALCULO, MOVIMENTO_AJUSTE.VALOR AS VALOR FROM BETHADBA.EFMOVIMENTO_AJUSTE_ESTADUAL_CE AS MOVIMENTO_AJUSTE INNER JOIN BETHADBA.GEEMPRE AS EMPRESA ON EMPRESA.CODI_EMP = MOVIMENTO_AJUSTE.CODI_EMP INNER JOIN BETHADBA.EFAJUSTES AS AJUSTE ON AJUSTE.CODI_EMP = MOVIMENTO_AJUSTE.CODI_EMP AND AJUSTE.CODI_AJU = MOVIMENTO_AJUSTE.CODI_AJU INNER JOIN BETHADBA.GEESTADO AS ESTADO ON ESTADO.CODIGO_UF = MOVIMENTO_AJUSTE.CODIGO_UF, LATERAL(SELECT ESTADO.SIGLA_UF || ' - ' || AJUSTE.NOME_AJU AS DESCRICAO FROM DSDBA.DUMMY) AS TDAUX WHERE MOVIMENTO_AJUSTE.CODI_EMP = {cod_emp} AND MOVIMENTO_AJUSTE.DATA_AJUSTE BETWEEN {data_inicio} AND {data_fim} AND AJUSTE.OPER_AJU = 4 AND AJUSTE.CODI_IMP = 9 AND ESTADO.SIGLA_UF NOT IN ('EX', EMPRESA.ESTA_EMP) UNION ALL SELECT CAST(3 AS INTEGER) AS QUADRO, TDAUX.DESCRICAO AS DESCRICAO, MOVIMENTO_AJUSTE.CODIGO_UF AS CODIGO_ESTADO, 0 AS BASE_CALCULO, MOVIMENTO_AJUSTE.VALOR AS VALOR FROM BETHADBA.EFMOVIMENTO_AJUSTE_ESTADUAL_AC AS MOVIMENTO_AJUSTE INNER JOIN BETHADBA.GEEMPRE AS EMPRESA ON EMPRESA.CODI_EMP = MOVIMENTO_AJUSTE.CODI_EMP INNER JOIN BETHADBA.EFAJUSTES AS AJUSTES ON AJUSTES.CODI_EMP = MOVIMENTO_AJUSTE.CODI_EMP AND AJUSTES.CODI_AJU = MOVIMENTO_AJUSTE.CODI_AJU INNER JOIN BETHADBA.GEESTADO AS ESTADO ON ESTADO.CODIGO_UF = MOVIMENTO_AJUSTE.CODIGO_UF, LATERAL(SELECT ESTADO.SIGLA_UF || ' - ' || AJUSTES.NOME_AJU AS DESCRICAO FROM DSDBA.DUMMY) AS TDAUX WHERE MOVIMENTO_AJUSTE.CODI_EMP = {cod_emp} AND MOVIMENTO_AJUSTE.DATA_AJUSTE >= {data_inicio} AND MOVIMENTO_AJUSTE.DATA_AJUSTE <= {data_fim} AND AJUSTES.OPER_AJU = 4 AND AJUSTES.CODI_IMP = 9 AND ESTADO.SIGLA_UF NOT IN ('EX', EMPRESA.ESTA_EMP) UNION ALL SELECT CAST(3 AS INTEGER) AS QUADRO, TDAUX.DESCRICAO AS DESCRICAO, MOVIMENTO_AJUSTE.CODIGO_UF AS CODIGO_ESTADO, 0 AS BASE_CALCULO, MOVIMENTO_AJUSTE.VALOR AS VALOR FROM BETHADBA.EFMOVIMENTO_AJUSTE_ESTADUAL_MG AS MOVIMENTO_AJUSTE INNER JOIN BETHADBA.GEEMPRE AS EMPRESA ON EMPRESA.CODI_EMP = MOVIMENTO_AJUSTE.CODI_EMP INNER JOIN BETHADBA.EFAJUSTES AS AJUSTES ON AJUSTES.CODI_EMP = MOVIMENTO_AJUSTE.CODI_EMP AND AJUSTES.CODI_AJU = MOVIMENTO_AJUSTE.CODI_AJU INNER JOIN BETHADBA.GEESTADO AS ESTADO ON ESTADO.CODIGO_UF = MOVIMENTO_AJUSTE.CODIGO_UF, LATERAL(SELECT ESTADO.SIGLA_UF || ' - ' || AJUSTES.NOME_AJU AS DESCRICAO FROM DSDBA.DUMMY) AS TDAUX WHERE MOVIMENTO_AJUSTE.CODI_EMP = {cod_emp} AND MOVIMENTO_AJUSTE.DATA_AJUSTE >= {data_inicio} AND MOVIMENTO_AJUSTE.DATA_AJUSTE <= {data_fim} AND AJUSTES.OPER_AJU = 4 AND AJUSTES.CODI_IMP = 9 AND ESTADO.SIGLA_UF NOT IN ('EX', EMPRESA.ESTA_EMP) UNION ALL SELECT CAST(3 AS INTEGER) AS QUADRO, TDAUX.DESCRICAO AS DESCRICAO, MOVIMENTO_AJUSTE.CODIGO_UF AS CODIGO_ESTADO, 0 AS BASE_CALCULO, MOVIMENTO_AJUSTE.VALOR AS VALOR FROM BETHADBA.EFMOVIMENTO_AJUSTE_ESTADUAL_MT AS MOVIMENTO_AJUSTE INNER JOIN BETHADBA.GEEMPRE AS EMPRESA ON EMPRESA.CODI_EMP = MOVIMENTO_AJUSTE.CODI_EMP INNER JOIN BETHADBA.EFAJUSTES AS AJUSTES ON AJUSTES.CODI_EMP = MOVIMENTO_AJUSTE.CODI_EMP AND AJUSTES.CODI_AJU = MOVIMENTO_AJUSTE.CODI_AJU INNER JOIN BETHADBA.GEESTADO AS ESTADO ON ESTADO.CODIGO_UF = MOVIMENTO_AJUSTE.CODIGO_UF, LATERAL(SELECT ESTADO.SIGLA_UF || ' - ' || AJUSTES.NOME_AJU AS DESCRICAO FROM DSDBA.DUMMY) AS TDAUX WHERE MOVIMENTO_AJUSTE.CODI_EMP = {cod_emp} AND MOVIMENTO_AJUSTE.DATA_AJUSTE >= {data_inicio} AND MOVIMENTO_AJUSTE.DATA_AJUSTE <= {data_fim} AND AJUSTES.OPER_AJU = 4 AND AJUSTES.CODI_IMP = 9 AND ESTADO.SIGLA_UF NOT IN ('EX', EMPRESA.ESTA_EMP) UNION ALL SELECT CAST(3 AS INTEGER) AS QUADRO, TDAUX.DESCRICAO AS DESCRICAO, MOVIMENTO_AJUSTE.CODIGO_UF AS CODIGO_ESTADO, 0 AS BASE_CALCULO, MOVIMENTO_AJUSTE.VALOR AS VALOR FROM BETHADBA.EFMOVIMENTO_AJUSTE_ESTADUAL_ES AS MOVIMENTO_AJUSTE INNER JOIN BETHADBA.GEEMPRE AS EMPRESA ON EMPRESA.CODI_EMP = MOVIMENTO_AJUSTE.CODI_EMP INNER JOIN BETHADBA.EFAJUSTES AS AJUSTES ON AJUSTES.CODI_EMP = MOVIMENTO_AJUSTE.CODI_EMP AND AJUSTES.CODI_AJU = MOVIMENTO_AJUSTE.CODI_AJU INNER JOIN BETHADBA.GEESTADO AS ESTADO ON ESTADO.CODIGO_UF = MOVIMENTO_AJUSTE.CODIGO_UF, LATERAL(SELECT ESTADO.SIGLA_UF || ' - ' || AJUSTES.NOME_AJU AS DESCRICAO FROM DSDBA.DUMMY) AS TDAUX WHERE MOVIMENTO_AJUSTE.CODI_EMP = {cod_emp} AND MOVIMENTO_AJUSTE.DATA_AJUSTE >= {data_inicio} AND MOVIMENTO_AJUSTE.DATA_AJUSTE <= {data_fim} AND AJUSTES.OPER_AJU = 4 AND AJUSTES.CODI_IMP = 9 AND ESTADO.SIGLA_UF NOT IN ('EX', EMPRESA.ESTA_EMP) UNION ALL SELECT CAST(3 AS INTEGER) AS QUADRO, TDAUX.DESCRICAO AS DESCRICAO, MOVIMENTO_AJUSTE.CODIGO_UF AS CODIGO_ESTADO, 0 AS BASE_CALCULO, MOVIMENTO_AJUSTE.VALOR AS VALOR FROM BETHADBA.EFMOVIMENTO_AJUSTE_ESTADUAL_MS AS MOVIMENTO_AJUSTE INNER JOIN BETHADBA.GEEMPRE AS EMPRESA ON EMPRESA.CODI_EMP = MOVIMENTO_AJUSTE.CODI_EMP INNER JOIN BETHADBA.EFAJUSTES AS AJUSTES ON AJUSTES.CODI_EMP = MOVIMENTO_AJUSTE.CODI_EMP AND AJUSTES.CODI_AJU = MOVIMENTO_AJUSTE.CODI_AJU INNER JOIN BETHADBA.GEESTADO AS ESTADO ON ESTADO.CODIGO_UF = MOVIMENTO_AJUSTE.CODIGO_UF, LATERAL(SELECT ESTADO.SIGLA_UF || ' - ' || AJUSTES.NOME_AJU AS DESCRICAO FROM DSDBA.DUMMY) AS TDAUX WHERE MOVIMENTO_AJUSTE.CODI_EMP = {cod_emp} AND MOVIMENTO_AJUSTE.DATA_AJUSTE >= {data_inicio} AND MOVIMENTO_AJUSTE.DATA_AJUSTE <= {data_fim} AND AJUSTES.OPER_AJU = 4 AND AJUSTES.CODI_IMP = 9 AND ESTADO.SIGLA_UF NOT IN ('EX', EMPRESA.ESTA_EMP) UNION ALL SELECT CAST(3 AS INTEGER) AS QUADRO, TDAUX.DESCRICAO AS DESCRICAO, MOVIMENTO_AJUSTE.CODIGO_UF AS CODIGO_ESTADO, 0 AS BASE_CALCULO, MOVIMENTO_AJUSTE.VALOR AS VALOR FROM BETHADBA.EFMOVIMENTO_AJUSTE_ESTADUAL_PA AS MOVIMENTO_AJUSTE INNER JOIN BETHADBA.GEEMPRE AS EMPRESA ON EMPRESA.CODI_EMP = MOVIMENTO_AJUSTE.CODI_EMP INNER JOIN BETHADBA.EFAJUSTES AS AJUSTES ON AJUSTES.CODI_EMP = MOVIMENTO_AJUSTE.CODI_EMP AND AJUSTES.CODI_AJU = MOVIMENTO_AJUSTE.CODI_AJU INNER JOIN BETHADBA.GEESTADO AS ESTADO ON ESTADO.CODIGO_UF = MOVIMENTO_AJUSTE.CODIGO_UF, LATERAL(SELECT ESTADO.SIGLA_UF || ' - ' || AJUSTES.NOME_AJU AS DESCRICAO FROM DSDBA.DUMMY) AS TDAUX WHERE MOVIMENTO_AJUSTE.CODI_EMP = {cod_emp} AND MOVIMENTO_AJUSTE.DATA_AJUSTE BETWEEN {data_inicio} AND {data_fim} AND AJUSTES.OPER_AJU = 4 AND AJUSTES.CODI_IMP = 9 AND ESTADO.SIGLA_UF NOT IN ('EX', EMPRESA.ESTA_EMP) UNION ALL SELECT CAST(3 AS INTEGER) AS QUADRO, TDAUX.DESCRICAO AS DESCRICAO, MOVIMENTO_AJUSTE.CODIGO_UF AS CODIGO_ESTADO, 0 AS BASE_CALCULO, MOVIMENTO_AJUSTE.VALOR AS VALOR FROM BETHADBA.EFMOVIMENTO_AJUSTE_ESTADUAL_PB AS MOVIMENTO_AJUSTE INNER JOIN BETHADBA.GEEMPRE AS EMPRESA ON EMPRESA.CODI_EMP = MOVIMENTO_AJUSTE.CODI_EMP INNER JOIN BETHADBA.EFAJUSTES AS AJUSTES ON AJUSTES.CODI_EMP = MOVIMENTO_AJUSTE.CODI_EMP AND AJUSTES.CODI_AJU = MOVIMENTO_AJUSTE.CODI_AJU INNER JOIN BETHADBA.GEESTADO AS ESTADO ON ESTADO.CODIGO_UF = MOVIMENTO_AJUSTE.CODIGO_UF, LATERAL(SELECT ESTADO.SIGLA_UF || ' - ' || AJUSTES.NOME_AJU AS DESCRICAO FROM DSDBA.DUMMY) AS TDAUX WHERE MOVIMENTO_AJUSTE.CODI_EMP = {cod_emp} AND MOVIMENTO_AJUSTE.DATA_AJUSTE BETWEEN {data_inicio} AND {data_fim} AND AJUSTES.OPER_AJU = 4 AND AJUSTES.CODI_IMP = 9 AND ESTADO.SIGLA_UF NOT IN ('EX', EMPRESA.ESTA_EMP) UNION ALL SELECT CAST(3 AS INTEGER) AS QUADRO, TDAUX.DESCRICAO AS DESCRICAO, MOVIMENTO_AJUSTE.CODIGO_UF AS CODIGO_ESTADO, 0 AS BASE_CALCULO, MOVIMENTO_AJUSTE.VALOR AS VALOR FROM BETHADBA.EFMOVIMENTO_AJUSTE_ESTADUAL_PE AS MOVIMENTO_AJUSTE INNER JOIN BETHADBA.GEEMPRE AS EMPRESA ON EMPRESA.CODI_EMP = MOVIMENTO_AJUSTE.CODI_EMP INNER JOIN BETHADBA.EFAJUSTES AS AJUSTES ON AJUSTES.CODI_EMP = MOVIMENTO_AJUSTE.CODI_EMP AND AJUSTES.CODI_AJU = MOVIMENTO_AJUSTE.CODI_AJU INNER JOIN BETHADBA.GEESTADO AS ESTADO ON ESTADO.CODIGO_UF = MOVIMENTO_AJUSTE.CODIGO_UF, LATERAL(SELECT ESTADO.SIGLA_UF || ' - ' || AJUSTES.NOME_AJU AS DESCRICAO FROM DSDBA.DUMMY) AS TDAUX WHERE MOVIMENTO_AJUSTE.CODI_EMP = {cod_emp} AND MOVIMENTO_AJUSTE.DATA_AJUSTE >= {data_inicio} AND MOVIMENTO_AJUSTE.DATA_AJUSTE <= {data_fim} AND AJUSTES.OPER_AJU = 4 AND AJUSTES.CODI_IMP = 9 AND ESTADO.SIGLA_UF NOT IN ('EX', EMPRESA.ESTA_EMP) UNION ALL SELECT CAST(3 AS INTEGER) AS QUADRO, TDAUX.DESCRICAO AS DESCRICAO, MOVIMENTO_AJUSTE.CODIGO_UF AS CODIGO_ESTADO, 0 AS BASE_CALCULO, MOVIMENTO_AJUSTE.VALOR AS VALOR FROM BETHADBA.EFMOVIMENTO_AJUSTE_ESTADUAL_PR AS MOVIMENTO_AJUSTE INNER JOIN BETHADBA.GEEMPRE AS EMPRESA ON EMPRESA.CODI_EMP = MOVIMENTO_AJUSTE.CODI_EMP INNER JOIN BETHADBA.EFAJUSTES AS AJUSTES ON AJUSTES.CODI_EMP = MOVIMENTO_AJUSTE.CODI_EMP AND AJUSTES.CODI_AJU = MOVIMENTO_AJUSTE.CODI_AJU INNER JOIN BETHADBA.GEESTADO AS ESTADO ON ESTADO.CODIGO_UF = MOVIMENTO_AJUSTE.CODIGO_UF, LATERAL(SELECT ESTADO.SIGLA_UF || ' - ' || AJUSTES.NOME_AJU AS DESCRICAO FROM DSDBA.DUMMY) AS TDAUX WHERE MOVIMENTO_AJUSTE.CODI_EMP = {cod_emp} AND MOVIMENTO_AJUSTE.DATA_AJUSTE >= {data_inicio} AND MOVIMENTO_AJUSTE.DATA_AJUSTE <= {data_fim} AND AJUSTES.OPER_AJU = 4 AND AJUSTES.CODI_IMP = 9 AND ESTADO.SIGLA_UF NOT IN ('EX', EMPRESA.ESTA_EMP) UNION ALL SELECT CAST(3 AS INTEGER) AS QUADRO, TDAUX.DESCRICAO AS DESCRICAO, MOVIMENTO_AJUSTE.CODIGO_UF AS CODIGO_ESTADO, 0 AS BASE_CALCULO, MOVIMENTO_AJUSTE.VALOR AS VALOR FROM BETHADBA.EFMOVIMENTO_AJUSTE_ESTADUAL_RO AS MOVIMENTO_AJUSTE INNER JOIN BETHADBA.GEEMPRE AS EMPRESA ON EMPRESA.CODI_EMP = MOVIMENTO_AJUSTE.CODI_EMP INNER JOIN BETHADBA.EFAJUSTES AS AJUSTES ON AJUSTES.CODI_EMP = MOVIMENTO_AJUSTE.CODI_EMP AND AJUSTES.CODI_AJU = MOVIMENTO_AJUSTE.CODI_AJU INNER JOIN BETHADBA.GEESTADO AS ESTADO ON ESTADO.CODIGO_UF = MOVIMENTO_AJUSTE.CODIGO_UF, LATERAL(SELECT ESTADO.SIGLA_UF || ' - ' || AJUSTES.NOME_AJU AS DESCRICAO FROM DSDBA.DUMMY) AS TDAUX WHERE MOVIMENTO_AJUSTE.CODI_EMP = {cod_emp} AND MOVIMENTO_AJUSTE.DATA_AJUSTE >= {data_inicio} AND MOVIMENTO_AJUSTE.DATA_AJUSTE <= {data_fim} AND AJUSTES.OPER_AJU = 4 AND AJUSTES.CODI_IMP = 9 AND ESTADO.SIGLA_UF NOT IN ('EX', EMPRESA.ESTA_EMP) UNION ALL SELECT CAST(3 AS INTEGER) AS QUADRO, TDAUX.DESCRICAO AS DESCRICAO, MOVIMENTO_AJUSTE.CODIGO_UF AS CODIGO_ESTADO, 0 AS BASE_CALCULO, MOVIMENTO_AJUSTE.VALOR AS VALOR FROM BETHADBA.EFMOVIMENTO_AJUSTE_ESTADUAL_RR AS MOVIMENTO_AJUSTE INNER JOIN BETHADBA.GEEMPRE AS EMPRESA ON EMPRESA.CODI_EMP = MOVIMENTO_AJUSTE.CODI_EMP INNER JOIN BETHADBA.EFAJUSTES AS AJUSTES ON AJUSTES.CODI_EMP = MOVIMENTO_AJUSTE.CODI_EMP AND AJUSTES.CODI_AJU = MOVIMENTO_AJUSTE.CODI_AJU INNER JOIN BETHADBA.GEESTADO AS ESTADO ON ESTADO.CODIGO_UF = MOVIMENTO_AJUSTE.CODIGO_UF, LATERAL(SELECT ESTADO.SIGLA_UF || ' - ' || AJUSTES.NOME_AJU AS DESCRICAO FROM DSDBA.DUMMY) AS TDAUX WHERE MOVIMENTO_AJUSTE.CODI_EMP = {cod_emp} AND MOVIMENTO_AJUSTE.DATA_AJUSTE >= {data_inicio} AND MOVIMENTO_AJUSTE.DATA_AJUSTE <= {data_fim} AND AJUSTES.OPER_AJU = 4 AND AJUSTES.CODI_IMP = 9 AND ESTADO.SIGLA_UF NOT IN ('EX', EMPRESA.ESTA_EMP) UNION ALL SELECT CAST(3 AS INTEGER) AS QUADRO, TDAUX.DESCRICAO AS DESCRICAO, MOVIMENTO_AJUSTE.CODIGO_UF AS CODIGO_ESTADO, 0 AS BASE_CALCULO, MOVIMENTO_AJUSTE.VALOR AS VALOR FROM BETHADBA.EFMOVIMENTO_AJUSTE_ESTADUAL_SC AS MOVIMENTO_AJUSTE INNER JOIN BETHADBA.GEEMPRE AS EMPRESA ON EMPRESA.CODI_EMP = MOVIMENTO_AJUSTE.CODI_EMP INNER JOIN BETHADBA.EFAJUSTES AS AJUSTES ON AJUSTES.CODI_EMP = MOVIMENTO_AJUSTE.CODI_EMP AND AJUSTES.CODI_AJU = MOVIMENTO_AJUSTE.CODI_AJU INNER JOIN BETHADBA.GEESTADO AS ESTADO ON ESTADO.CODIGO_UF = MOVIMENTO_AJUSTE.CODIGO_UF, LATERAL(SELECT ESTADO.SIGLA_UF || ' - ' || AJUSTES.NOME_AJU AS DESCRICAO FROM DSDBA.DUMMY) AS TDAUX WHERE MOVIMENTO_AJUSTE.CODI_EMP = {cod_emp} AND MOVIMENTO_AJUSTE.DATA_AJUSTE >= {data_inicio} AND MOVIMENTO_AJUSTE.DATA_AJUSTE <= {data_fim} AND AJUSTES.OPER_AJU = 4 AND AJUSTES.CODI_IMP = 9 AND ESTADO.SIGLA_UF NOT IN ('EX', EMPRESA.ESTA_EMP) UNION ALL SELECT CAST(3 AS INTEGER) AS QUADRO, TDAUX.DESCRICAO AS DESCRICAO, MOVIMENTO_AJUSTE.CODIGO_UF AS CODIGO_ESTADO, 0 AS BASE_CALCULO, MOVIMENTO_AJUSTE.VALOR AS VALOR FROM BETHADBA.EFMOVIMENTO_AJUSTE_ESTADUAL_RJ AS MOVIMENTO_AJUSTE INNER JOIN BETHADBA.GEEMPRE AS EMPRESA ON EMPRESA.CODI_EMP = MOVIMENTO_AJUSTE.CODI_EMP INNER JOIN BETHADBA.EFAJUSTES AS AJUSTES ON AJUSTES.CODI_EMP = MOVIMENTO_AJUSTE.CODI_EMP AND AJUSTES.CODI_AJU = MOVIMENTO_AJUSTE.CODI_AJU INNER JOIN BETHADBA.GEESTADO AS ESTADO ON ESTADO.CODIGO_UF = MOVIMENTO_AJUSTE.CODIGO_UF, LATERAL(SELECT ESTADO.SIGLA_UF || ' - ' || AJUSTES.NOME_AJU AS DESCRICAO FROM DSDBA.DUMMY) AS TDAUX WHERE MOVIMENTO_AJUSTE.CODI_EMP = {cod_emp} AND MOVIMENTO_AJUSTE.DATA_AJUSTE >= {data_inicio} AND MOVIMENTO_AJUSTE.DATA_AJUSTE <= {data_fim} AND AJUSTES.OPER_AJU = 4 AND AJUSTES.CODI_IMP = 9 AND ESTADO.SIGLA_UF NOT IN ('EX', EMPRESA.ESTA_EMP) UNION ALL SELECT CAST(3 AS INTEGER) AS QUADRO, TDAUX.DESCRICAO AS DESCRICAO, MOVIMENTO_AJUSTE.CODIGO_UF AS CODIGO_ESTADO, 0 AS BASE_CALCULO, MOVIMENTO_AJUSTE.VALOR AS VALOR FROM BETHADBA.EFMOVIMENTO_AJUSTE_ESTADUAL_TO AS MOVIMENTO_AJUSTE INNER JOIN BETHADBA.GEEMPRE AS EMPRESA ON EMPRESA.CODI_EMP = MOVIMENTO_AJUSTE.CODI_EMP INNER JOIN BETHADBA.EFAJUSTES AS AJUSTES ON AJUSTES.CODI_EMP = MOVIMENTO_AJUSTE.CODI_EMP AND AJUSTES.CODI_AJU = MOVIMENTO_AJUSTE.CODI_AJU INNER JOIN BETHADBA.GEESTADO AS ESTADO ON ESTADO.CODIGO_UF = MOVIMENTO_AJUSTE.CODIGO_UF, LATERAL(SELECT ESTADO.SIGLA_UF || ' - ' || AJUSTES.NOME_AJU AS DESCRICAO FROM DSDBA.DUMMY) AS TDAUX WHERE MOVIMENTO_AJUSTE.CODI_EMP = {cod_emp} AND MOVIMENTO_AJUSTE.DATA_AJUSTE >= {data_inicio} AND MOVIMENTO_AJUSTE.DATA_AJUSTE <= {data_fim} AND AJUSTES.OPER_AJU = 4 AND AJUSTES.CODI_IMP = 9 AND ESTADO.SIGLA_UF NOT IN ('EX', EMPRESA.ESTA_EMP) UNION ALL SELECT CAST(3 AS INTEGER) AS QUADRO, TDAUX.DESCRICAO AS DESCRICAO, MOVIMENTO_AJUSTE.CODIGO_UF AS CODIGO_ESTADO, 0 AS BASE_CALCULO, MOVIMENTO_AJUSTE.VALOR AS VALOR FROM BETHADBA.EFMOVIMENTO_AJUSTE_ESTADUAL_RS AS MOVIMENTO_AJUSTE INNER JOIN BETHADBA.GEEMPRE AS EMPRESA ON EMPRESA.CODI_EMP = MOVIMENTO_AJUSTE.CODI_EMP INNER JOIN BETHADBA.EFAJUSTES AS AJUSTES ON AJUSTES.CODI_EMP = MOVIMENTO_AJUSTE.CODI_EMP AND AJUSTES.CODI_AJU = MOVIMENTO_AJUSTE.CODI_AJU INNER JOIN BETHADBA.GEESTADO AS ESTADO ON ESTADO.CODIGO_UF = MOVIMENTO_AJUSTE.CODIGO_UF, LATERAL(SELECT ESTADO.SIGLA_UF || ' - ' || AJUSTES.NOME_AJU AS DESCRICAO FROM DSDBA.DUMMY) AS TDAUX WHERE MOVIMENTO_AJUSTE.CODI_EMP = {cod_emp} AND MOVIMENTO_AJUSTE.DATA_AJUSTE >= {data_inicio} AND MOVIMENTO_AJUSTE.DATA_AJUSTE <= {data_fim} AND AJUSTES.OPER_AJU = 4 AND AJUSTES.CODI_IMP = 9 AND ESTADO.SIGLA_UF NOT IN ('EX', EMPRESA.ESTA_EMP) UNION ALL SELECT CAST(3 AS INTEGER) AS QUADRO, TDAUX.DESCRICAO AS DESCRICAO, MOVIMENTO_AJUSTE.CODIGO_UF AS CODIGO_ESTADO, 0 AS BASE_CALCULO, MOVIMENTO_AJUSTE.VALOR AS VALOR FROM BETHADBA.EFMOVIMENTO_AJUSTE_ESTADUAL_SP AS MOVIMENTO_AJUSTE INNER JOIN BETHADBA.GEEMPRE AS EMPRESA ON EMPRESA.CODI_EMP = MOVIMENTO_AJUSTE.CODI_EMP INNER JOIN BETHADBA.EFAJUSTES AS AJUSTES ON AJUSTES.CODI_EMP = MOVIMENTO_AJUSTE.CODI_EMP AND AJUSTES.CODI_AJU = MOVIMENTO_AJUSTE.CODI_AJU INNER JOIN BETHADBA.GEESTADO AS ESTADO ON ESTADO.CODIGO_UF = MOVIMENTO_AJUSTE.CODIGO_UF, LATERAL(SELECT ESTADO.SIGLA_UF || ' - ' || AJUSTES.NOME_AJU AS DESCRICAO FROM DSDBA.DUMMY) AS TDAUX WHERE MOVIMENTO_AJUSTE.CODI_EMP = {cod_emp} AND MOVIMENTO_AJUSTE.DATA_AJUSTE >= {data_inicio} AND MOVIMENTO_AJUSTE.DATA_AJUSTE <= {data_fim} AND AJUSTES.OPER_AJU = 4 AND AJUSTES.CODI_IMP = 9 AND ESTADO.SIGLA_UF NOT IN ('EX', EMPRESA.ESTA_EMP) UNION ALL SELECT CAST(3 AS INTEGER) AS QUADRO, TDAUX.DESCRICAO AS DESCRICAO, TDESTADO.CODIGO_UF AS CODIGO_ESTADO, 0 AS BASE_CALCULO, SUBTRI.DEVOLUCAO_FECOP_ICMS_ST AS VALOR FROM BETHADBA.EFSDOIMP_SUBTRI_POR_UF_SC AS SUBTRI INNER JOIN BETHADBA.GEEMPRE AS EMPRESA ON EMPRESA.CODI_EMP = SUBTRI.CODI_EMP, LATERAL(SELECT COALESCE(MAX(ESTADO.CODIGO_UF), 0) AS CODIGO_UF FROM BETHADBA.GEESTADO AS ESTADO WHERE ESTADO.SIGLA_UF = SUBTRI.SIGLA_UF) AS TDESTADO, LATERAL(SELECT SUBTRI.SIGLA_UF || ' - ' || 'Devolução referente ao FECOP-PR – ICMS ST' AS DESCRICAO FROM DSDBA.DUMMY) AS TDAUX WHERE SUBTRI.CODI_EMP = {cod_emp} AND MONTH(SUBTRI.DATA_SIM) = MONTH(DATE({data_inicio})) AND YEAR(SUBTRI.DATA_SIM) = YEAR(DATE({data_inicio})) AND SUBTRI.PDIC_SIM = 6 AND SUBTRI.CODI_IMP = 9 AND SUBTRI.SIGLA_UF NOT IN ('EX', EMPRESA.ESTA_EMP) AND SUBTRI.DEVOLUCAO_FECOP_ICMS_ST > 0 UNION ALL SELECT CAST(3 AS INTEGER) AS QUADRO, TDAUX.DESCRICAO AS DESCRICAO, TDESTADO.CODIGO_UF AS CODIGO_ESTADO, 0 AS BASE_CALCULO, SALDO_IMPOSTO.ESTORNO_DEVOLUCOES_FCP_INTERESTADUAL AS VALOR FROM BETHADBA.EFSDOIMP_SUBTRI_POR_UF AS SALDO_IMPOSTO INNER JOIN BETHADBA.GEEMPRE AS EMPRESA ON EMPRESA.CODI_EMP = SALDO_IMPOSTO.CODI_EMP, LATERAL(SELECT COALESCE(MAX(ESTADO.CODIGO_UF), 0) AS CODIGO_UF FROM BETHADBA.GEESTADO AS ESTADO WHERE ESTADO.SIGLA_UF = SALDO_IMPOSTO.SIGLA_UF) AS TDESTADO, LATERAL(SELECT SALDO_IMPOSTO.SIGLA_UF || ' - ESTORNO DAS DEVOLUÇÕES DO FUNDO DE COMBATE A POBREZA INTERESTADUAL' AS DESCRICAO FROM DSDBA.DUMMY) AS TDAUX WHERE SALDO_IMPOSTO.CODI_EMP = {cod_emp} AND SALDO_IMPOSTO.DATA_SIM BETWEEN {data_inicio} AND {data_fim} AND SALDO_IMPOSTO.PDIC_SIM = 6 AND SALDO_IMPOSTO.CODI_IMP = 9 AND SALDO_IMPOSTO.ESTORNO_DEVOLUCOES_FCP_INTERESTADUAL > 0 AND EMPRESA.ESTA_EMP = 'SP') AS TDTABELA, LATERAL(SELECT GEESTADO.SIGLA_UF AS SIGLA_ESTADO, GEESTADO.NOME_UF AS NOME_ESTADO FROM BETHADBA.GEESTADO AS GEESTADO WHERE GEESTADO.CODIGO_UF = TDTABELA.CODIGO_ESTADO) AS TDGEESTADO, LATERAL(SELECT CASE WHEN TDTABELA.QUADRO IN (1) THEN TDGEESTADO.NOME_ESTADO ELSE TDTABELA.DESCRICAO END DESCRICAO FROM DSDBA.DUMMY) AS TDAUX, LATERAL(SELECT SUM(COALESCE(IMPOSTO.VLOR_ISA, 0)) AS VALOR, SUM(COALESCE(IMPOSTO.BCAL_ISA, 0)) AS BASE_CALCULO FROM BETHADBA.EFIMPSAI IMPOSTO INNER JOIN BETHADBA.EFSAIDAS AS SAIDAS ON SAIDAS.CODI_EMP = IMPOSTO.CODI_EMP AND SAIDAS.CODI_SAI = IMPOSTO.CODI_SAI INNER JOIN BETHADBA.GEEMPRE AS EMPRESA ON EMPRESA.CODI_EMP = SAIDAS.CODI_EMP WHERE SAIDAS.CODI_EMP = {cod_emp} AND SAIDAS.DSAI_SAI BETWEEN {data_inicio} AND {data_fim} AND SAIDAS.CODI_NAT = 5667 AND IMPOSTO.CODI_IMP = 9 AND EMPRESA.ESTA_EMP = 'SP') AS TD_SUBTRI_5667 GROUP BY TDTABELA.QUADRO, TDAUX.DESCRICAO, TDTABELA.CODIGO_ESTADO, TDGEESTADO.SIGLA_ESTADO, TDGEESTADO.NOME_ESTADO ORDER BY TDTABELA.QUADRO, TDGEESTADO.SIGLA_ESTADO
"""




# Consulta para buscar a lista de todas as alíquotas distintas no período.
SQL_GET_ALIQUOTAS_TEMPLATE = """
SELECT DISTINCT ALIQ_IEN AS ALIQ 
FROM BETHADBA.EFIMPENT I, BETHADBA.EFENTRADAS E 
WHERE E.CODI_EMP = {cod_emp} AND E.CODI_EMP = I.CODI_EMP AND E.CODI_ENT = I.CODI_ENT 
  AND E.DENT_ENT >= '{data_inicio}' AND E.DENT_ENT <= '{data_fim}' AND I.CODI_IMP = 1 
UNION 
SELECT DISTINCT ALIQ_ISA AS ALIQ 
FROM BETHADBA.EFIMPSAI I, BETHADBA.EFSAIDAS S 
WHERE S.CODI_EMP = {cod_emp} AND S.CODI_EMP = I.CODI_EMP AND S.CODI_SAI = I.CODI_SAI 
  AND S.DSAI_SAI >= '{data_inicio}' AND S.DSAI_SAI <= '{data_fim}' AND S.NOVO_ECF = 'N' AND I.CODI_IMP = 1 
UNION 
SELECT DISTINCT I.ALIQUOTA AS ALIQ 
FROM BETHADBA.EFECF_REDUCAO_Z AS R 
INNER JOIN BETHADBA.EFECF_REDUCAO_Z_IMPOSTOS AS I ON I.CODI_EMP = R.CODI_EMP AND I.I_REDUCAO = R.I_REDUCAO 
WHERE R.CODI_EMP = {cod_emp} AND R.DATA_REDUCAO BETWEEN '{data_inicio}' AND '{data_fim}' AND I.CODI_IMP = 1
UNION 
SELECT DISTINCT IMPOSTOS_DETALHAMENTO.ALIQUOTA AS ALIQ 
FROM BETHADBA.EFCUPOM_FISCAL_ELETRONICO AS CUPOM 
INNER JOIN BETHADBA.EFCUPOM_FISCAL_ELETRONICO_IMPOSTOS_DETALHAMENTO AS IMPOSTOS_DETALHAMENTO ON IMPOSTOS_DETALHAMENTO.CODI_EMP = CUPOM.CODI_EMP AND IMPOSTOS_DETALHAMENTO.I_CFE = CUPOM.I_CFE 
WHERE CUPOM.CODI_EMP = {cod_emp} AND CUPOM.DATA_CFE BETWEEN '{data_inicio}' AND '{data_fim}' AND IMPOSTOS_DETALHAMENTO.CODI_IMP = 1 
ORDER BY 1
"""

# Template para buscar os totais de Base de Cálculo e Imposto para UMA alíquota específica.
SQL_GET_VALORES_POR_ALIQUOTA_TEMPLATE = """
SELECT 
    SUM(TD_IMPENT.BCAL_IEN) AS BCALE, 
    SUM(TD_IMPENT.VLOR_IEN) AS VICME, 
    SUM(TDAUX.BCALS) AS BCALS, 
    SUM(TDAUX.VICMS) AS VICMS 
FROM BETHADBA.GEEMPRE G, 
LATERAL(
    SELECT COALESCE(SUM(I.BCAL_IEN), 0) AS BCAL_IEN, COALESCE(SUM(I.VLOR_IEN), 0) AS VLOR_IEN 
    FROM BETHADBA.EFIMPENT I, BETHADBA.EFENTRADAS E 
    WHERE E.CODI_EMP = G.CODI_EMP AND I.CODI_ENT = E.CODI_ENT AND I.CODI_EMP = E.CODI_EMP 
      AND E.DENT_ENT >= '{data_inicio}' AND E.DENT_ENT <= '{data_fim}' 
      AND I.CODI_IMP = 1 AND I.ALIQ_IEN = {aliquota}
) AS TD_IMPENT, 
LATERAL(
    SELECT COALESCE(SUM(I.BCAL_ISA), 0) AS BCAL_ISA, COALESCE(SUM(I.VLOR_ISA), 0) AS VLOR_ISA 
    FROM BETHADBA.EFIMPSAI I, BETHADBA.EFSAIDAS S 
    WHERE S.CODI_EMP = G.CODI_EMP AND I.CODI_SAI = S.CODI_SAI AND I.CODI_EMP = S.CODI_EMP 
      AND S.DSAI_SAI >= '{data_inicio}' AND S.DSAI_SAI <= '{data_fim}' 
      AND S.SITUACAO_SAI NOT IN(2, 3) AND S.NOVO_ECF = 'N' AND I.CODI_IMP = 1 AND I.ALIQ_ISA = {aliquota}
) AS TD_IMPSAI, 
LATERAL(
    SELECT COALESCE(SUM(I.BASE_CALCULO), 0) AS BCAL_RDZ, COALESCE(SUM(I.IMPOSTO), 0) AS VLOR_RDZ 
    FROM BETHADBA.EFECF_REDUCAO_Z AS R 
    INNER JOIN BETHADBA.EFECF_REDUCAO_Z_IMPOSTOS AS I ON I.CODI_EMP = R.CODI_EMP AND I.I_REDUCAO = R.I_REDUCAO 
    WHERE R.CODI_EMP = G.CODI_EMP AND R.DATA_REDUCAO BETWEEN '{data_inicio}' AND '{data_fim}' 
      AND I.CODI_IMP = 1 AND I.ALIQUOTA = {aliquota}
) AS TD_IMPRDZ, 
LATERAL(
    SELECT COALESCE(SUM(IMPOSTOS_DETALHAMENTO.BASE_CALCULO), 0) AS BCAL_CFE, COALESCE(SUM(IMPOSTOS_DETALHAMENTO.VALOR_IMPOSTO), 0) AS VLOR_CFE 
    FROM BETHADBA.EFCUPOM_FISCAL_ELETRONICO AS CUPOM 
    INNER JOIN BETHADBA.EFCUPOM_FISCAL_ELETRONICO_IMPOSTOS_DETALHAMENTO AS IMPOSTOS_DETALHAMENTO ON IMPOSTOS_DETALHAMENTO.CODI_EMP = CUPOM.CODI_EMP AND IMPOSTOS_DETALHAMENTO.I_CFE = CUPOM.I_CFE 
    WHERE CUPOM.CODI_EMP = G.CODI_EMP AND CUPOM.DATA_CFE BETWEEN '{data_inicio}' AND '{data_fim}' 
      AND IMPOSTOS_DETALHAMENTO.CODI_IMP = 1 AND IMPOSTOS_DETALHAMENTO.ALIQUOTA = {aliquota}
) AS TD_IMPCFE, 
LATERAL(
    SELECT COALESCE(TD_IMPSAI.BCAL_ISA, 0) + COALESCE(TD_IMPRDZ.BCAL_RDZ, 0) + COALESCE(TD_IMPCFE.BCAL_CFE, 0) AS BCALS, 
           COALESCE(TD_IMPSAI.VLOR_ISA, 0) + COALESCE(TD_IMPRDZ.VLOR_RDZ, 0) + COALESCE(TD_IMPCFE.VLOR_CFE, 0) AS VICMS 
    FROM DSDBA.DUMMY
) AS TDAUX 
WHERE G.CODI_EMP = {cod_emp}
"""


# NOVA CONSULTA PARA BUSCAR O SALDO ANTERIOR CORRETAMENTE
SQL_GET_SALDO_ANTERIOR_TEMPLATE = """
SELECT
    SUM(TDDADOS.SALDO_CREDOR_ANTERIOR) AS SALDO_CREDOR_ANTERIOR,
    SUM(TDDADOS.SALDO_A_DIFERIR) AS SALDO_A_DIFERIR
FROM (
    SELECT
        SUM(CASE WHEN P.CONSIDERA_CREDOR_ANTERIOR_ICMS_PAR = 'N' AND P.REST_PAR = 3 AND G.ESTA_EMP IN ('SC', 'MT') THEN 0 ELSE COALESCE(A.SCRE_SIM, 0) END) +
        SUM(CASE WHEN 'SP' = 'RS' THEN COALESCE(VDI18_SIM, 0) + COALESCE(VDI19_SIM, 0) + COALESCE(VDI54_SIM, 0) ELSE 0 END) AS SALDO_CREDOR_ANTERIOR,
        SUM(A.SDIF_SIM) AS SALDO_A_DIFERIR
    FROM BETHADBA.EFSDOIMP AS A
    INNER JOIN BETHADBA.GEEMPRE AS G ON G.CODI_EMP = A.CODI_EMP
    INNER JOIN BETHADBA.EFPARAMETRO_VIGENCIA AS P ON P.CODI_EMP = A.CODI_EMP
    WHERE A.DATA_SIM = '{data_anterior_str}'
      AND P.VIGENCIA_PAR = DSDBA.D_BUSCA_VIGENCIA_PARAMETRO({cod_emp}, DATE('{data_inicio_str}'))
      AND A.CODI_IMP = 1
      AND ((G.ESTA_EMP <> 'TO' AND G.CODI_EMP = {cod_emp}) OR (G.ESTA_EMP = 'TO' AND ((LEFT(G.CGCE_EMP, 8) = '') OR (G.CODI_EMP = {cod_emp})) AND (P.CENTRAL_PAR IN (2, 3) OR '' = '')))
      AND A.PDIC_SIM IN (3, 5, 6, 7, 8)
    UNION ALL
    SELECT
        COALESCE(SUM(SALDO_IMPOSTO_RS.SALDO_CREDOR_ANTERIOR_ICMS_ST), 0) AS SALDO_CREDOR_ANTERIOR,
        0 AS SALDO_A_DIFERIR
    FROM BETHADBA.EFSDOIMP_ESTADUAL_RS AS SALDO_IMPOSTO_RS
    WHERE SALDO_IMPOSTO_RS.CODI_EMP = {cod_emp}
      AND SALDO_IMPOSTO_RS.DATA_SIM BETWEEN '{data_inicio_str}' AND '{data_fim_str}'
      AND SALDO_IMPOSTO_RS.CODI_IMP = 1
) AS TDDADOS
"""




# --- CONFIGURAÇÕES ---

CONN_STR = (
    "DRIVER={SQL Anywhere 17};"
    "HOST=NOTE-GO-273.go.local:2638;"
    "DBN=contabil;"
    "UID=ESTATISTICA002;"
    "PWD=U0T/wq6OdZ0oYSpvJRWGfg==;"
)

getcontext().prec = 18
CURRENCY_FORMAT = '#,##0.00'
DATE_FORMAT = '%Y-%m-%d'
DISPLAY_DATE_FORMAT = '%d/%m/%Y'
DEFAULT_FOLHA_INICIAL = 1
DEFAULT_LIVRO_NUM = "001"
CODIGOS_LIVRO_PRIORIDADE = [1, 2, 6, 5, 3, 4, 8, 0, 9, 10, 11, 13]
TIPO_LIVRO_PREFERIDO = 4
PDIC_SIM_DEFAULT = 6

# --- CLASSES DE GERAÇÃO DE RELATÓRIOS ---

class ReportFormatter:
    @staticmethod
    def formatar_numero_pdf(valor):
        if valor is None or not isinstance(valor, (Decimal, int, float, str)) or Decimal(str(valor).strip()) == 0: return "0,00"
        return "{:,.2f}".format(Decimal(str(valor).strip())).replace(",", "X").replace(".", ",").replace("X", ".")
    @staticmethod
    def formatar_titulo_espacado(texto): return " ".join(texto)
    @staticmethod
    def _calcular_subtotais(dados, is_saida):
        subtotais = {'estado': {'vcon': Decimal(0), 'bcal': Decimal(0), 'vicm': Decimal(0), 'iicm': Decimal(0), 'oicm': Decimal(0)}, 'outros_estados': {'vcon': Decimal(0), 'bcal': Decimal(0), 'vicm': Decimal(0), 'iicm': Decimal(0), 'oicm': Decimal(0)}, 'exterior': {'vcon': Decimal(0), 'bcal': Decimal(0), 'vicm': Decimal(0), 'iicm': Decimal(0), 'oicm': Decimal(0)}}
        prefixos = ('1', '2', '3') if not is_saida else ('5', '6', '7')
        map_prefixo = {prefixos[0]: 'estado', prefixos[1]: 'outros_estados', prefixos[2]: 'exterior'}
        for row in dados:
            cat = map_prefixo.get(str(row.CODINAT)[0])
            if cat:
                for k in subtotais[cat]: subtotais[cat][k] += Decimal(str(getattr(row, k.upper()) or 0)) # Garantir conversão
        total_geral = {k: sum(sub[k] for sub in subtotais.values()) for k in subtotais['estado']}
        return subtotais['estado'], subtotais['outros_estados'], subtotais['exterior'], total_geral

class PDFGenerator:
    """Classe responsável pela geração de relatórios em PDF"""
    def __init__(self): self.formatter = ReportFormatter()
    
    def gerar_pagina_livro_pdf(self, tipo_pagina, dados, empresa, insc_est, cnpj, folha, livro, periodo, is_saida=False):
        elementos = []
        styles = getSampleStyleSheet()
        titulo_style = ParagraphStyle('TituloPrincipal', parent=styles['Normal'], fontSize=12, alignment=TA_CENTER, fontName='Helvetica-Bold')
        subtitulo_style = ParagraphStyle('Subtitulo', parent=styles['Normal'], fontSize=11, alignment=TA_CENTER, fontName='Helvetica-Bold', spaceAfter=2 * mm)
        style_center_bold = ParagraphStyle(name='CenterBold', parent=styles['Normal'], alignment=TA_CENTER, fontName='Helvetica-Bold', fontSize=10.8)
        style_left_bold = ParagraphStyle(name='LeftBold', parent=styles['Normal'], alignment=TA_LEFT, fontName='Helvetica-Bold', fontSize=9)
        elementos.append(Paragraph(self.formatter.formatar_titulo_espacado("LIVRO REGISTRO DE APURAÇÃO DO ICMS - RAICMS - MODELO P9"), titulo_style))
        elementos.append(Paragraph(self.formatter.formatar_titulo_espacado("REGISTRO DE APURAÇÃO DO ICMS"), subtitulo_style))
        empresa_data = [[f"FIRMA: {empresa}", f"CNPJ: {cnpj}"], [f"INSC.EST.: {insc_est}", ""], [f"FOLHA: {folha}  LIVRO: {livro}", f"MÊS OU PERÍODO/ANO: {periodo}"]]
        empresa_table = Table(empresa_data, colWidths=[13 * cm, 14.7 * cm])
        empresa_table.setStyle(TableStyle([('FONTNAME', (0, 0), (-1, -1), 'Helvetica'), ('FONTSIZE', (0, 0), (-1, -1), 9), ('ALIGN', (0, 0), (-1, -1), 'LEFT'), ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'), ('BOX', (0, 0), (-1, -1), 1, colors.black), ('GRID', (0, 0), (-1, -1), 1, colors.black), ('LEFTPADDING', (0, 0), (-1, -1), 4)]))
        elementos.append(empresa_table)
        elementos.append(Spacer(1, 2 * mm))
        header_imposto = "IMPOSTO\nCREDITADO" if not is_saida else "IMPOSTO\nDEBITADO"
        header_op_imposto = "OPERAÇÕES COM CRÉDITO DO IMPOSTO" if not is_saida else "OPERAÇÕES COM DÉBITO DO IMPOSTO"
        tabela_dados = [[Paragraph(f'<b>{tipo_pagina}</b>', style_center_bold)], ['CODIFICAÇÃO', '', 'VALORES\nCONTÁBEIS', 'ICMS VALORES FISCAIS'], ['CONTÁBIL', 'FISCAL', '', header_op_imposto, '', 'OPERAÇÕES SEM DÉBITO DO IMPOSTO'], ['', '', '', 'BASE DE CÁLCULO', header_imposto, 'ISENTAS OU NÃO\nTRIBUTADAS', 'OUTRAS']]
        for row in sorted(dados, key=lambda x: x.CODINAT):
            tabela_dados.append(["", f"{str(row.CODINAT)[0]}-{str(row.CODINAT)[1:]}", self.formatter.formatar_numero_pdf(row.VCON), self.formatter.formatar_numero_pdf(row.BCAL), self.formatter.formatar_numero_pdf(row.VICM), self.formatter.formatar_numero_pdf(row.IICM), self.formatter.formatar_numero_pdf(row.OICM)])
        subtotais_estado, subtotais_outros_estados, subtotais_exterior, total_geral = self.formatter._calcular_subtotais(dados, is_saida)
        tabela_dados.append([Paragraph('SUBTOTAIS ENTRADAS' if not is_saida else 'SUBTOTAIS SAÍDAS', style_left_bold)])
        prefixo_cfop1, prefixo_cfop2, prefixo_cfop3 = ("1.000", "2.000", "3.000") if not is_saida else ("5.000", "6.000", "7.000")
        tabela_dados.extend([[f'{prefixo_cfop1} - DO ESTADO', '', self.formatter.formatar_numero_pdf(subtotais_estado['vcon']), self.formatter.formatar_numero_pdf(subtotais_estado['bcal']), self.formatter.formatar_numero_pdf(subtotais_estado['vicm']), self.formatter.formatar_numero_pdf(subtotais_estado['iicm']), self.formatter.formatar_numero_pdf(subtotais_estado['oicm'])], [f'{prefixo_cfop2} - DE OUTROS ESTADOS', '', self.formatter.formatar_numero_pdf(subtotais_outros_estados['vcon']), self.formatter.formatar_numero_pdf(subtotais_outros_estados['bcal']), self.formatter.formatar_numero_pdf(subtotais_outros_estados['vicm']), self.formatter.formatar_numero_pdf(subtotais_outros_estados['iicm']), self.formatter.formatar_numero_pdf(subtotais_outros_estados['oicm'])], [f'{prefixo_cfop3} - DO EXTERIOR', '', self.formatter.formatar_numero_pdf(subtotais_exterior['vcon']), self.formatter.formatar_numero_pdf(subtotais_exterior['bcal']), self.formatter.formatar_numero_pdf(subtotais_exterior['vicm']), self.formatter.formatar_numero_pdf(subtotais_exterior['iicm']), self.formatter.formatar_numero_pdf(subtotais_exterior['oicm'])], [Paragraph('TOTAIS', style_left_bold), '', self.formatter.formatar_numero_pdf(total_geral['vcon']), self.formatter.formatar_numero_pdf(total_geral['bcal']), self.formatter.formatar_numero_pdf(total_geral['vicm']), self.formatter.formatar_numero_pdf(total_geral['iicm']), self.formatter.formatar_numero_pdf(total_geral['oicm'])]])
        tabela = Table(tabela_dados, colWidths=[2.8*cm, 2.8*cm, 3.5*cm, 3.5*cm, 3.5*cm, 4.2*cm, 3.5*cm])
        tabela.setStyle(self._criar_estilo_tabela_dados(len(dados)))
        elementos.append(tabela)
        return elementos
    
    def _criar_estilo_tabela_dados(self, num_dados):
        style = TableStyle([('FONTNAME', (0, 0), (-1, -1), 'Helvetica'), ('FONTSIZE', (0, 0), (-1, -1), 8), ('ALIGN', (0, 0), (-1, -1), 'CENTER'), ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'), ('BOX', (0, 0), (-1, -1), 1, colors.black), ('GRID', (0, 0), (-1, -1), 1, colors.black), ('LEFTPADDING', (0, 0), (-1, -1), 2), ('RIGHTPADDING', (0, 0), (-1, -1), 2), ('TOPPADDING', (0, 0), (-1, -1), 2), ('BOTTOMPADDING', (0, 0), (-1, -1), 2), ('SPAN', (0, 0), (-1, 0)), ('SPAN', (0, 1), (1, 1)), ('SPAN', (3, 1), (-1, 1)), ('SPAN', (0, 2), (0, 3)), ('SPAN', (1, 2), (1, 3)), ('SPAN', (2, 1), (2, 3)), ('SPAN', (3, 2), (4, 2)), ('SPAN', (5, 2), (-1, 2)), ('ALIGN', (2, 4), (-1, -1), 'RIGHT'), ('ALIGN', (0, 4), (1, num_dados + 3), 'CENTER'), ('FONTNAME', (0, 0), (-1, 3), 'Helvetica-Bold')])
        total_start_row = num_dados + 4
        for i in range(total_start_row, total_start_row + 5):
            style.add('FONTNAME', (0, i), (-1, i), 'Helvetica-Bold')
            style.add('ALIGN', (0, i), (1, i), 'LEFT')
            style.add('SPAN', (0, i), (1, i))
        return style

    def _gerar_tabela_resumo_aliquota_pdf(self, dados_aliquota):
        if not dados_aliquota:
            return []
            
        styles = getSampleStyleSheet()
        style_header = ParagraphStyle(name='ResumoAliquotaHeader', parent=styles['Normal'], alignment=TA_CENTER, fontName='Helvetica-Bold', fontSize=8)
        style_content_right = ParagraphStyle(name='ResumoAliquotaContentR', parent=styles['Normal'], alignment=TA_RIGHT, fontSize=8)
        style_content_center = ParagraphStyle(name='ResumoAliquotaContentC', parent=styles['Normal'], alignment=TA_CENTER, fontSize=8)
        style_left_bold_small = ParagraphStyle(name='LeftBoldSmall', parent=styles['Normal'], alignment=TA_LEFT, fontName='Helvetica-Bold', fontSize=8)
        style_center_bold_small = ParagraphStyle(name='CenterBoldSmall', parent=styles['Normal'], alignment=TA_CENTER, fontName='Helvetica-Bold', fontSize=8)

        tabela_data = [
            [Paragraph('<b>R E S U M O   P O R   A L Í Q U O T A</b>', style_left_bold_small)],
            ['', Paragraph('<b>ENTRADAS</b>', style_center_bold_small), '', Paragraph('<b>SAÍDAS</b>', style_center_bold_small), ''],
            [Paragraph('ALÍQUOTA (%)', style_header), Paragraph('BASE DE CÁLCULO', style_header), Paragraph('IMPOSTO', style_header), Paragraph('BASE DE CÁLCULO', style_header), Paragraph('IMPOSTO', style_header)]
        ]

        total_bcale = Decimal(0)
        total_vicme = Decimal(0)
        total_bcals = Decimal(0)
        total_vicms = Decimal(0)
        
        for r in dados_aliquota:
            tabela_data.append([
                Paragraph(f"{self.formatter.formatar_numero_pdf(r.ALIQUOTA)}", style_content_center),
                Paragraph(f"{self.formatter.formatar_numero_pdf(r.BCALE)}", style_content_right),
                Paragraph(f"{self.formatter.formatar_numero_pdf(r.VICME)}", style_content_right),
                Paragraph(f"{self.formatter.formatar_numero_pdf(r.BCALS)}", style_content_right),
                Paragraph(f"{self.formatter.formatar_numero_pdf(r.VICMS)}", style_content_right),
            ])
            total_bcale += r.BCALE
            total_vicme += r.VICME
            total_bcals += r.BCALS
            total_vicms += r.VICMS
        
        tabela_data.append([
            Paragraph("<b>TOTAIS</b>", style_header),
            Paragraph(f"<b>{self.formatter.formatar_numero_pdf(total_bcale)}</b>", style_content_right),
            Paragraph(f"<b>{self.formatter.formatar_numero_pdf(total_vicme)}</b>", style_content_right),
            Paragraph(f"<b>{self.formatter.formatar_numero_pdf(total_bcals)}</b>", style_content_right),
            Paragraph(f"<b>{self.formatter.formatar_numero_pdf(total_vicms)}</b>", style_content_right),
        ])

        tabela = Table(tabela_data, colWidths=[5.56*cm, 5.56*cm, 5.56*cm, 5.56*cm, 5.56*cm])
        tabela.setStyle(TableStyle([
            ('GRID', (0, 1), (-1, -1), 1, colors.black), 
            ('BOX', (0, 0), (-1, -1), 1, colors.black),
            ('SPAN', (0, 0), (-1, 0)),
            ('SPAN', (1, 1), (2, 1)),
            ('SPAN', (3, 1), (4, 1)),
            ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),
            ('BACKGROUND', (0,1), (-1,2), colors.lightgrey),
            ('BACKGROUND', (-1,-1), (0,-1), colors.lightgrey)
        ]))
        
        return [Spacer(1, 4 * mm), tabela]

    def gerar_pagina_resumo_pdf(self, titulo_relatorio, titulo_pagina, dados_resumo, detalhes, dados_info_comp, dados_resumo_aliquota, empresa, insc_est, cnpj, folha, livro, periodo):
        elementos = []
        r = dados_resumo
        is_st_interestadual = "INTERESTADUAIS" in titulo_pagina.upper()
        is_st = "SUBSTITUIÇÃO" in titulo_pagina.upper()

        soma_outros_debitos = Decimal(0)
        soma_estornos_credito = Decimal(0)
        soma_outros_creditos = Decimal(0)
        soma_estornos_debitos = Decimal(0)

        if hasattr(r, '_fields'):
            r_dict = r._asdict()
        else:
            r_dict = {desc[0]: getattr(r, desc[0]) for desc in r.cursor_description}

        r_decimal = {}
        for k, v in r_dict.items():
            try:
                r_decimal[k.upper()] = Decimal(str(v or 0))
            except (InvalidOperation, TypeError):
                r_decimal[k.upper()] = Decimal(0)
        
        if 'ANTERIOR' in r_decimal: r_decimal['SALDOANT'] = r_decimal.pop('ANTERIOR')
        if 'ESTORNOD' in r_decimal: r_decimal['ESTDEB'] = r_decimal.pop('ESTORNOD')
        if 'ESTORNOC' in r_decimal: r_decimal['ESTCRE'] = r_decimal.pop('ESTORNOC')
        
        required_fields = ['SAIDAS', 'OUTROSD', 'ESTCRE', 'ENTRADAS', 'OUTROSC', 'ESTDEB', 'SALDOANT', 'DEDUCOES', 'DEVEDOR', 'RECOLHER']
        for field in required_fields:
            if field not in r_decimal:
                r_decimal[field] = Decimal(0)

        class ResumoDecimal:
            def __init__(self, data):
                self.__dict__.update(data)
        r = ResumoDecimal(r_decimal)

        if is_st_interestadual:
            subtotal_debito = r.SAIDAS + r.OUTROSD + r.ESTCRE
            subtotal_credito = Decimal(0)
        else:
            soma_outros_debitos = sum(Decimal(str(getattr(d, 'VLOR', 0) or 0)) for d in detalhes.get('outros_debitos', []))
            soma_estornos_credito = sum(Decimal(str(getattr(d, 'VLOR', 0) or 0)) for d in detalhes.get('estornos_credito', []))
            soma_outros_creditos = sum(Decimal(str(getattr(d, 'VLOR', 0) or 0)) for d in detalhes.get('outros_creditos', []))
            soma_estornos_debitos = sum(Decimal(str(getattr(d, 'VLOR', 0) or 0)) for d in detalhes.get('estornos_debitos', []))
            subtotal_debito = r.SAIDAS + (soma_outros_debitos if not is_st else r.OUTROSD) + (soma_estornos_credito if not is_st else r.ESTCRE)
            subtotal_credito = r.ENTRADAS + (soma_outros_creditos if not is_st else r.OUTROSC) + (soma_estornos_debitos if not is_st else r.ESTDEB)
        
        total_credito = subtotal_credito + r.SALDOANT
        saldo_devedor = max(Decimal(0), subtotal_debito - total_credito)
        saldo_credor = max(Decimal(0), total_credito - subtotal_debito)
        imposto_recolher = max(Decimal(0), saldo_devedor - r.DEDUCOES)
        
        styles = getSampleStyleSheet()
        titulo_style = ParagraphStyle('TituloPrincipal', parent=styles['Normal'], fontSize=11, alignment=TA_CENTER, fontName='Helvetica-Bold')
        subtitulo_style = ParagraphStyle('Subtitulo', parent=styles['Normal'], fontSize=9, alignment=TA_CENTER, fontName='Helvetica-Bold', spaceAfter=4 * mm)
        style_center_bold_small = ParagraphStyle(name='CenterBoldSmall', parent=styles['Normal'], alignment=TA_CENTER, fontName='Helvetica-Bold', fontSize=8)
        style_left_normal = ParagraphStyle(name='LeftNormal', parent=styles['Normal'], alignment=TA_LEFT, fontSize=8)
        style_detail = ParagraphStyle(name='Detail', parent=styles['Normal'], alignment=TA_LEFT, fontSize=7, leftIndent=5)
        style_left_bold_small = ParagraphStyle(name='LeftBoldSmall', parent=styles['Normal'], alignment=TA_LEFT, fontName='Helvetica-Bold', fontSize=8)
        def texto_vertical(texto): return Paragraph(f"<b>{'<br/>'.join(list(texto))}</b>", ParagraphStyle(name='Vertical', parent=styles['Normal'], alignment=TA_CENTER, fontName='Helvetica-Bold', fontSize=8, leading=9))
        
        elementos.append(Paragraph(self.formatter.formatar_titulo_espacado("L I V R O   R E G I S T R O   D E   A P U R A Ç Ã O   D O   I C M S"), titulo_style))
        elementos.append(Paragraph(self.formatter.formatar_titulo_espacado(titulo_pagina), subtitulo_style))
        header_data = [['EMPRESA:', Paragraph(empresa, styles['Normal']), '', 'CNPJ:', Paragraph(cnpj, styles['Normal'])], ['INSC.EST.:', Paragraph(insc_est, styles['Normal']), '', 'MES OU PERÍODO/ANO:', Paragraph(periodo, styles['Normal'])], ['FOLHA:', Paragraph(f"{str(folha).zfill(3)}   LIVRO: {str(livro).zfill(3)}", styles['Normal']), '', '', '']]
        header_table = Table(header_data, colWidths=[2.2*cm, 10.8*cm, 0.5*cm, 4*cm, 10*cm])
        header_table.setStyle(TableStyle([('FONTNAME', (0,0), (-1,-1), 'Helvetica'), ('FONTSIZE', (0,0), (-1,-1), 9), ('VALIGN', (0,0), (-1,-1), 'TOP'), ('LEFTPADDING', (0,0), (-1,-1), 1)]))
        elementos.append(header_table)
        elementos.append(Spacer(1, 4 * mm))
        
        main_data, table_style_cmds = [], []
        def add_line(description, aux_value=None, sum_value=None, is_bold=False, is_detail=False):
            p_style = style_left_bold_small if is_bold else (style_detail if is_detail else style_left_normal)
            description_text = f"<i>{description}</i>" if is_detail else description
            row_content = ['', Paragraph(description_text, p_style), '', '', '', '', '', '', self.formatter.formatar_numero_pdf(aux_value) if aux_value is not None else '', '', self.formatter.formatar_numero_pdf(sum_value) if sum_value is not None else '', '']
            main_data.append(row_content)
            row_idx = len(main_data) - 1
            table_style_cmds.extend([('SPAN', (1, row_idx), (7, row_idx)), ('SPAN', (8, row_idx), (9, row_idx)), ('SPAN', (10, row_idx), (11, row_idx)), ('VALIGN', (1, row_idx), (1, row_idx), 'MIDDLE')])
        
        start_debitos_header = len(main_data)
        main_data.extend([[Paragraph('<b>DÉBITO DO IMPOSTO</b>', style_center_bold_small), '', '', '', '', '', '', '', Paragraph('<b>VALORES</b>', style_center_bold_small), '', '', ''], ['', '', '', '', '', '', '', '', Paragraph('<b>COLUNA AUXILIAR</b>', style_center_bold_small), '', Paragraph('<b>SOMAS</b>', style_center_bold_small), '']])
        start_debitos_content = len(main_data)

        if is_st_interestadual:
            total_base_saidas = sum(d.BASE_CALCULO for d in detalhes.get(1, []))
            total_base_outrosd = sum(d.BASE_CALCULO for d in detalhes.get(2, []))
            total_base_estornoc = sum(d.BASE_CALCULO for d in detalhes.get(3, []))
            
            add_line('001 - POR SAÍDAS/PRESTAÇÕES COM DÉBITO DO IMPOSTO', aux_value=total_base_saidas, sum_value=r.SAIDAS, is_bold=True)
            for detail in detalhes.get(1, []): add_line(detail.ESTADO, aux_value=detail.BASE_CALCULO, sum_value=detail.VALOR, is_detail=True)
            
            add_line('002 - OUTROS DÉBITOS(DISCRIMINAR ABAIXO)', aux_value=total_base_outrosd, sum_value=r.OUTROSD, is_bold=True)
            for detail in detalhes.get(2, []): add_line(detail.ESTADO, aux_value=detail.BASE_CALCULO, sum_value=detail.VALOR, is_detail=True)

            add_line('003 - ESTORNO DE CRÉDITOS(DISCRIMINAR ABAIXO)', aux_value=total_base_estornoc, sum_value=r.ESTCRE, is_bold=True)
            for detail in detalhes.get(3, []): add_line(detail.ESTADO, aux_value=detail.BASE_CALCULO, sum_value=detail.VALOR, is_detail=True)
            
            add_line('004 - SUBTOTAL', aux_value=r.DEVEDOR, sum_value=subtotal_debito, is_bold=True)
            for detail in detalhes.get('geral', []): add_line(detail.ESTADO, aux_value=detail.BASE_CALCULO, sum_value=detail.VALOR, is_detail=True, is_bold=True)
        else:
            add_line('001 - POR SAÍDAS/PRESTAÇÕES COM DÉBITO DO IMPOSTO', sum_value=r.SAIDAS)
            add_line('002 - OUTROS DÉBITOS(DISCRIMINAR ABAIXO)', sum_value=soma_outros_debitos if not is_st else r.OUTROSD)
            if isinstance(detalhes, dict):
                for detail in detalhes.get('outros_debitos', []): add_line(detail.NOME or "Sem descrição", aux_value=detail.VLOR, is_detail=True)
            add_line('003 - ESTORNO DE CRÉDITOS(DISCRIMINAR ABAIXO)', sum_value=soma_estornos_credito if not is_st else r.ESTCRE)
            if isinstance(detalhes, dict):
                for detail in detalhes.get('estornos_credito', []): add_line(detail.NOME or "Sem descrição", aux_value=detail.VLOR, is_detail=True)
            add_line('004 - SUBTOTAL', sum_value=subtotal_debito, is_bold=True)
        
        end_debitos_content = len(main_data) - 1

        start_creditos_header = len(main_data)
        main_data.append([Paragraph('<b>CRÉDITO DO IMPOSTO</b>', style_center_bold_small), '', '', '', '', '', '', '', '', '', '', ''])
        start_creditos_content = len(main_data)
        add_line('005 - POR ENTRADAS/AQUISIÇÕES COM CRÉDITO DO IMPOSTO', sum_value=r.ENTRADAS)
        add_line('006 - OUTROS CRÉDITOS(DISCRIMINAR ABAIXO)', sum_value=soma_outros_creditos if not is_st else r.OUTROSC)
        if isinstance(detalhes, dict) and not is_st_interestadual:
            for detail in detalhes.get('outros_creditos', []): add_line(detail.NOME or "Sem descrição", aux_value=detail.VLOR, is_detail=True)
        add_line('007 - ESTORNO DE DÉBITOS(DISCRIMINAR ABAIXO)', sum_value=soma_estornos_debitos if not is_st else r.ESTDEB)
        if isinstance(detalhes, dict) and not is_st_interestadual:
            for detail in detalhes.get('estornos_debitos', []): add_line(detail.NOME or "Sem descrição", aux_value=detail.VLOR, is_detail=True)
        add_line('008 - SUBTOTAL', sum_value=subtotal_credito, is_bold=True)
        add_line('009 - SALDO CREDOR DO PERÍODO ANTERIOR', sum_value=r.SALDOANT)
        add_line('010 - TOTAL', sum_value=total_credito, is_bold=True)
        end_creditos_content = len(main_data) - 1
        
        start_saldo_header = len(main_data)
        main_data.append([Paragraph('<b>APURAÇÃO DO SALDO</b>', style_center_bold_small), '', '', '', '', '', '', '', '', '', '', ''])
        start_saldo_content = len(main_data)
        
        add_line('011 - SALDO DEVEDOR(DÉBITO - CRÉDITO)', aux_value=r.DEVEDOR if is_st_interestadual else None, sum_value=saldo_devedor, is_bold=True)
        if is_st_interestadual:
            for detail in detalhes.get('geral', []): add_line(detail.ESTADO, aux_value=detail.BASE_CALCULO, sum_value=detail.VALOR, is_detail=True, is_bold=True)

        add_line('012 - DEDUÇÕES(DISCRIMINAR ABAIXO)', sum_value=r.DEDUCOES)
        
        add_line('013 - IMPOSTO A RECOLHER', aux_value=r.DEVEDOR if is_st_interestadual else None, sum_value=imposto_recolher, is_bold=True)
        if is_st_interestadual:
            for detail in detalhes.get('geral', []): add_line(detail.ESTADO, aux_value=detail.BASE_CALCULO, sum_value=detail.VALOR, is_detail=True, is_bold=True)

        add_line('014 - SALDO CREDOR A TRANSPORTAR PARA O PERÍODO SEGUINTE', sum_value=saldo_credor)
        end_saldo_content = len(main_data) - 1
        
        main_data[start_debitos_content][0] = texto_vertical('DÉBITO'); main_data[start_creditos_content][0] = texto_vertical('CRÉDITO'); main_data[start_saldo_content][0] = texto_vertical('SALDO')
        table_style_cmds.extend([('SPAN', (0, start_debitos_content), (0, end_debitos_content)), ('SPAN', (0, start_creditos_content), (0, end_creditos_content)), ('SPAN', (0, start_saldo_content), (0, end_saldo_content)), ('SPAN', (0, start_debitos_header), (7, start_debitos_header)), ('SPAN', (8, start_debitos_header), (11, start_debitos_header)), ('SPAN', (1, start_debitos_header + 1), (7, start_debitos_header + 1)), ('SPAN', (8, start_debitos_header + 1), (9, start_debitos_header + 1)), ('SPAN', (10, start_debitos_header + 1), (11, start_debitos_header + 1)), ('SPAN', (0, start_creditos_header), (11, start_creditos_header)), ('SPAN', (0, start_saldo_header), (11, start_saldo_header))])
        main_table = Table(main_data, colWidths=[1.2*cm, 6.6*cm, 0.1*cm, 0.1*cm, 0.1*cm, 0.1*cm, 0.1*cm, 7.3*cm, 2.5*cm, 2.5*cm, 2.5*cm, 2.5*cm], rowHeights=[6*mm] * len(main_data))
        final_style = TableStyle(table_style_cmds)
        final_style.add('GRID', (0, 0), (-1, -1), 0.5, colors.black); final_style.add('BOX', (0, 0), (-1, -1), 1, colors.black); final_style.add('VALIGN', (0, 0), (-1, -1), 'MIDDLE'); final_style.add('FONTNAME', (0, 0), (-1, -1), 'Helvetica'); final_style.add('FONTSIZE', (0, 0), (-1, -1), 8); final_style.add('ALIGN', (0, 0), (7, -1), 'CENTER'); final_style.add('ALIGN', (1, 2), (7, -1), 'LEFT'); final_style.add('ALIGN', (8, 0), (-1, -1), 'RIGHT')
        main_table.setStyle(final_style)
        elementos.append(main_table)
        elementos.append(Spacer(1, 4 * mm))
        
        if dados_info_comp is not None:
            style_info_header = ParagraphStyle(name='InfoHdr', parent=styles['Normal'], alignment=TA_CENTER, fontName='Helvetica-Bold', fontSize=8)
            style_info_content = ParagraphStyle(name='InfoCont', parent=styles['Normal'], alignment=TA_CENTER, fontSize=8)
            info_comp_data = [[Paragraph('<b>INFORMAÇÕES COMPLEMENTARES</b>', style_left_bold_small)], [Paragraph('<b>GUIA DE RECOLHIMENTO</b>', style_info_header), '', '', '', Paragraph('<b>GUIA DE INFORMAÇÃO</b>', style_info_header)], [Paragraph('NÚMERO', style_info_header), Paragraph('DATA', style_info_header), Paragraph('VALOR', style_info_header), Paragraph('ORGÃO ARRECADADOR', style_info_header), Paragraph('DATA DA ENTREGA', style_info_header), Paragraph('LOCAL DA ENTREGA', style_info_header)]]
            guias = dados_info_comp if not is_st else []
            if guias:
                for guia in guias:
                    data_vencimento = guia.VENCIMENTO.strftime(DISPLAY_DATE_FORMAT) if guia.VENCIMENTO else ''
                    info_comp_data.append([Paragraph(str(guia.CODIGO) if guia.CODIGO else '', style_info_content), Paragraph(data_vencimento, style_info_content), Paragraph(self.formatter.formatar_numero_pdf(guia.VALOR), style_info_content), Paragraph(str(guia.ORGAO_ARRECADADOR) if guia.ORGAO_ARRECADADOR else '', style_info_content), '', ''])
            else:
                info_comp_data.append([Paragraph('', style_info_content), Paragraph('', style_info_content), Paragraph('', style_info_content), Paragraph('', style_info_content), '', ''])
            col_widths_info = [4.5*cm, 4.5*cm, 4.5*cm, 4.5*cm, 4.9*cm, 4.9*cm]
            tabela_info_comp = Table(info_comp_data, colWidths=col_widths_info)
            tabela_info_comp.setStyle(TableStyle([('GRID', (0, 1), (-1, -1), 1, colors.black), ('BOX', (0, 0), (-1, -1), 1, colors.black), ('SPAN', (0, 0), (-1, 0)), ('SPAN', (0, 1), (3, 1)), ('SPAN', (4, 1), (5, 1)), ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'), ('ALIGN', (0, 0), (-1, 0), 'LEFT'), ('ALIGN', (0, 1), (-1, -1), 'CENTER')]))
            elementos.append(tabela_info_comp)
            elementos.append(Spacer(1, 3 * mm))
        
        if dados_resumo_aliquota and "APURAÇÃO" in titulo_pagina.replace(" ", "").upper() and "SUBSTITUIÇÃO" not in titulo_pagina.replace(" ", "").upper():
            elementos.extend(self._gerar_tabela_resumo_aliquota_pdf(dados_resumo_aliquota))

        obs_data = [[Paragraph('<b>OBSERVAÇÕES:</b>', style_left_bold_small)]]
        obs_table = Table(obs_data, colWidths=[27.8*cm], rowHeights=[2*cm])
        obs_table.setStyle(TableStyle([('BOX', (0,0), (-1,-1), 1, colors.black), ('ALIGN', (0,0), (-1,-1), 'LEFT'), ('VALIGN', (0,0), (-1,-1), 'TOP')]))
        elementos.append(obs_table)
        return elementos
    
    def criar_livro_icms_pdf(self, dados_brutos, dados_resumo, detalhes_outros_debitos, detalhes_estornos_credito, detalhes_outros_creditos, detalhes_estornos_debitos, dados_info_comp, dados_resumo_st, resumo_st_interestadual, detalhes_st_interestadual, dados_resumo_aliquota, periodo, codi_emp, folha_inicial=1, livro_num="001"):
        if not dados_brutos and not dados_resumo: print("✗ Nenhum dado retornado. PDF não será gerado."); return
        empresa, insc_est, cnpj = (dados_brutos[0].NOMEEMP, dados_brutos[0].IESTEMP, dados_brutos[0].CGCEEMP) if dados_brutos else (dados_resumo.NOMEEMP, dados_resumo.IESTEMP, dados_resumo.CGCEEMP)
        dados_entradas = [r for r in dados_brutos if r.QUADRO == 1] if dados_brutos else []
        dados_saidas = [r for r in dados_brutos if r.QUADRO == 3] if dados_brutos else []
        nome_arquivo = f"Livro_ICMS{codi_emp}.pdf"
        doc = SimpleDocTemplate(nome_arquivo, pagesize=landscape(A4), rightMargin=10*mm, leftMargin=10*mm, topMargin=10*mm, bottomMargin=10*mm)
        story = []
        current_folha = folha_inicial
        if dados_entradas:
            story.extend(self.gerar_pagina_livro_pdf("ENTRADAS", dados_entradas, empresa, insc_est, cnpj, str(current_folha).zfill(3), str(livro_num).zfill(3), periodo)); current_folha += 1
        if dados_saidas:
            if story: story.append(PageBreak())
            story.extend(self.gerar_pagina_livro_pdf("SAÍDAS", dados_saidas, empresa, insc_est, cnpj, str(current_folha).zfill(3), str(livro_num).zfill(3), periodo, is_saida=True)); current_folha += 1
        if dados_resumo:
            if story: story.append(PageBreak())
            detalhes_apuracao = {'outros_debitos': detalhes_outros_debitos, 'estornos_credito': detalhes_estornos_credito, 'outros_creditos': detalhes_outros_creditos, 'estornos_debitos': detalhes_estornos_debitos}
            story.extend(self.gerar_pagina_resumo_pdf("L I V R O   R E G I S T R O   D E   A P U R A Ç Ã O   D O   I C M S", "R E S U M O   D A   A P U R A Ç Ã O   D O   I M P O S T O", dados_resumo, detalhes_apuracao, dados_info_comp, dados_resumo_aliquota, empresa, insc_est, cnpj, str(current_folha).zfill(3), str(livro_num).zfill(3), periodo)); current_folha += 1
        if dados_resumo_st:
            if story: story.append(PageBreak())
            story.extend(self.gerar_pagina_resumo_pdf("L I V R O   R E G I S T R O   D E   A P U R A Ç Ã O   D O   I C M S", "R E S U M O   D E   S U B S T I T U I Ç Ã O   T R I B U T Á R I A", dados_resumo_st, {}, [], None, empresa, insc_est, cnpj, str(current_folha).zfill(3), str(livro_num).zfill(3), periodo)); current_folha += 1
        if resumo_st_interestadual:
            if story: story.append(PageBreak())
            story.extend(self.gerar_pagina_resumo_pdf("L I V R O   R E G I S T R O   D E   S U B S T I T U I Ç Ã O   T R I B U T Á R I A", "OPERAÇÕES INTERESTADUAIS", resumo_st_interestadual, detalhes_st_interestadual, None, None, empresa, insc_est, cnpj, str(current_folha).zfill(3), str(livro_num).zfill(3), periodo))
        try:
            doc.build(story)
            print(f"✓ PDF '{nome_arquivo}' criado com sucesso!")
        except Exception as e:
            print(f"✗ Erro ao gerar o PDF: {e}")

class ExcelGenerator:
    def __init__(self):
        self.formatter = ReportFormatter()
        self.right_align = Alignment(horizontal='right', vertical='center')
    
    def set_border(self, ws, cell_range, style='thin'):
        border = Border(left=Side(style=style), right=Side(style=style), top=Side(style=style), bottom=Side(style=style))
        for row in ws[cell_range]:
            for cell in row: cell.border = border
            
    def _add_line_xlsx(self, ws, row, title, aux_value=None, sum_value=None, is_bold=False, is_detail=False):
        cell_a = ws.cell(row=row, column=1, value=title)
        if is_bold: cell_a.font = Font(bold=True)
        if is_detail:
            cell_a.font = Font(italic=True)
            cell_a.alignment = Alignment(indent=2)
        if aux_value is not None:
            cell_b = ws.cell(row=row, column=2, value=Decimal(str(aux_value))); cell_b.number_format = CURRENCY_FORMAT; cell_b.alignment = self.right_align
        if sum_value is not None:
            cell_c = ws.cell(row=row, column=3, value=Decimal(str(sum_value))); cell_c.number_format = CURRENCY_FORMAT; cell_c.alignment = self.right_align
        return row + 1

    def gerar_pagina_livro_xlsx(self, ws, tipo_pagina, dados, empresa, insc_est, cnpj, folha, livro, periodo, is_saida=False):
        bold_font, center_align, right_align = Font(bold=True), Alignment(horizontal='center', vertical='center', wrap_text=True), Alignment(horizontal='right', vertical='center')
        ws.title = tipo_pagina
        for col, width in zip(['A', 'B', 'C', 'D', 'E', 'F', 'G'], [20, 20, 20, 20, 20, 25, 20]): ws.column_dimensions[col].width = width
        ws.merge_cells('A1:G1'); ws['A1'] = "LIVRO REGISTRO DE APURAÇÃO DO ICMS - RAICMS - MODELO P9"; ws['A1'].font = bold_font; ws['A1'].alignment = center_align
        ws.merge_cells('A2:G2'); ws['A2'] = "REGISTRO DE APURAÇÃO DO ICMS"; ws['A2'].font = bold_font; ws['A2'].alignment = center_align
        ws['A4'], ws['D4'], ws['A5'], ws['A6'], ws['D6'] = f"FIRMA: {empresa}", f"CNPJ: {cnpj}", f"INSC.EST.: {insc_est}", f"FOLHA: {folha}  LIVRO: {livro}", f"MÊS OU PERÍODO/ANO: {periodo}"
        self.set_border(ws, 'A4:G6')
        row_idx = 8
        ws.merge_cells(f'A{row_idx}:G{row_idx}'); ws.cell(row=row_idx, column=1, value=tipo_pagina).font = bold_font; ws.cell(row=row_idx, column=1).alignment = center_align
        row_idx += 1
        ws.cell(row=row_idx, column=1, value="CONTÁBIL").font = bold_font; ws.cell(row=row_idx, column=2, value="FISCAL").font = bold_font
        header_imposto = "IMPOSTO\nCREDITADO" if not is_saida else "IMPOSTO\nDEBITADO"
        header_op_imposto = "OPERAÇÕES COM CRÉDITO DO IMPOSTO" if not is_saida else "OPERAÇÕES COM DÉBITO DO IMPOSTO"
        ws.merge_cells(f'D{row_idx}:E{row_idx}'); ws.cell(row=row_idx, column=4, value=header_op_imposto).font = bold_font
        ws.merge_cells(f'F{row_idx}:G{row_idx}'); ws.cell(row=row_idx, column=6, value="OPERAÇÕES SEM DÉBITO DO IMPOSTO").font = bold_font
        for c in range(1, 8): ws.cell(row=row_idx, column=c).alignment = center_align
        row_idx += 1
        ws.cell(row=row_idx, column=4, value="BASE DE CÁLCULO").font = bold_font; ws.cell(row=row_idx, column=5, value=header_imposto).font = bold_font
        ws.cell(row=row_idx, column=6, value="ISENTAS OU NÃO\nTRIBUTADAS").font = bold_font; ws.cell(row=row_idx, column=7, value="OUTRAS").font = bold_font
        for r in range(row_idx-2, row_idx+1):
            for c in range(1, 8): ws.cell(row=r, column=c).alignment = center_align
        row_idx += 1
        start_data_row = row_idx
        for item in sorted(dados, key=lambda x: x.CODINAT):
            ws.cell(row=row_idx, column=2, value=f"{str(item.CODINAT)[0]}-{str(item.CODINAT)[1:]}").alignment = center_align
            for i, val in enumerate([item.VCON, item.BCAL, item.VICM, item.IICM, item.OICM]):
                ws.cell(row=row_idx, column=i+3, value=Decimal(str(val or 0))).number_format = CURRENCY_FORMAT
                ws.cell(row=row_idx, column=i+3).alignment = right_align
            row_idx += 1
        ws.merge_cells(f'A{row_idx}:G{row_idx}'); ws.cell(row=row_idx, column=1, value='SUBTOTAIS ENTRADAS' if not is_saida else 'SUBTOTAIS SAÍDAS').font = bold_font
        row_idx += 1
        subtotais_estado, subtotais_outros, subtotais_exterior, total_geral = self.formatter._calcular_subtotais(dados, is_saida)
        subtotais_data = [(f'{"1.000" if not is_saida else "5.000"} - DO ESTADO', subtotais_estado), (f'{"2.000" if not is_saida else "6.000"} - DE OUTROS ESTADOS', subtotais_outros), (f'{"3.000" if not is_saida else "7.000"} - DO EXTERIOR', subtotais_exterior), ("TOTAIS", total_geral)]
        for label, data in subtotais_data:
            ws.merge_cells(f'A{row_idx}:B{row_idx}'); ws.cell(row=row_idx, column=1, value=label).font = bold_font
            for i, key in enumerate(['vcon', 'bcal', 'vicm', 'iicm', 'oicm']): ws.cell(row=row_idx, column=i+3, value=data[key])
            row_idx += 1
        for r in range(start_data_row, row_idx):
            for c in range(3, 8): ws.cell(row=r, column=c).alignment = right_align; ws.cell(row=r, column=c).number_format = CURRENCY_FORMAT
        self.set_border(ws, f'A8:G{row_idx-1}')
    
    def _gerar_tabela_resumo_aliquota_xlsx(self, ws, dados_aliquota, start_row):
        if not dados_aliquota:
            return start_row
        current_row = start_row + 2
        bold_font = Font(bold=True)
        center_align = Alignment(horizontal='center', vertical='center')
        ws.merge_cells(f'A{current_row}:E{current_row}')
        cell_titulo = ws[f'A{current_row}']; cell_titulo.value = "R E S U M O   P O R   A L Í Q U O T A"; cell_titulo.font = bold_font
        current_row += 1
        ws.merge_cells(f'B{current_row}:C{current_row}'); ws[f'B{current_row}'].value = "ENTRADAS"; ws[f'B{current_row}'].font = bold_font; ws[f'B{current_row}'].alignment = center_align
        ws.merge_cells(f'D{current_row}:E{current_row}'); ws[f'D{current_row}'].value = "SAÍDAS"; ws[f'D{current_row}'].font = bold_font; ws[f'D{current_row}'].alignment = center_align
        current_row += 1
        headers = ["ALÍQUOTA (%)", "BASE DE CÁLCULO", "IMPOSTO", "BASE DE CÁLCULO", "IMPOSTO"]
        for i, header in enumerate(headers):
            cell = ws.cell(row=current_row, column=i + 1, value=header); cell.font = bold_font; cell.alignment = center_align
        header_range = f'A{current_row-1}:E{current_row}'
        self.set_border(ws, header_range)
        current_row += 1
        total_bcale, total_vicme, total_bcals, total_vicms = Decimal(0), Decimal(0), Decimal(0), Decimal(0)
        data_start_row = current_row
        for r in dados_aliquota:
            ws.cell(row=current_row, column=1, value=r.ALIQUOTA).number_format = '#,##0.00'
            ws.cell(row=current_row, column=2, value=r.BCALE).number_format = CURRENCY_FORMAT
            ws.cell(row=current_row, column=3, value=r.VICME).number_format = CURRENCY_FORMAT
            ws.cell(row=current_row, column=4, value=r.BCALS).number_format = CURRENCY_FORMAT
            ws.cell(row=current_row, column=5, value=r.VICMS).number_format = CURRENCY_FORMAT
            total_bcale += r.BCALE; total_vicme += r.VICME; total_bcals += r.BCALS; total_vicms += r.VICMS
            for col in range(1, 6): ws.cell(row=current_row, column=col).alignment = self.right_align
            current_row += 1
        ws.cell(row=current_row, column=1, value="TOTAIS").font = bold_font
        ws.cell(row=current_row, column=2, value=total_bcale).number_format = CURRENCY_FORMAT
        ws.cell(row=current_row, column=3, value=total_vicme).number_format = CURRENCY_FORMAT
        ws.cell(row=current_row, column=4, value=total_bcals).number_format = CURRENCY_FORMAT
        ws.cell(row=current_row, column=5, value=total_vicms).number_format = CURRENCY_FORMAT
        for col in range(1, 6):
            ws.cell(row=current_row, column=col).font = bold_font
            ws.cell(row=current_row, column=col).alignment = self.right_align
        self.set_border(ws, f'A{data_start_row}:E{current_row}')
        return current_row + 1

    def gerar_pagina_resumo_xlsx(self, ws, titulo_aba, dados_resumo, detalhes, dados_info_comp, dados_resumo_aliquota, empresa, insc_est, cnpj, folha, livro, periodo):
        ws.title = titulo_aba
        r = dados_resumo
        is_st_interestadual = "INTERESTADUAL" in titulo_aba.upper()
        is_st = "ST" in titulo_aba.upper() or "SUBSTITUIÇÃO" in titulo_aba.upper()
        
        soma_outros_debitos = Decimal(0)
        soma_estornos_credito = Decimal(0)
        soma_outros_creditos = Decimal(0)
        soma_estornos_debitos = Decimal(0)
        
        if hasattr(r, '_fields'): r_dict = r._asdict()
        else: r_dict = {desc[0]: getattr(r, desc[0]) for desc in r.cursor_description}

        r_decimal = {}
        for k, v in r_dict.items():
            try: r_decimal[k.upper()] = Decimal(str(v or 0))
            except (InvalidOperation, TypeError): r_decimal[k.upper()] = Decimal(0)

        if 'ANTERIOR' in r_decimal: r_decimal['SALDOANT'] = r_decimal.pop('ANTERIOR')
        if 'ESTORNOD' in r_decimal: r_decimal['ESTDEB'] = r_decimal.pop('ESTORNOD')
        if 'ESTORNOC' in r_decimal: r_decimal['ESTCRE'] = r_decimal.pop('ESTORNOC')
        
        required_fields = ['SAIDAS', 'OUTROSD', 'ESTCRE', 'ENTRADAS', 'OUTROSC', 'ESTDEB', 'SALDOANT', 'DEDUCOES', 'DEVEDOR', 'RECOLHER']
        for field in required_fields:
            if field not in r_decimal: r_decimal[field] = Decimal(0)
            
        class ResumoDecimal:
            def __init__(self, data): self.__dict__.update(data)
        r = ResumoDecimal(r_decimal)

        if is_st_interestadual:
            subtotal_debito = r.SAIDAS + r.OUTROSD + r.ESTCRE
            subtotal_credito = Decimal(0)
        else:
            soma_outros_debitos = sum(Decimal(str(getattr(d, 'VLOR', 0) or 0)) for d in detalhes.get('outros_debitos', []))
            soma_estornos_credito = sum(Decimal(str(getattr(d, 'VLOR', 0) or 0)) for d in detalhes.get('estornos_credito', []))
            soma_outros_creditos = sum(Decimal(str(getattr(d, 'VLOR', 0) or 0)) for d in detalhes.get('outros_creditos', []))
            soma_estornos_debitos = sum(Decimal(str(getattr(d, 'VLOR', 0) or 0)) for d in detalhes.get('estornos_debitos', []))
            subtotal_debito = r.SAIDAS + (soma_outros_debitos if not is_st else r.OUTROSD) + (soma_estornos_credito if not is_st else r.ESTCRE)
            subtotal_credito = r.ENTRADAS + (soma_outros_creditos if not is_st else r.OUTROSC) + (soma_estornos_debitos if not is_st else r.ESTDEB)
        
        total_credito = subtotal_credito + r.SALDOANT
        saldo_devedor = max(Decimal(0), subtotal_debito - total_credito)
        saldo_credor = max(Decimal(0), total_credito - subtotal_debito)
        imposto_recolher = max(Decimal(0), saldo_devedor - r.DEDUCOES)
        
        bold_font, center_align = Font(bold=True), Alignment(horizontal='center', vertical='center', wrap_text=True)
        thin_border = Border(left=Side(style='thin'), right=Side(style='thin'), top=Side(style='thin'), bottom=Side(style='thin'))
        
        ws.column_dimensions['A'].width = 100
        ws.column_dimensions['B'].width = 20
        ws.column_dimensions['C'].width = 20

        ws.merge_cells('A1:C1'); ws['A1'] = "LIVRO REGISTRO DE APURAÇÃO DO ICMS - RAICMS - MODELO P9"; ws['A1'].font = bold_font; ws['A1'].alignment = center_align
        ws.merge_cells('A2:C2'); ws['A2'] = titulo_aba.upper().replace(" (DISCRIMINAR ABAIXO)", ""); ws['A2'].font = bold_font; ws['A2'].alignment = center_align
        ws.merge_cells('A4:B4'); ws['A4'] = f"EMPRESA: {empresa}"; ws.merge_cells('A5:B5'); ws['A5'] = f"INSC.EST.: {insc_est}"; ws.merge_cells('A6:B6'); ws['A6'] = f"FOLHA: {folha}  LIVRO: {livro}"
        ws['C4'] = f"CNPJ: {cnpj}"; ws['C5'] = f"MÊS/ANO: {periodo}"
        
        current_row = 8
        ws.cell(row=current_row, column=1, value="DÉBITO DO IMPOSTO").font = bold_font
        ws.cell(row=current_row, column=2, value="COLUNA AUXILIAR").font = bold_font; ws.cell(row=current_row, column=2).alignment = center_align
        ws.cell(row=current_row, column=3, value="SOMAS").font = bold_font; ws.cell(row=current_row, column=3).alignment = center_align
        current_row += 1
        
        if is_st_interestadual:
            ws.cell(row=8, column=2, value="Base de Cálculo")
            ws.cell(row=8, column=3, value="Valor do Imposto")
            total_base_saidas = sum(d.BASE_CALCULO for d in detalhes.get(1, []))
            total_base_outrosd = sum(d.BASE_CALCULO for d in detalhes.get(2, []))
            total_base_estornoc = sum(d.BASE_CALCULO for d in detalhes.get(3, []))
            current_row = self._add_line_xlsx(ws, current_row, "001 - POR SAÍDAS/PRESTAÇÕES (DETALHADO POR UF)", aux_value=total_base_saidas, sum_value=r.SAIDAS, is_bold=True)
            for detail in detalhes.get(1, []): current_row = self._add_line_xlsx(ws, current_row, detail.ESTADO, aux_value=detail.BASE_CALCULO, sum_value=detail.VALOR, is_detail=True)
            current_row = self._add_line_xlsx(ws, current_row, "002 - OUTROS DÉBITOS (DISCRIMINAR ABAIXO)", aux_value=total_base_outrosd, sum_value=r.OUTROSD, is_bold=True)
            for detail in detalhes.get(2, []): current_row = self._add_line_xlsx(ws, current_row, detail.ESTADO, aux_value=detail.BASE_CALCULO, sum_value=detail.VALOR, is_detail=True)
            current_row = self._add_line_xlsx(ws, current_row, "003 - ESTORNO DE CRÉDITOS (DISCRIMINAR ABAIXO)", aux_value=total_base_estornoc, sum_value=r.ESTCRE, is_bold=True)
            for detail in detalhes.get(3, []): current_row = self._add_line_xlsx(ws, current_row, detail.ESTADO, aux_value=detail.BASE_CALCULO, sum_value=detail.VALOR, is_detail=True)
            current_row = self._add_line_xlsx(ws, current_row, "004 - SUBTOTAL", aux_value=r.DEVEDOR, sum_value=subtotal_debito, is_bold=True)
            for detail in detalhes.get('geral', []): current_row = self._add_line_xlsx(ws, current_row, detail.ESTADO, aux_value=detail.BASE_CALCULO, sum_value=detail.VALOR, is_detail=True, is_bold=True)
        else:
            current_row = self._add_line_xlsx(ws, current_row, "001 - POR SAÍDAS/PRESTAÇÕES COM DÉBITO DO IMPOSTO", sum_value=r.SAIDAS)
            current_row = self._add_line_xlsx(ws, current_row, "002 - OUTROS DÉBITOS (DISCRIMINAR ABAIXO)", sum_value=soma_outros_debitos if not is_st else r.OUTROSD)
            if isinstance(detalhes, dict):
                for d in detalhes.get('outros_debitos', []): current_row = self._add_line_xlsx(ws, current_row, d.NOME or "Sem descrição", aux_value=d.VLOR, is_detail=True)
            current_row = self._add_line_xlsx(ws, current_row, "003 - ESTORNO DE CRÉDITOS (DISCRIMINAR ABAIXO)", sum_value=soma_estornos_credito if not is_st else r.ESTCRE)
            if isinstance(detalhes, dict):
                for d in detalhes.get('estornos_credito', []): current_row = self._add_line_xlsx(ws, current_row, d.NOME or "Sem descrição", aux_value=d.VLOR, is_detail=True)
            current_row = self._add_line_xlsx(ws, current_row, "004 - SUBTOTAL", sum_value=subtotal_debito, is_bold=True)
        
        current_row += 1
        current_row = self._add_line_xlsx(ws, current_row, "CRÉDITO DO IMPOSTO", is_bold=True)
        current_row = self._add_line_xlsx(ws, current_row, "005 - POR ENTRADAS/AQUISIÇÕES COM CRÉDITO DO IMPOSTO", sum_value=r.ENTRADAS)
        current_row = self._add_line_xlsx(ws, current_row, "006 - OUTROS CRÉDITOS (DISCRIMINAR ABAIXO)", sum_value=soma_outros_creditos if not is_st else r.OUTROSC)
        if isinstance(detalhes, dict) and not is_st_interestadual:
            for d in detalhes.get('outros_creditos', []): current_row = self._add_line_xlsx(ws, current_row, d.NOME or "Sem descrição", aux_value=d.VLOR, is_detail=True)
        current_row = self._add_line_xlsx(ws, current_row, "007 - ESTORNO DE DÉBITOS (DISCRIMINAR ABAIXO)", sum_value=soma_estornos_debitos if not is_st else r.ESTDEB)
        if isinstance(detalhes, dict) and not is_st_interestadual:
            for d in detalhes.get('estornos_debitos', []): current_row = self._add_line_xlsx(ws, current_row, d.NOME or "Sem descrição", aux_value=d.VLOR, is_detail=True)
        current_row = self._add_line_xlsx(ws, current_row, "008 - SUBTOTAL", sum_value=subtotal_credito, is_bold=True)
        current_row = self._add_line_xlsx(ws, current_row, "009 - SALDO CREDOR DO PERÍODO ANTERIOR", sum_value=r.SALDOANT, is_bold=True)
        current_row = self._add_line_xlsx(ws, current_row, "010 - TOTAL", sum_value=total_credito, is_bold=True)
        current_row += 1
        current_row = self._add_line_xlsx(ws, current_row, "APURAÇÃO DO SALDO", is_bold=True)
        
        current_row = self._add_line_xlsx(ws, current_row, "011 - SALDO DEVEDOR (DÉBITO - CRÉDITO)", aux_value=r.DEVEDOR if is_st_interestadual else None, sum_value=saldo_devedor, is_bold=True)
        if is_st_interestadual:
            for detail in detalhes.get('geral', []): current_row = self._add_line_xlsx(ws, current_row, detail.ESTADO, aux_value=detail.BASE_CALCULO, sum_value=detail.VALOR, is_detail=True, is_bold=True)
        
        current_row = self._add_line_xlsx(ws, current_row, "012 - DEDUÇÕES", sum_value=r.DEDUCOES)
        
        current_row = self._add_line_xlsx(ws, current_row, "013 - IMPOSTO A RECOLHER", aux_value=r.DEVEDOR if is_st_interestadual else None, sum_value=imposto_recolher, is_bold=True)
        if is_st_interestadual:
            for detail in detalhes.get('geral', []): current_row = self._add_line_xlsx(ws, current_row, detail.ESTADO, aux_value=detail.BASE_CALCULO, sum_value=detail.VALOR, is_detail=True, is_bold=True)
        
        current_row = self._add_line_xlsx(ws, current_row, "014 - SALDO CREDOR A TRANSPORTAR PARA O PERÍODO SEGUINTE", sum_value=saldo_credor)
        
        if dados_info_comp and not is_st:
            current_row += 2
            ws.cell(row=current_row, column=1, value="INFORMAÇÕES COMPLEMENTARES").font = bold_font; current_row += 1
            ws.merge_cells(f'A{current_row}:B{current_row}'); ws.cell(row=current_row, column=1, value="GUIA DE RECOLHIMENTO").font = bold_font; 
            ws.merge_cells(f'C{current_row}:D{current_row}'); ws.cell(row=current_row, column=3, value="GUIA DE INFORMAÇÃO").font = bold_font; current_row += 1
            ws.cell(row=current_row, column=1, value="Número"); ws.cell(row=current_row, column=2, value="Data Venc."); ws.cell(row=current_row, column=3, value="Valor"); ws.cell(row=current_row, column=4, value="Órgão Arrecadador"); current_row += 1
            for guia in dados_info_comp:
                ws.cell(row=current_row, column=1, value=guia.CODIGO or ''); ws.cell(row=current_row, column=2, value=guia.VENCIMENTO.strftime(DISPLAY_DATE_FORMAT) if guia.VENCIMENTO else '')
                cell_valor = ws.cell(row=current_row, column=3, value=Decimal(str(guia.VALOR or 0)) if guia.VALOR else 0)
                cell_valor.number_format = CURRENCY_FORMAT; cell_valor.alignment = self.right_align
                ws.cell(row=current_row, column=4, value=guia.ORGAO_ARRECADADOR or ''); current_row += 1
        
        if dados_resumo_aliquota and "APURAÇÃO" in titulo_aba.upper() and "ST" not in titulo_aba.upper():
            current_row = self._gerar_tabela_resumo_aliquota_xlsx(ws, dados_resumo_aliquota, current_row)

        for row_idx in range(8, current_row):
            for col_idx in range(1, 4): ws.cell(row=row_idx, column=col_idx).border = thin_border

    def criar_livro_icms_xlsx(self, dados_brutos, dados_resumo, detalhes_outros_debitos, detalhes_estornos_credito, detalhes_outros_creditos, detalhes_estornos_debitos, dados_info_comp, dados_resumo_st, resumo_st_interestadual, detalhes_st_interestadual, dados_resumo_aliquota, periodo, codi_emp, folha_inicial=1, livro_num="001"):
        if not dados_brutos and not dados_resumo: print("✗ Nenhum dado retornado. XLSX não será gerado."); return
        empresa, insc_est, cnpj = (dados_brutos[0].NOMEEMP, dados_brutos[0].IESTEMP, dados_brutos[0].CGCEEMP) if dados_brutos else (dados_resumo.NOMEEMP, dados_resumo.IESTEMP, dados_resumo.CGCEEMP)
        dados_entradas = [r for r in dados_brutos if r.QUADRO == 1] if dados_brutos else []
        dados_saidas = [r for r in dados_brutos if r.QUADRO == 3] if dados_brutos else []
        nome_arquivo = f"Livro_ICMS{codi_emp}.xlsx"
        wb = openpyxl.Workbook()
        if "Sheet" in wb.sheetnames: wb.remove(wb["Sheet"])
        current_folha = folha_inicial
        if dados_entradas:
            ws_entradas = wb.create_sheet("Entradas")
            self.gerar_pagina_livro_xlsx(ws_entradas, "Entradas", dados_entradas, empresa, insc_est, cnpj, str(current_folha).zfill(3), str(livro_num).zfill(3), periodo); current_folha +=1
        if dados_saidas:
            ws_saidas = wb.create_sheet("Saídas")
            self.gerar_pagina_livro_xlsx(ws_saidas, "Saídas", dados_saidas, empresa, insc_est, cnpj, str(current_folha).zfill(3), str(livro_num).zfill(3), periodo, is_saida=True); current_folha +=1
        if dados_resumo:
            ws_resumo = wb.create_sheet("Resumo Apuração")
            detalhes_apuracao = {'outros_debitos': detalhes_outros_debitos, 'estornos_credito': detalhes_estornos_credito, 'outros_creditos': detalhes_outros_creditos, 'estornos_debitos': detalhes_estornos_debitos}
            self.gerar_pagina_resumo_xlsx(ws_resumo, "Resumo Apuração", dados_resumo, detalhes_apuracao, dados_info_comp, dados_resumo_aliquota, empresa, insc_est, cnpj, str(current_folha).zfill(3), str(livro_num).zfill(3), periodo); current_folha +=1
        if dados_resumo_st:
            ws_resumo_st = wb.create_sheet("Resumo ST")
            self.gerar_pagina_resumo_xlsx(ws_resumo_st, "Resumo Substituição Tributária", dados_resumo_st, {}, [], None, empresa, insc_est, cnpj, str(current_folha).zfill(3), str(livro_num).zfill(3), periodo); current_folha +=1
        if resumo_st_interestadual:
            ws_st_inter = wb.create_sheet("Resumo ST Interestadual")
            self.gerar_pagina_resumo_xlsx(ws_st_inter, "Resumo ST Interestadual", resumo_st_interestadual, detalhes_st_interestadual, None, None, empresa, insc_est, cnpj, str(current_folha).zfill(3), str(livro_num).zfill(3), periodo)
        try:
            wb.save(nome_arquivo)
            print(f"✓ XLSX '{nome_arquivo}' criado com sucesso!")
        except Exception as e:
            print(f"✗ Erro ao gerar o XLSX: {e}")

class JSONGenerator:
    def __init__(self): pass
    def criar_json_completo(self, dados_json_entradas_saidas, dados_json_resumo, dados_json_detalhes, dados_json_info_comp, dados_json_resumo_st, dados_json_st_interestadual, dados_json_resumo_aliquota, periodo, codi_emp, folha_inicial=1, livro_num="001"):
        print("\n[JSON] Gerando arquivo JSON...")
        json_completo = {"metadados": {"sistema": "RAICMS - Livro de Apuração do ICMS", "versao": "2.3", "timestamp_geracao": datetime.now().isoformat(), "periodo": periodo, "empresa": {"codigo": codi_emp, "livro_numero": livro_num, "folha_inicial": folha_inicial}}, "consultas": {}}
        if dados_json_entradas_saidas: json_completo["consultas"].update(dados_json_entradas_saidas)
        if dados_json_resumo: json_completo["consultas"].update(dados_json_resumo)
        if dados_json_detalhes: json_completo["consultas"].update(dados_json_detalhes)
        if dados_json_info_comp: json_completo["consultas"].update(dados_json_info_comp)
        if dados_json_resumo_st: json_completo["consultas"].update(dados_json_resumo_st)
        if dados_json_st_interestadual: json_completo["consultas"].update(dados_json_st_interestadual)
        if dados_json_resumo_aliquota: json_completo["consultas"].update(dados_json_resumo_aliquota)
        if "SQL_RESUMO_APURACAO" in json_completo["consultas"] and dados_json_detalhes: self._adicionar_calculos_corretos(json_completo, dados_json_detalhes)
        nome_arquivo = f"Livro_ICMS_Dados_{codi_emp}_{periodo.replace('/', '-').replace(' a ', '_')}.json"
        try:
            with open(nome_arquivo, 'w', encoding='utf-8') as f: json.dump(json_completo, f, ensure_ascii=False, indent=2, separators=(',', ': '))
            print(f"✓ JSON '{nome_arquivo}' criado com sucesso!")
        except Exception as e: print(f"✗ Erro ao gerar JSON: {e}")
    
    def _adicionar_calculos_corretos(self, json_completo, dados_json_detalhes):
        try:
            resumo_data = json_completo.get("consultas", {}).get("SQL_RESUMO_APURACAO", {})
            if not isinstance(resumo_data, dict) or not resumo_data.get("dados"): return
            resumo = resumo_data["dados"]
            somas = {k: sum(item.get("VLOR", 0) for item in dados_json_detalhes.get(f"SQL_{k.upper()}", {}).get("dados", [])) for k in ["outros_debitos", "estornos_credito", "outros_creditos", "estornos_debitos"]}
            subtotal_debito = resumo.get("SAIDAS", 0) + somas["outros_debitos"] + somas["estornos_credito"]
            subtotal_credito = resumo.get("ENTRADAS", 0) + somas["outros_creditos"] + somas["estornos_debitos"]
            total_credito = subtotal_credito + resumo.get("SALDOANT", 0)
            saldo_devedor = max(0, subtotal_debito - total_credito)
            saldo_credor = max(0, total_credito - subtotal_debito)
            imposto_recolher = max(0, saldo_devedor - resumo.get("DEDUCOES", 0))
            json_completo["consultas"]["VALORES_CALCULADOS_CORRETOS"] = {"nome_consulta": "Valores Recalculados", "dados": {"SUBTOTAL_DEBITO_CALCULADO": round(subtotal_debito, 2), "SUBTOTAL_CREDITO_CALCULADO": round(subtotal_credito, 2), "TOTAL_CREDITO_CALCULADO": round(total_credito, 2), "SALDO_DEVEDOR_CALCULADO": round(saldo_devedor, 2), "SALDO_CREDOR_CALCULADO": round(saldo_credor, 2), "IMPOSTO_RECOLHER_CALCULADO": round(imposto_recolher, 2)}}
        except Exception as e:
            print(f"⚠ Erro ao adicionar cálculos ao JSON: {e}")

class ReportManager:
    def __init__(self):
        self.pdf_generator = PDFGenerator()
        self.excel_generator = ExcelGenerator()
        self.json_generator = JSONGenerator()
    
    def gerar_relatorios_completos(self, dados_brutos, dados_resumo, detalhes_outros_debitos, detalhes_estornos_credito, detalhes_outros_creditos, detalhes_estornos_debitos, dados_info_comp, dados_resumo_st, resumo_st_interestadual, detalhes_st_interestadual, dados_resumo_aliquota, dados_json_entradas_saidas, dados_json_resumo, dados_json_detalhes, dados_json_info_comp, dados_json_resumo_st, dados_json_st_interestadual, dados_json_resumo_aliquota, periodo, codi_emp, folha_inicial=1, livro_num="001", gerar_pdf=False, gerar_xlsx=True):
        print("\n[RELATÓRIOS] Iniciando geração dos arquivos...")
        if not dados_brutos and not dados_resumo:
            print("✗ Nenhum dado disponível para gerar relatórios."); return
        
        if gerar_pdf:
            self.pdf_generator.criar_livro_icms_pdf(
                dados_brutos, dados_resumo, detalhes_outros_debitos, detalhes_estornos_credito, 
                detalhes_outros_creditos, detalhes_estornos_debitos, dados_info_comp, dados_resumo_st,
                resumo_st_interestadual, detalhes_st_interestadual, dados_resumo_aliquota, periodo, codi_emp, folha_inicial, livro_num
            )
        if gerar_xlsx:
            self.excel_generator.criar_livro_icms_xlsx(
                dados_brutos, dados_resumo, detalhes_outros_debitos, detalhes_estornos_credito,
                detalhes_outros_creditos, detalhes_estornos_debitos, dados_info_comp, dados_resumo_st,
                resumo_st_interestadual, detalhes_st_interestadual, dados_resumo_aliquota, periodo, codi_emp, folha_inicial, livro_num
            )
        self.json_generator.criar_json_completo(
            dados_json_entradas_saidas, dados_json_resumo, dados_json_detalhes, 
            dados_json_info_comp, dados_json_resumo_st, dados_json_st_interestadual,
            dados_json_resumo_aliquota,
            periodo, codi_emp, folha_inicial, livro_num
        )
        print("✓ Geração de relatórios concluída!")

# --- SERVIÇOS DE BANCO DE DADOS ---

class DatabaseService:
    def __init__(self): self.conn = None
    def conectar(self):
        try:
            self.conn = pyodbc.connect(CONN_STR)
            print("✓ Conexão com banco estabelecida com sucesso")
            return True
        except pyodbc.Error as ex:
            print(f"✗ Erro ao conectar com o banco: {ex}"); return False
    def desconectar(self):
        if self.conn: self.conn.close(); print("✓ Conexão com banco encerrada")
    
    def decidir_livro_ativo(self, codi_emp, data_inicio, data_fim):
        print("\n[PASSO 1] Buscando livros ativos para o período...")
        if not self.conn: return "1", 4
        cursor = self.conn.cursor()
        try:
            if not SQL_GET_LIVRO_POR_TIPO.strip():
                print("   => Consulta SQL_GET_LIVRO_POR_TIPO vazia. Usando padrão (NUME_LIV=1, CODI_LIV=4).")
                return "1", 4
            livros_encontrados = []
            for cod_liv in CODIGOS_LIVRO_PRIORIDADE:
                for data_liv in [data_fim, data_inicio]:
                    cursor.execute(SQL_GET_LIVRO_POR_TIPO, codi_emp, cod_liv, data_liv)
                    row = cursor.fetchone()
                    if row and row[0] is not None:
                        resultado = {"codi_liv": cod_liv, "nume_liv": row[0]}
                        if resultado not in livros_encontrados: livros_encontrados.append(resultado)
            if not livros_encontrados:
                print("   => Nenhum livro ativo encontrado. Usando padrão (NUME_LIV=1, CODI_LIV=4).")
                return "1", 4
            livro_prioritario = next((livro for livro in livros_encontrados if livro['codi_liv'] == TIPO_LIVRO_PREFERIDO), None)
            if livro_prioritario: return str(livro_prioritario['nume_liv']), livro_prioritario['codi_liv']
            else: return str(livros_encontrados[0]['nume_liv']), livros_encontrados[0]['codi_liv']
        except pyodbc.Error as ex:
            print(f"✗ Erro ao buscar livros ativos: {ex}"); return "1", 4
        finally: cursor.close()
    
    def determinar_pagina_inicial(self, codi_emp, codi_liv_ativo, data_inicio):
        print(f"\n[PASSO 2] Determinando Página Inicial para Livro (CODI_LIV = {codi_liv_ativo})...")
        if not self.conn: return 1
        cursor = self.conn.cursor()
        try:
            if not SQL_GET_PAGINA_ANTERIOR.strip():
                print("   => Consulta SQL_GET_PAGINA_ANTERIOR vazia. Usando página 1.")
                return 1
            cursor.execute(SQL_GET_PAGINA_ANTERIOR, codi_emp, codi_liv_ativo, data_inicio, codi_emp, codi_liv_ativo)
            row = cursor.fetchone()
            if row and row[0] is not None: return int(row[0]) + 1
            else: return 1
        except pyodbc.Error as ex:
            print(f"✗ Erro ao buscar página anterior: {ex}"); return 1
        finally: cursor.close()

class EntradaSaidaService(DatabaseService):
    def executar_consulta_entradas_saidas(self, cod_emp, data_inicio, data_fim, numero_livro, pagina_inicial):
        print("\n[CONSULTA] Executando consulta de Entradas e Saídas...")
        if not self.conn: return [], {}
        if not SQL_QUERY_PRINCIPAL_TEMPLATE.strip():
            print("⚠ Consulta SQL_QUERY_PRINCIPAL_TEMPLATE está vazia. Nenhum dado de entrada/saída será carregado."); return [], {}
        cursor = self.conn.cursor()
        try:
            query_final = SQL_QUERY_PRINCIPAL_TEMPLATE.format(cod_emp=cod_emp, data_inicio=data_inicio.strftime('%Y-%m-%d'), data_fim=data_fim.strftime('%Y-%m-%d'), livro_num=numero_livro, pagina_num=pagina_inicial)
            cursor.execute(query_final)
            results = cursor.fetchall()
            print(f"✓ Consulta concluída. {len(results)} registros encontrados.")
            json_data = {"SQL_QUERY_PRINCIPAL": {"dados": [{"QUADRO": r.QUADRO, "ORDE": r.ORDE, "CODINAT": r.CODINAT, "VCON": float(r.VCON), "BCAL": float(r.BCAL), "VICM": float(r.VICM), "IICM": float(r.IICM), "OICM": float(r.OICM), "NOMEEMP": r.NOMEEMP, "IESTEMP": r.IESTEMP, "CGCEEMP": r.CGCEEMP} for r in results]}}
            return results, json_data
        except pyodbc.Error as ex:
            print(f"✗ Erro ao executar consulta de entradas/saídas: {ex}"); return [], {}
        finally: cursor.close()

class ResumoApuracaoService(DatabaseService):
    def executar_consulta_resumo_apuracao(self, cod_emp, data_inicio, pdic_sim=None):
        print("\n[CONSULTA] Executando consulta de Resumo da Apuração...")
        if not self.conn: return None, {}
        if not SQL_RESUMO_APURACAO_TEMPLATE.strip():
            print("⚠ Consulta SQL_RESUMO_APURACAO_TEMPLATE está vazia. Nenhum dado de resumo será carregado."); return None, {}
        pdic_sim = pdic_sim if pdic_sim is not None else PDIC_SIM_DEFAULT
        cursor = self.conn.cursor()
        try:
            query_resumo = SQL_RESUMO_APURACAO_TEMPLATE.format(cod_emp=cod_emp, data_inicio=data_inicio.strftime('%Y-%m-%d'), pdic_sim=pdic_sim)
            cursor.execute(query_resumo)
            resultado = cursor.fetchone()
            json_data = {"SQL_RESUMO_APURACAO": {"dados": {k.upper(): float(v) if isinstance(v, Decimal) else v for k, v in zip([desc[0] for desc in cursor.description], resultado)}} if resultado else {}}
            return resultado, json_data
        except pyodbc.Error as ex:
            print(f"✗ Erro ao executar consulta de resumo: {ex}"); return None, {}
        finally: cursor.close()

    def executar_consulta_saldo_anterior(self, cod_emp, data_inicio, data_fim):
        print("\n[CONSULTA] Executando consulta de Saldo Credor Anterior...")
        if not self.conn: return Decimal(0)
        if not SQL_GET_SALDO_ANTERIOR_TEMPLATE.strip():
            print("⚠ Consulta SQL_GET_SALDO_ANTERIOR_TEMPLATE está vazia. Saldo anterior será 0."); return Decimal(0)
        cursor = self.conn.cursor()
        try:
            data_anterior = (data_inicio.replace(day=1) - timedelta(days=1)).replace(day=1)
            query = SQL_GET_SALDO_ANTERIOR_TEMPLATE.format(
                cod_emp=cod_emp,
                data_anterior_str=data_anterior.strftime('%Y-%m-%d'),
                data_inicio_str=data_inicio.strftime('%Y-%m-%d'),
                data_fim_str=data_fim.strftime('%Y-%m-%d')
            )
            cursor.execute(query)
            resultado = cursor.fetchone()
            saldo_anterior = Decimal(str(resultado.SALDO_CREDOR_ANTERIOR or 0))
            print(f"✓ Saldo credor do período anterior encontrado: {saldo_anterior:,.2f}")
            return saldo_anterior
        except pyodbc.Error as ex:
            print(f"✗ Erro ao buscar saldo anterior: {ex}"); return Decimal(0)
        finally: cursor.close()

    def _executar_consulta_detalhe(self, cursor, nome_json, template, nome_legivel, cod_emp, data_inicio, data_fim):
        if not template.strip():
            print(f"   - ⚠ Consulta {nome_legivel} vazia. Nenhum dado será carregado.")
            return [], {}
        print(f"   - Executando: {nome_legivel}...")
        query = template.format(cod_emp=cod_emp, data_inicio=data_inicio.strftime('%Y-%m-%d'), data_fim=data_fim.strftime('%Y-%m-%d'))
        cursor.execute(query)
        dados = cursor.fetchall()
        print(f"     => {len(dados)} registros")
        json_data = {nome_json: {"dados": [{"NOME": r.NOME or "Sem descrição", "VLOR": float(r.VLOR or 0)} for r in dados]}}
        return dados, json_data

    def executar_consultas_detalhamento(self, cod_emp, data_inicio, data_fim):
        print("\n[CONSULTA] Executando consultas de detalhamento...")
        if not self.conn: return [], [], [], [], {}
        cursor = self.conn.cursor()
        try:
            consultas = {
                "SQL_OUTROS_DEBITOS": (SQL_OUTROS_DEBITOS_TEMPLATE, "Outros Débitos"),
                "SQL_ESTORNOS_CREDITO": (SQL_ESTORNOS_CREDITO_TEMPLATE, "Estornos de Crédito"),
                "SQL_OUTROS_CREDITOS": (SQL_OUTROS_CREDITOS_TEMPLATE, "Outros Créditos"),
                "SQL_ESTORNOS_DEBITOS": (SQL_ESTORNOS_DEBITOS_TEMPLATE, "Estornos de Débitos")
            }
            resultados = {}
            json_detalhes = {}
            for nome_json, (template, nome_legivel) in consultas.items():
                dados, json_dado = self._executar_consulta_detalhe(cursor, nome_json, template, nome_legivel, cod_emp, data_inicio, data_fim)
                resultados[nome_json] = dados
                json_detalhes.update(json_dado)
            return resultados["SQL_OUTROS_DEBITOS"], resultados["SQL_ESTORNOS_CREDITO"], resultados["SQL_OUTROS_CREDITOS"], resultados["SQL_ESTORNOS_DEBITOS"], json_detalhes
        except pyodbc.Error as ex:
            print(f"✗ Erro ao executar detalhamentos: {ex}"); return [], [], [], [], {}
        finally: cursor.close()
    
    # Os outros métodos de serviço (ST, alíquota, etc.) seguiriam o mesmo padrão de verificação se a consulta está vazia.

# --- CONTROLADOR PRINCIPAL E LÓGICA DE EXECUÇÃO ---

class RAICMSController:
    def __init__(self):
        self.entrada_saida_service = EntradaSaidaService()
        self.resumo_apuracao_service = ResumoApuracaoService()
        # Mocking other services since their SQLs are empty
        self.report_manager = ReportManager()

    def processar_relatorio_completo(self, cod_emp, data_inicio, data_fim, gerar_pdf, gerar_xlsx):
        try:
            print("=" * 60 + f"\n🏢 SISTEMA RAICMS - EMPRESA: {cod_emp} | PERÍODO: {data_inicio.strftime(DISPLAY_DATE_FORMAT)} a {data_fim.strftime(DISPLAY_DATE_FORMAT)}\n" + "=" * 60)
            
            if not self._conectar_servicos(): return (False, "Falha de conexão.", [])
            
            numero_livro, tipo_livro_ativo = self.entrada_saida_service.decidir_livro_ativo(cod_emp, data_inicio, data_fim)
            pagina_inicial = self.entrada_saida_service.determinar_pagina_inicial(cod_emp, tipo_livro_ativo, data_inicio)
            
            dados_brutos, json_entradas_saidas = self.entrada_saida_service.executar_consulta_entradas_saidas(cod_emp, data_inicio, data_fim, numero_livro, pagina_inicial)
            
            dados_resumo_raw, json_resumo = self.resumo_apuracao_service.executar_consulta_resumo_apuracao(cod_emp, data_inicio)
            
            # ** ETAPA CHAVE: Buscar o saldo anterior e injetá-lo nos dados do resumo **
            saldo_anterior_correto = self.resumo_apuracao_service.executar_consulta_saldo_anterior(cod_emp, data_inicio, data_fim)
            
            # Cria um objeto mutável para sobrescrever o SALDOANT
            dados_resumo = None
            if dados_resumo_raw:
                # Transforma a tupla pyodbc.Row em um dicionário para poder modificar
                desc = [d[0].upper() for d in dados_resumo_raw.cursor_description]
                resumo_dict = dict(zip(desc, dados_resumo_raw))
                # Sobrescreve o SALDOANT
                resumo_dict['SALDOANT'] = saldo_anterior_correto
                # Atualiza o JSON também
                if json_resumo.get("SQL_RESUMO_APURACAO", {}).get("dados"):
                    json_resumo["SQL_RESUMO_APURACAO"]["dados"]["SALDOANT"] = float(saldo_anterior_correto)
                # Converte de volta para um objeto tipo namedtuple para o resto do código
                ResumoTuple = namedtuple('ResumoTuple', resumo_dict.keys())
                dados_resumo = ResumoTuple(**resumo_dict)

            detalhes_debitos, detalhes_estornos_c, detalhes_creditos, detalhes_estornos_d, json_detalhes = self.resumo_apuracao_service.executar_consultas_detalhamento(cod_emp, data_inicio, data_fim)
            
            # Demais consultas (mock/vazias por enquanto, para não dar erro)
            dados_info_comp, json_info_comp = ([], {})
            dados_resumo_st, json_resumo_st = (None, {})
            dados_st_interestadual_raw, json_st_interestadual = ([], {})
            dados_resumo_aliquota, json_resumo_aliquota = ([], {})
            resumo_st_inter, detalhes_st_inter = (None, {})
            
            if dados_brutos or dados_resumo:
                self._gerar_relatorios(
                    dados_brutos, dados_resumo, detalhes_debitos, detalhes_estornos_c,
                    detalhes_creditos, detalhes_estornos_d, dados_info_comp, dados_resumo_st, 
                    resumo_st_inter, detalhes_st_inter, dados_resumo_aliquota,
                    json_entradas_saidas, json_resumo, json_detalhes, 
                    json_info_comp, json_resumo_st, json_st_interestadual,
                    json_resumo_aliquota,
                    cod_emp, data_inicio, data_fim, pagina_inicial, numero_livro,
                    gerar_pdf, gerar_xlsx
                )
                
                base_nome_arquivo = f"Livro_ICMS{cod_emp}"
                arquivos_gerados = [f"{base_nome_arquivo}.json"]
                if gerar_pdf: arquivos_gerados.append(f"{base_nome_arquivo}.pdf")
                if gerar_xlsx: arquivos_gerados.append(f"{base_nome_arquivo}.xlsx")
                
                return (True, "Processo concluído com sucesso.", arquivos_gerados)
            else:
                return (False, "Nenhum dado encontrado para o período informado.", [])
                
        except Exception as e:
            msg = f"Erro inesperado no processamento: {e}"
            print(f"❌ {msg}"); traceback.print_exc()
            return (False, msg, [])
        finally:
            self._desconectar_servicos()
    
    def _conectar_servicos(self):
        return self.resumo_apuracao_service.conectar() and self.entrada_saida_service.conectar()
    
    def _desconectar_servicos(self):
        self.entrada_saida_service.desconectar(); self.resumo_apuracao_service.desconectar()

    def _transformar_dados_st_interestadual(self, dados_raw):
        if not dados_raw: return None, {}
        ResumoST = namedtuple('ResumoST', ['SAIDAS', 'OUTROSD', 'ESTORNOC', 'ENTRADAS', 'OUTROSC', 'ESTORNOD', 'SALDOANT', 'DEDUCOES', 'DEVEDOR', 'CREDOR', 'RECOLHER'])
        DetalheSTEstado = namedtuple('DetalheSTEstado', ['ESTADO', 'BASE_CALCULO', 'VALOR'])
        agrupamento = defaultdict(lambda: defaultdict(lambda: {'base': Decimal(0), 'valor': Decimal(0)}))
        for r in dados_raw:
            agrupamento[r.QUADRO][r.DESCRICAO]['base'] += Decimal(str(r.BASE_CALCULO or 0))
            agrupamento[r.QUADRO][r.DESCRICAO]['valor'] += Decimal(str(r.VALOR or 0))
        detalhes_finais, totais_quadro = defaultdict(list), defaultdict(lambda: {'base': Decimal(0), 'valor': Decimal(0)})
        for quadro, estados in sorted(agrupamento.items()):
            for estado, totais in sorted(estados.items()):
                detalhes_finais[quadro].append(DetalheSTEstado(ESTADO=estado, BASE_CALCULO=totais['base'], VALOR=totais['valor']))
                totais_quadro[quadro]['base'] += totais['base']
                totais_quadro[quadro]['valor'] += totais['valor']
        total_geral_base = sum(t['base'] for t in totais_quadro.values())
        subtotal_debito = sum(t['valor'] for t in totais_quadro.values())
        resumo_obj = ResumoST(SAIDAS=totais_quadro[1]['valor'], OUTROSD=totais_quadro[2]['valor'], ESTORNOC=totais_quadro[3]['valor'], ENTRADAS=Decimal(0), OUTROSC=Decimal(0), ESTORNOD=Decimal(0), SALDOANT=Decimal(0), DEDUCOES=Decimal(0), DEVEDOR=total_geral_base, CREDOR=Decimal(0), RECOLHER=subtotal_debito)
        detalhes_finais['geral'] = sorted([item for sublist in detalhes_finais.values() for item in sublist], key=lambda x: x.ESTADO)
        return resumo_obj, dict(detalhes_finais)

    def _gerar_relatorios(self, dados_brutos, dados_resumo, detalhes_debitos, detalhes_estornos_c, detalhes_creditos, detalhes_estornos_d, dados_info_comp, dados_resumo_st, resumo_st_inter, detalhes_st_inter, dados_resumo_aliquota, json_entradas_saidas, json_resumo, json_detalhes, json_info_comp, json_resumo_st, json_st_interestadual, json_resumo_aliquota, cod_emp, data_inicio, data_fim, pagina_inicial, numero_livro, gerar_pdf, gerar_xlsx):
        periodo_str = f"{data_inicio.strftime(DISPLAY_DATE_FORMAT)} a {data_fim.strftime(DISPLAY_DATE_FORMAT)}"
        self.report_manager.gerar_relatorios_completos(
            dados_brutos=dados_brutos, dados_resumo=dados_resumo,
            detalhes_outros_debitos=detalhes_debitos, detalhes_estornos_credito=detalhes_estornos_c,
            detalhes_outros_creditos=detalhes_creditos, detalhes_estornos_debitos=detalhes_estornos_d,
            dados_info_comp=dados_info_comp, dados_resumo_st=dados_resumo_st,
            resumo_st_interestadual=resumo_st_inter, detalhes_st_interestadual=detalhes_st_inter,
            dados_resumo_aliquota=dados_resumo_aliquota,
            dados_json_entradas_saidas=json_entradas_saidas, dados_json_resumo=json_resumo,
            dados_json_detalhes=json_detalhes, dados_json_info_comp=json_info_comp,
            dados_json_resumo_st=json_resumo_st, dados_json_st_interestadual=json_st_interestadual,
            dados_json_resumo_aliquota=json_resumo_aliquota,
            periodo=periodo_str, codi_emp=cod_emp, folha_inicial=pagina_inicial, livro_num=numero_livro,
            gerar_pdf=gerar_pdf, gerar_xlsx=gerar_xlsx
        )

# --- FUNÇÃO PRINCIPAL DA API E MODO DE EXECUÇÃO ---

# --- FUNÇÃO PRINCIPAL DA API E MODO DE EXECUÇÃO ---

# --- FUNÇÃO PRINCIPAL DA API E MODO DE EXECUÇÃO ---

def gerarLivroICMS(codi_emp, data_inicio, data_fim, gerar_pdf=False, gerar_xlsx=True):
    """
    Função principal para gerar o Livro de Apuração do ICMS.
    (Comportamento de retorno restaurado para o padrão original do projeto)

    Args:
        codi_emp (int): O código da empresa.
        data_inicio (str ou date): A data de início do período.
        data_fim (str ou date): A data de fim do período.
        gerar_pdf (bool, optional): Se True, gera o relatório em PDF.
        gerar_xlsx (bool, optional): Se True, gera o relatório em XLSX.

    Returns:
        list: Uma lista com os nomes dos arquivos gerados em caso de sucesso.
              Retorna uma lista vazia em caso de falha.
    """
    try:
        if isinstance(data_inicio, str):
            data_inicio = datetime.strptime(data_inicio, '%Y-%m-%d').date()
        if isinstance(data_fim, str):
            data_fim = datetime.strptime(data_fim, '%Y-%m-%d').date()
    except ValueError as e:
        msg = f"Erro de formato de data: {e}"
        print(f"❌ {msg}")
        return [] # <<-- CORREÇÃO AQUI: Retorna lista vazia em caso de erro

    try:
        controller = RAICMSController()
        
        # <<-- CORREÇÃO AQUI: Captura a tupla completa do controlador
        sucesso, mensagem, arquivos = controller.processar_relatorio_completo(
            cod_emp=codi_emp, 
            data_inicio=data_inicio, 
            data_fim=data_fim,
            gerar_pdf=gerar_pdf,
            gerar_xlsx=gerar_xlsx
        )

        # <<-- CORREÇÃO AQUI: Restaura o comportamento de retorno original
        if sucesso:
            return arquivos  # Retorna apenas a lista de arquivos
        else:
            print(f"❌ Falha na geração do Livro ICMS: {mensagem}")
            return []  # Retorna lista vazia em caso de falha

    except Exception as e:
        msg = f"Erro inesperado ao executar RAICMSController: {e}"
        print(f"❌ {msg}")
        traceback.print_exc()
        return [] # <<-- CORREÇÃO AQUI: Retorna lista vazia em caso de erro grave

def obter_dados_usuario_interativo():
    """Função para obter dados do usuário no modo interativo (script)."""
    try:
        print("\n" + "="*50 + "\n📝 ENTRADA DE DADOS (MODO INTERATIVO)\n" + "="*50)
        cod_emp_str = input("🏢 Código da Empresa (ex: 2026): ").strip()
        data_inicio_str = input("📅 Data de início (AAAA-MM-DD, ex: 2025-07-01): ").strip()
        data_fim_str = input("📅 Data de fim (AAAA-MM-DD, ex: 2025-07-31): ").strip()
        gerar_pdf_str = input("📄 Gerar PDF? (s/N): ").strip().lower()
        gerar_xlsx_str = input("📊 Gerar XLSX? (S/n): ").strip().lower()
        
        if not all([cod_emp_str, data_inicio_str, data_fim_str]):
            raise ValueError("Código da empresa e datas são campos obrigatórios.")
        
        cod_emp = int(cod_emp_str)
        data_inicio = datetime.strptime(data_inicio_str, '%Y-%m-%d').date()
        data_fim = datetime.strptime(data_fim_str, '%Y-%m-%d').date()
        
        if data_inicio > data_fim:
            raise ValueError("Data de início não pode ser maior que a data de fim.")
        
        return cod_emp, data_inicio, data_fim, gerar_pdf_str == 's', gerar_xlsx_str != 'n'

    except (ValueError, TypeError) as e: 
        print(f"❌ Erro nos dados informados: {e}. Verifique os formatos.")
        return None, None, None, False, True
    except KeyboardInterrupt: 
        print("\n\n👋 Operação cancelada pelo usuário.")
        return None, None, None, False, True

def main_interativo():
    """Função principal para execução como script interativo."""
    try:
        print("\n" + "🚀" * 15 + "\n🎯 SISTEMA RAICMS\n" + "🚀" * 15)
        params = obter_dados_usuario_interativo()
        if params[0] is None: 
            print("\n❌ Encerrando o programa.")
            return

        cod_emp, data_inicio, data_fim, gerar_pdf, gerar_xlsx = params
        
        # <<-- CORREÇÃO AQUI: A função agora retorna apenas a lista de arquivos
        arquivos_gerados = gerarLivroICMS(
            codi_emp=cod_emp, 
            data_inicio=data_inicio, 
            data_fim=data_fim,
            gerar_pdf=gerar_pdf,
            gerar_xlsx=gerar_xlsx
        )

        # <<-- CORREÇÃO AQUI: A verificação de sucesso é baseada na lista de arquivos
        if arquivos_gerados:
            print("\n" + "🎉" * 20 + f"\n✅ Processo concluído com sucesso!\n" + "🎉" * 20)
            print("📂 Arquivos gerados:")
            for arq in arquivos_gerados:
                print(f"   - {os.path.abspath(arq)}")
        else:
            print(f"\n❌ Processo não pôde ser concluído. Verifique as mensagens de erro acima.")

    except KeyboardInterrupt: 
        print("\n\n👋 Programa interrompido pelo usuário.")
    except Exception as e:
        print(f"\n❌ Erro inesperado na execução principal: {e}")
        traceback.print_exc()
    finally:
        print("\n👋 Obrigado por usar o Sistema RAICMS!")
